
LocalHub1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c70  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dd4  08004dd4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004dd4  08004dd4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dd4  08004dd4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dd8  08004dd8  00014dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000018  08004df4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08004df4  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfe2  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020cb  00000000  00000000  0002d023  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  0002f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d78  00000000  00000000  0002ff80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014d85  00000000  00000000  00030cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a9f8  00000000  00000000  00045a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073577  00000000  00000000  00050475  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c39ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e64  00000000  00000000  000c3a68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d68 	.word	0x08004d68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08004d68 	.word	0x08004d68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a41      	ldr	r2, [pc, #260]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0310 	and.w	r3, r3, #16
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a78:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a3b      	ldr	r2, [pc, #236]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a7e:	f043 0320 	orr.w	r3, r3, #32
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b39      	ldr	r3, [pc, #228]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0320 	and.w	r3, r3, #32
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b36      	ldr	r3, [pc, #216]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a35      	ldr	r2, [pc, #212]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BuildInLed_GPIO_Port, BuildInLed_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac6:	482a      	ldr	r0, [pc, #168]	; (8000b70 <MX_GPIO_Init+0x124>)
 8000ac8:	f001 fe98 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CSN_Pin|SPI1_CE_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2118      	movs	r1, #24
 8000ad0:	4828      	ldr	r0, [pc, #160]	; (8000b74 <MX_GPIO_Init+0x128>)
 8000ad2:	f001 fe93 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000adc:	4826      	ldr	r0, [pc, #152]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000ade:	f001 fe8d 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BuildInLed_Pin;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BuildInLed_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4619      	mov	r1, r3
 8000afa:	481d      	ldr	r0, [pc, #116]	; (8000b70 <MX_GPIO_Init+0x124>)
 8000afc:	f001 fd24 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 8000b00:	2304      	movs	r3, #4
 8000b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <MX_GPIO_Init+0x130>)
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4619      	mov	r1, r3
 8000b12:	4818      	ldr	r0, [pc, #96]	; (8000b74 <MX_GPIO_Init+0x128>)
 8000b14:	f001 fd18 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|SPI1_CE_Pin;
 8000b18:	2318      	movs	r3, #24
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4811      	ldr	r0, [pc, #68]	; (8000b74 <MX_GPIO_Init+0x128>)
 8000b30:	f001 fd0a 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480a      	ldr	r0, [pc, #40]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000b4e:	f001 fcfb 	bl	8002548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2008      	movs	r0, #8
 8000b58:	f001 fc49 	bl	80023ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b5c:	2008      	movs	r0, #8
 8000b5e:	f001 fc62 	bl	8002426 <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40011000 	.word	0x40011000
 8000b74:	40010800 	.word	0x40010800
 8000b78:	40010c00 	.word	0x40010c00
 8000b7c:	10210000 	.word	0x10210000

08000b80 <NRF_SetDefaultSettings>:

uint8_t NRF_txBuff[NRF_txBuffSize];
uint8_t NRF_rxBuff[NRF_rxBuffSize];

void NRF_SetDefaultSettings(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
	NRF_CE_LOW;
 8000b86:	2200      	movs	r2, #0
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4832      	ldr	r0, [pc, #200]	; (8000c54 <NRF_SetDefaultSettings+0xd4>)
 8000b8c:	f001 fe36 	bl	80027fc <HAL_GPIO_WritePin>
	NRF_Delay(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f001 fb33 	bl	80021fc <HAL_Delay>
	NRF_WriteReg(NRF_REG_CONFIG, 0x02);
 8000b96:	2102      	movs	r1, #2
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 f895 	bl	8000cc8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_EN_AA, 0x3f); //Enable auto Acknowledgment pipe1 0x3f
 8000b9e:	213f      	movs	r1, #63	; 0x3f
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 f891 	bl	8000cc8 <NRF_WriteReg>
  NRF_WriteReg(NRF_REG_EN_RXADDR, 0x03); // Enable rx address pipe1
 8000ba6:	2103      	movs	r1, #3
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f000 f88d 	bl	8000cc8 <NRF_WriteReg>
  NRF_WriteReg(NRF_REG_SETUP_AW, 0x03); // Address width 5 bytes
 8000bae:	2103      	movs	r1, #3
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f889 	bl	8000cc8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_SETUP_RETR, 0x5F); // 1500us, 15 retrans
 8000bb6:	215f      	movs	r1, #95	; 0x5f
 8000bb8:	2004      	movs	r0, #4
 8000bba:	f000 f885 	bl	8000cc8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_RF_CH, 0x60); // Set 96 channel
 8000bbe:	2160      	movs	r1, #96	; 0x60
 8000bc0:	2005      	movs	r0, #5
 8000bc2:	f000 f881 	bl	8000cc8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_RF_SETUP, 0x27); //0dBm, 250kbps
 8000bc6:	2127      	movs	r1, #39	; 0x27
 8000bc8:	2006      	movs	r0, #6
 8000bca:	f000 f87d 	bl	8000cc8 <NRF_WriteReg>
	NRF_ToggleFeatures();
 8000bce:	f000 f8a9 	bl	8000d24 <NRF_ToggleFeatures>
	NRF_WriteReg(NRF_REG_FEATURE, 0x07);
 8000bd2:	2107      	movs	r1, #7
 8000bd4:	201d      	movs	r0, #29
 8000bd6:	f000 f877 	bl	8000cc8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_DYNPD, 0x3F); //Enable dynamic payloads on all pipes
 8000bda:	213f      	movs	r1, #63	; 0x3f
 8000bdc:	201c      	movs	r0, #28
 8000bde:	f000 f873 	bl	8000cc8 <NRF_WriteReg>

	//Main hub
	uint8_t NRF_TX_Addr[] = {1, 1, 1, 1, 1};
 8000be2:	4a1d      	ldr	r2, [pc, #116]	; (8000c58 <NRF_SetDefaultSettings+0xd8>)
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bec:	6018      	str	r0, [r3, #0]
 8000bee:	3304      	adds	r3, #4
 8000bf0:	7019      	strb	r1, [r3, #0]
	NRF_WriteMBReg(NRF_REG_TX_ADDR, NRF_TX_Addr, 5);
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	2205      	movs	r2, #5
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2010      	movs	r0, #16
 8000bfc:	f000 f8bc 	bl	8000d78 <NRF_WriteMBReg>

	uint8_t NRF_RX0_Addr[] = {1, 1, 1, 1, 1};
 8000c00:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <NRF_SetDefaultSettings+0xd8>)
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c0a:	6018      	str	r0, [r3, #0]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	7019      	strb	r1, [r3, #0]
	NRF_WriteMBReg(NRF_REG_RX_ADDR_P0, NRF_RX0_Addr, 5);
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	2205      	movs	r2, #5
 8000c16:	4619      	mov	r1, r3
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f000 f8ad 	bl	8000d78 <NRF_WriteMBReg>

	uint8_t NRF_RX1_Addr[] = {2, 1, 1, 1, 1};
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <NRF_SetDefaultSettings+0xdc>)
 8000c20:	463b      	mov	r3, r7
 8000c22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c26:	6018      	str	r0, [r3, #0]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	7019      	strb	r1, [r3, #0]
	NRF_WriteMBReg(NRF_REG_RX_ADDR_P1, NRF_RX1_Addr, 5);
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2205      	movs	r2, #5
 8000c30:	4619      	mov	r1, r3
 8000c32:	200b      	movs	r0, #11
 8000c34:	f000 f8a0 	bl	8000d78 <NRF_WriteMBReg>

	NRF_FlushRX();
 8000c38:	f000 f8d0 	bl	8000ddc <NRF_FlushRX>
	NRF_FlushTX();
 8000c3c:	f000 f8f0 	bl	8000e20 <NRF_FlushTX>

	NRF_ClearTxBuff();
 8000c40:	f000 fafe 	bl	8001240 <NRF_ClearTxBuff>
	NRF_ClearRxBuff();
 8000c44:	f000 fae4 	bl	8001210 <NRF_ClearRxBuff>

  NRF_RX_Mode();
 8000c48:	f000 f90c 	bl	8000e64 <NRF_RX_Mode>
}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40010800 	.word	0x40010800
 8000c58:	08004d80 	.word	0x08004d80
 8000c5c:	08004d88 	.word	0x08004d88

08000c60 <NRF_ReadReg>:

uint8_t NRF_ReadReg(uint8_t regAddr)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	uint8_t regValue = 0x00;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73fb      	strb	r3, [r7, #15]

	NRF_CSN_LOW;
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2108      	movs	r1, #8
 8000c72:	4812      	ldr	r0, [pc, #72]	; (8000cbc <NRF_ReadReg+0x5c>)
 8000c74:	f001 fdc2 	bl	80027fc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &regAddr, &regValue, 1, 1000);
 8000c78:	f107 020f 	add.w	r2, r7, #15
 8000c7c:	1df9      	adds	r1, r7, #7
 8000c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2301      	movs	r3, #1
 8000c86:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <NRF_ReadReg+0x60>)
 8000c88:	f002 fbbb 	bl	8003402 <HAL_SPI_TransmitReceive>

	if(regAddr != NRF_REG_STATUS)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b07      	cmp	r3, #7
 8000c90:	d009      	beq.n	8000ca6 <NRF_ReadReg+0x46>
	{
		HAL_SPI_TransmitReceive(&hspi1, &NRF_CMD_NOP, &regValue,1,1000);
 8000c92:	f107 020f 	add.w	r2, r7, #15
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	4909      	ldr	r1, [pc, #36]	; (8000cc4 <NRF_ReadReg+0x64>)
 8000ca0:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <NRF_ReadReg+0x60>)
 8000ca2:	f002 fbae 	bl	8003402 <HAL_SPI_TransmitReceive>
	}
	NRF_CSN_HIGH;
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2108      	movs	r1, #8
 8000caa:	4804      	ldr	r0, [pc, #16]	; (8000cbc <NRF_ReadReg+0x5c>)
 8000cac:	f001 fda6 	bl	80027fc <HAL_GPIO_WritePin>

	return regValue;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	200000d8 	.word	0x200000d8
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <NRF_WriteReg>:

void NRF_WriteReg(uint8_t regAddr, uint8_t regValue)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	460a      	mov	r2, r1
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = regAddr | W_REGISTER;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f043 0320 	orr.w	r3, r3, #32
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	73fb      	strb	r3, [r7, #15]
	NRF_CSN_LOW;
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2108      	movs	r1, #8
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <NRF_WriteReg+0x54>)
 8000ce8:	f001 fd88 	bl	80027fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 1000);
 8000cec:	f107 010f 	add.w	r1, r7, #15
 8000cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	480a      	ldr	r0, [pc, #40]	; (8000d20 <NRF_WriteReg+0x58>)
 8000cf8:	f002 fa4f 	bl	800319a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &regValue, 1, 1000);
 8000cfc:	1db9      	adds	r1, r7, #6
 8000cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d02:	2201      	movs	r2, #1
 8000d04:	4806      	ldr	r0, [pc, #24]	; (8000d20 <NRF_WriteReg+0x58>)
 8000d06:	f002 fa48 	bl	800319a <HAL_SPI_Transmit>
	NRF_CSN_HIGH;
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	4803      	ldr	r0, [pc, #12]	; (8000d1c <NRF_WriteReg+0x54>)
 8000d10:	f001 fd74 	bl	80027fc <HAL_GPIO_WritePin>
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40010800 	.word	0x40010800
 8000d20:	200000d8 	.word	0x200000d8

08000d24 <NRF_ToggleFeatures>:

void NRF_ToggleFeatures(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 8000d2a:	2350      	movs	r3, #80	; 0x50
 8000d2c:	713b      	strb	r3, [r7, #4]

  NRF_CSN_LOW;
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2108      	movs	r1, #8
 8000d32:	480f      	ldr	r0, [pc, #60]	; (8000d70 <NRF_ToggleFeatures+0x4c>)
 8000d34:	f001 fd62 	bl	80027fc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, dt, 1,1000);
 8000d38:	1d39      	adds	r1, r7, #4
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	2201      	movs	r2, #1
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <NRF_ToggleFeatures+0x50>)
 8000d42:	f002 fa2a 	bl	800319a <HAL_SPI_Transmit>
  NRF_Delay(1);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f001 fa58 	bl	80021fc <HAL_Delay>
  dt[0] = 0x73;
 8000d4c:	2373      	movs	r3, #115	; 0x73
 8000d4e:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1, dt, 1,1000);
 8000d50:	1d39      	adds	r1, r7, #4
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	2201      	movs	r2, #1
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <NRF_ToggleFeatures+0x50>)
 8000d5a:	f002 fa1e 	bl	800319a <HAL_SPI_Transmit>

  NRF_CSN_HIGH;
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2108      	movs	r1, #8
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <NRF_ToggleFeatures+0x4c>)
 8000d64:	f001 fd4a 	bl	80027fc <HAL_GPIO_WritePin>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40010800 	.word	0x40010800
 8000d74:	200000d8 	.word	0x200000d8

08000d78 <NRF_WriteMBReg>:
	HAL_SPI_Receive(&hspi1, pBuf, countBytes, 1000);
	NRF_CSN_HIGH;
}

void NRF_WriteMBReg(uint8_t regAddr, uint8_t *pBuf, uint8_t countBytes)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
 8000d84:	4613      	mov	r3, r2
 8000d86:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = regAddr | W_REGISTER;
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f043 0320 	orr.w	r3, r3, #32
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	73fb      	strb	r3, [r7, #15]

	NRF_CSN_LOW;
 8000d92:	2200      	movs	r2, #0
 8000d94:	2108      	movs	r1, #8
 8000d96:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <NRF_WriteMBReg+0x5c>)
 8000d98:	f001 fd30 	bl	80027fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 1000);
 8000d9c:	f107 010f 	add.w	r1, r7, #15
 8000da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da4:	2201      	movs	r2, #1
 8000da6:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <NRF_WriteMBReg+0x60>)
 8000da8:	f002 f9f7 	bl	800319a <HAL_SPI_Transmit>
	NRF_Delay(1);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f001 fa25 	bl	80021fc <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, pBuf, countBytes, 1000);
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	6839      	ldr	r1, [r7, #0]
 8000dbc:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <NRF_WriteMBReg+0x60>)
 8000dbe:	f002 f9ec 	bl	800319a <HAL_SPI_Transmit>
	NRF_CSN_HIGH;
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <NRF_WriteMBReg+0x5c>)
 8000dc8:	f001 fd18 	bl	80027fc <HAL_GPIO_WritePin>
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	200000d8 	.word	0x200000d8

08000ddc <NRF_FlushRX>:

void NRF_FlushRX(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000de2:	23e2      	movs	r3, #226	; 0xe2
 8000de4:	713b      	strb	r3, [r7, #4]

  NRF_CSN_LOW;
 8000de6:	2200      	movs	r2, #0
 8000de8:	2108      	movs	r1, #8
 8000dea:	480b      	ldr	r0, [pc, #44]	; (8000e18 <NRF_FlushRX+0x3c>)
 8000dec:	f001 fd06 	bl	80027fc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000df0:	1d39      	adds	r1, r7, #4
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	2201      	movs	r2, #1
 8000df8:	4808      	ldr	r0, [pc, #32]	; (8000e1c <NRF_FlushRX+0x40>)
 8000dfa:	f002 f9ce 	bl	800319a <HAL_SPI_Transmit>
  NRF_Delay(1);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f001 f9fc 	bl	80021fc <HAL_Delay>

  NRF_CSN_HIGH;
 8000e04:	2201      	movs	r2, #1
 8000e06:	2108      	movs	r1, #8
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <NRF_FlushRX+0x3c>)
 8000e0a:	f001 fcf7 	bl	80027fc <HAL_GPIO_WritePin>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40010800 	.word	0x40010800
 8000e1c:	200000d8 	.word	0x200000d8

08000e20 <NRF_FlushTX>:

void NRF_FlushTX(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 8000e26:	23e1      	movs	r3, #225	; 0xe1
 8000e28:	713b      	strb	r3, [r7, #4]

  NRF_CSN_LOW;
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2108      	movs	r1, #8
 8000e2e:	480b      	ldr	r0, [pc, #44]	; (8000e5c <NRF_FlushTX+0x3c>)
 8000e30:	f001 fce4 	bl	80027fc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000e34:	1d39      	adds	r1, r7, #4
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4808      	ldr	r0, [pc, #32]	; (8000e60 <NRF_FlushTX+0x40>)
 8000e3e:	f002 f9ac 	bl	800319a <HAL_SPI_Transmit>
  NRF_Delay(1);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f001 f9da 	bl	80021fc <HAL_Delay>

  NRF_CSN_HIGH;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <NRF_FlushTX+0x3c>)
 8000e4e:	f001 fcd5 	bl	80027fc <HAL_GPIO_WritePin>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	200000d8 	.word	0x200000d8

08000e64 <NRF_RX_Mode>:

void NRF_RX_Mode(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
  uint8_t regval = 0x00;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  regval = NRF_ReadReg(NRF_REG_CONFIG);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff fef6 	bl	8000c60 <NRF_ReadReg>
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f043 0303 	orr.w	r3, r3, #3
 8000e7e:	71fb      	strb	r3, [r7, #7]

  NRF_WriteReg(NRF_REG_CONFIG, regval);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4619      	mov	r1, r3
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff ff1f 	bl	8000cc8 <NRF_WriteReg>

  if(!(regval & _BV(PWR_UP)))
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <NRF_RX_Mode+0x36>
  	HAL_Delay(5);
 8000e94:	2005      	movs	r0, #5
 8000e96:	f001 f9b1 	bl	80021fc <HAL_Delay>

  NRF_CE_HIGH;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <NRF_RX_Mode+0x5c>)
 8000ea0:	f001 fcac 	bl	80027fc <HAL_GPIO_WritePin>

  HAL_Delay(1);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f001 f9a9 	bl	80021fc <HAL_Delay>

  NRF_FlushRX();
 8000eaa:	f7ff ff97 	bl	8000ddc <NRF_FlushRX>
  NRF_FlushTX();
 8000eae:	f7ff ffb7 	bl	8000e20 <NRF_FlushTX>

  HAL_Delay(5);
 8000eb2:	2005      	movs	r0, #5
 8000eb4:	f001 f9a2 	bl	80021fc <HAL_Delay>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40010800 	.word	0x40010800

08000ec4 <NRF_TX_Mode>:

void NRF_TX_Mode(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	NRF_CE_LOW;
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2110      	movs	r1, #16
 8000ece:	481a      	ldr	r0, [pc, #104]	; (8000f38 <NRF_TX_Mode+0x74>)
 8000ed0:	f001 fc94 	bl	80027fc <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8000ed4:	200f      	movs	r0, #15
 8000ed6:	f001 f991 	bl	80021fc <HAL_Delay>

	uint8_t config = NRF_ReadReg(NRF_REG_CONFIG);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f7ff fec0 	bl	8000c60 <NRF_ReadReg>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]

	if(!(config & _BV(PWR_UP)))
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10b      	bne.n	8000f06 <NRF_TX_Mode+0x42>
	{
		config |= _BV(PWR_UP);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	71fb      	strb	r3, [r7, #7]
		NRF_WriteReg(NRF_REG_CONFIG, config);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff fee4 	bl	8000cc8 <NRF_WriteReg>
		HAL_Delay(5); //1.5ms
 8000f00:	2005      	movs	r0, #5
 8000f02:	f001 f97b 	bl	80021fc <HAL_Delay>
	}

	config = NRF_ReadReg(NRF_REG_CONFIG);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff feaa 	bl	8000c60 <NRF_ReadReg>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
	config &= ~_BV(PRIM_RX);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f023 0301 	bic.w	r3, r3, #1
 8000f16:	71fb      	strb	r3, [r7, #7]
	NRF_WriteReg(NRF_REG_CONFIG, config);
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fed3 	bl	8000cc8 <NRF_WriteReg>

	NRF_FlushRX();
 8000f22:	f7ff ff5b 	bl	8000ddc <NRF_FlushRX>
	NRF_FlushTX();
 8000f26:	f7ff ff7b 	bl	8000e20 <NRF_FlushTX>

	HAL_Delay(5);
 8000f2a:	2005      	movs	r0, #5
 8000f2c:	f001 f966 	bl	80021fc <HAL_Delay>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40010800 	.word	0x40010800

08000f3c <NRF_GetPacket>:


void NRF_GetPacket(uint8_t *buf)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	6078      	str	r0, [r7, #4]
	uint8_t nop = 0xFF;
 8000f44:	23ff      	movs	r3, #255	; 0xff
 8000f46:	72fb      	strb	r3, [r7, #11]
	uint8_t reg = R_RX_PAYLOAD;
 8000f48:	2361      	movs	r3, #97	; 0x61
 8000f4a:	72bb      	strb	r3, [r7, #10]
	uint8_t status = NRF_ReadReg(NRF_REG_STATUS);
 8000f4c:	2007      	movs	r0, #7
 8000f4e:	f7ff fe87 	bl	8000c60 <NRF_ReadReg>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]

	NRF_CSN_LOW;
 8000f56:	2200      	movs	r2, #0
 8000f58:	2108      	movs	r1, #8
 8000f5a:	4822      	ldr	r0, [pc, #136]	; (8000fe4 <NRF_GetPacket+0xa8>)
 8000f5c:	f001 fc4e 	bl	80027fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8000f60:	f107 010a 	add.w	r1, r7, #10
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	2201      	movs	r2, #1
 8000f6a:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <NRF_GetPacket+0xac>)
 8000f6c:	f002 f915 	bl	800319a <HAL_SPI_Transmit>

	uint8_t dataLength = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	727b      	strb	r3, [r7, #9]
	HAL_SPI_TransmitReceive(&hspi1, &nop, &dataLength, 1, 1000);
 8000f74:	f107 0209 	add.w	r2, r7, #9
 8000f78:	f107 010b 	add.w	r1, r7, #11
 8000f7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	4818      	ldr	r0, [pc, #96]	; (8000fe8 <NRF_GetPacket+0xac>)
 8000f86:	f002 fa3c 	bl	8003402 <HAL_SPI_TransmitReceive>

	if(dataLength == 0xff)
 8000f8a:	7a7b      	ldrb	r3, [r7, #9]
 8000f8c:	2bff      	cmp	r3, #255	; 0xff
 8000f8e:	d025      	beq.n	8000fdc <NRF_GetPacket+0xa0>
		return;


	HAL_SPI_TransmitReceive(&hspi1, &nop, buf, dataLength, 1000);
 8000f90:	7a7b      	ldrb	r3, [r7, #9]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	f107 010b 	add.w	r1, r7, #11
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <NRF_GetPacket+0xac>)
 8000fa4:	f002 fa2d 	bl	8003402 <HAL_SPI_TransmitReceive>

	uint8_t feature = NRF_ReadReg(NRF_REG_FEATURE);
 8000fa8:	201d      	movs	r0, #29
 8000faa:	f7ff fe59 	bl	8000c60 <NRF_ReadReg>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73bb      	strb	r3, [r7, #14]
	uint8_t en_dpl = feature & (1<<(2));
 8000fb2:	7bbb      	ldrb	r3, [r7, #14]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	737b      	strb	r3, [r7, #13]
	if(!en_dpl)
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d103      	bne.n	8000fc8 <NRF_GetPacket+0x8c>
	{
		uint8_t blank = 32 - dataLength;
 8000fc0:	7a7b      	ldrb	r3, [r7, #9]
 8000fc2:	f1c3 0320 	rsb	r3, r3, #32
 8000fc6:	733b      	strb	r3, [r7, #12]
		//HAL_SPI_Transmit(&hspi1, &nop, blank, 1000);
	}

	NRF_CSN_HIGH;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2108      	movs	r1, #8
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <NRF_GetPacket+0xa8>)
 8000fce:	f001 fc15 	bl	80027fc <HAL_GPIO_WritePin>
	NRF_WriteReg(NRF_REG_STATUS, _BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS));
 8000fd2:	2170      	movs	r1, #112	; 0x70
 8000fd4:	2007      	movs	r0, #7
 8000fd6:	f7ff fe77 	bl	8000cc8 <NRF_WriteReg>
 8000fda:	e000      	b.n	8000fde <NRF_GetPacket+0xa2>
		return;
 8000fdc:	bf00      	nop
}
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	200000d8 	.word	0x200000d8

08000fec <NRF_SendPacket>:

int8_t NRF_SendPacket(uint8_t *receiverAddress, uint8_t *buf, uint8_t writeType)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	71fb      	strb	r3, [r7, #7]
	if(receiverAddress != NULL)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d004      	beq.n	800100a <NRF_SendPacket+0x1e>
		NRF_WriteMBReg(NRF_REG_TX_ADDR, receiverAddress, 5);
 8001000:	2205      	movs	r2, #5
 8001002:	68f9      	ldr	r1, [r7, #12]
 8001004:	2010      	movs	r0, #16
 8001006:	f7ff feb7 	bl	8000d78 <NRF_WriteMBReg>

	uint8_t dataLength = strlen(buf);
 800100a:	68b8      	ldr	r0, [r7, #8]
 800100c:	f7ff f8a0 	bl	8000150 <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	753b      	strb	r3, [r7, #20]
	if(dataLength > 29)
 8001016:	7d3b      	ldrb	r3, [r7, #20]
 8001018:	2b1d      	cmp	r3, #29
 800101a:	d902      	bls.n	8001022 <NRF_SendPacket+0x36>
		return -2;
 800101c:	f06f 0301 	mvn.w	r3, #1
 8001020:	e069      	b.n	80010f6 <NRF_SendPacket+0x10a>

	NRF_CSN_LOW;
 8001022:	2200      	movs	r2, #0
 8001024:	2108      	movs	r1, #8
 8001026:	4836      	ldr	r0, [pc, #216]	; (8001100 <NRF_SendPacket+0x114>)
 8001028:	f001 fbe8 	bl	80027fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &writeType, 1, 1000);
 800102c:	1df9      	adds	r1, r7, #7
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	2201      	movs	r2, #1
 8001034:	4833      	ldr	r0, [pc, #204]	; (8001104 <NRF_SendPacket+0x118>)
 8001036:	f002 f8b0 	bl	800319a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &dataLength, 1, 1000);
 800103a:	f107 0114 	add.w	r1, r7, #20
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	2201      	movs	r2, #1
 8001044:	482f      	ldr	r0, [pc, #188]	; (8001104 <NRF_SendPacket+0x118>)
 8001046:	f002 f8a8 	bl	800319a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, dataLength, 1000);
 800104a:	7d3b      	ldrb	r3, [r7, #20]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	482b      	ldr	r0, [pc, #172]	; (8001104 <NRF_SendPacket+0x118>)
 8001056:	f002 f8a0 	bl	800319a <HAL_SPI_Transmit>

	bool en_dpl = NRF_ReadReg(NRF_REG_FEATURE) & _BV(EN_DPL);
 800105a:	201d      	movs	r0, #29
 800105c:	f7ff fe00 	bl	8000c60 <NRF_ReadReg>
 8001060:	4603      	mov	r3, r0
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	2b00      	cmp	r3, #0
 8001068:	bf14      	ite	ne
 800106a:	2301      	movne	r3, #1
 800106c:	2300      	moveq	r3, #0
 800106e:	75fb      	strb	r3, [r7, #23]
	if(!en_dpl)
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	f083 0301 	eor.w	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00b      	beq.n	8001094 <NRF_SendPacket+0xa8>
	{
		uint8_t blank = 32 - dataLength;
 800107c:	7d3b      	ldrb	r3, [r7, #20]
 800107e:	f1c3 0320 	rsb	r3, r3, #32
 8001082:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi1, &NRF_CMD_NOP, blank, 1000);
 8001084:	7dbb      	ldrb	r3, [r7, #22]
 8001086:	b29a      	uxth	r2, r3
 8001088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108c:	491e      	ldr	r1, [pc, #120]	; (8001108 <NRF_SendPacket+0x11c>)
 800108e:	481d      	ldr	r0, [pc, #116]	; (8001104 <NRF_SendPacket+0x118>)
 8001090:	f002 f883 	bl	800319a <HAL_SPI_Transmit>
	}
	NRF_CSN_HIGH;
 8001094:	2201      	movs	r2, #1
 8001096:	2108      	movs	r1, #8
 8001098:	4819      	ldr	r0, [pc, #100]	; (8001100 <NRF_SendPacket+0x114>)
 800109a:	f001 fbaf 	bl	80027fc <HAL_GPIO_WritePin>

	NRF_CE_HIGH;
 800109e:	2201      	movs	r2, #1
 80010a0:	2110      	movs	r1, #16
 80010a2:	4817      	ldr	r0, [pc, #92]	; (8001100 <NRF_SendPacket+0x114>)
 80010a4:	f001 fbaa 	bl	80027fc <HAL_GPIO_WritePin>
	DelayMicro(150);
 80010a8:	2096      	movs	r0, #150	; 0x96
 80010aa:	f000 f8e1 	bl	8001270 <DelayMicro>
	//NRF_Delay(10);
	NRF_CE_LOW;
 80010ae:	2200      	movs	r2, #0
 80010b0:	2110      	movs	r1, #16
 80010b2:	4813      	ldr	r0, [pc, #76]	; (8001100 <NRF_SendPacket+0x114>)
 80010b4:	f001 fba2 	bl	80027fc <HAL_GPIO_WritePin>

	uint8_t status = NRF_ReadReg(NRF_REG_STATUS);
 80010b8:	2007      	movs	r0, #7
 80010ba:	f7ff fdd1 	bl	8000c60 <NRF_ReadReg>
 80010be:	4603      	mov	r3, r0
 80010c0:	757b      	strb	r3, [r7, #21]

	if(status & _BV(TX_DS))
 80010c2:	7d7b      	ldrb	r3, [r7, #21]
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <NRF_SendPacket+0xec>
	{
		NRF_WriteReg(NRF_REG_STATUS, 0x20);
 80010cc:	2120      	movs	r1, #32
 80010ce:	2007      	movs	r0, #7
 80010d0:	f7ff fdfa 	bl	8000cc8 <NRF_WriteReg>
		return 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e00e      	b.n	80010f6 <NRF_SendPacket+0x10a>
	}

	if(status & _BV(MAX_RT))
 80010d8:	7d7b      	ldrb	r3, [r7, #21]
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <NRF_SendPacket+0x106>
	{
		NRF_WriteReg(NRF_REG_STATUS, 0x10);
 80010e2:	2110      	movs	r1, #16
 80010e4:	2007      	movs	r0, #7
 80010e6:	f7ff fdef 	bl	8000cc8 <NRF_WriteReg>
		NRF_FlushTX();
 80010ea:	f7ff fe99 	bl	8000e20 <NRF_FlushTX>
		return 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e001      	b.n	80010f6 <NRF_SendPacket+0x10a>
	}

	return -1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40010800 	.word	0x40010800
 8001104:	200000d8 	.word	0x200000d8
 8001108:	20000000 	.word	0x20000000

0800110c <NRF_SendMessage>:

int8_t NRF_SendMessage(uint8_t *receiverAddress, uint8_t *buf)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b08d      	sub	sp, #52	; 0x34
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
	NRF_WriteMBReg(NRF_REG_TX_ADDR, receiverAddress, 5);
 8001116:	2205      	movs	r2, #5
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	2010      	movs	r0, #16
 800111c:	f7ff fe2c 	bl	8000d78 <NRF_WriteMBReg>

	uint16_t dataLength = strlen(buf);
 8001120:	6838      	ldr	r0, [r7, #0]
 8001122:	f7ff f815 	bl	8000150 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint8_t amountPackets = ceil((double)dataLength / 25.0);
 800112a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f959 	bl	80003e4 <__aeabi_ui2d>
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <NRF_SendMessage+0xe0>)
 8001138:	f7ff faf8 	bl	800072c <__aeabi_ddiv>
 800113c:	4603      	mov	r3, r0
 800113e:	460c      	mov	r4, r1
 8001140:	4618      	mov	r0, r3
 8001142:	4621      	mov	r1, r4
 8001144:	f003 fd90 	bl	8004c68 <ceil>
 8001148:	4603      	mov	r3, r0
 800114a:	460c      	mov	r4, r1
 800114c:	4618      	mov	r0, r3
 800114e:	4621      	mov	r1, r4
 8001150:	f7ff fc5c 	bl	8000a0c <__aeabi_d2uiz>
 8001154:	4603      	mov	r3, r0
 8001156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	NRF_TX_Mode();
 800115a:	f7ff feb3 	bl	8000ec4 <NRF_TX_Mode>
	HAL_Delay(10);
 800115e:	200a      	movs	r0, #10
 8001160:	f001 f84c 	bl	80021fc <HAL_Delay>
	for(uint8_t i = 0; i < amountPackets; ++i)
 8001164:	2300      	movs	r3, #0
 8001166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800116a:	e02f      	b.n	80011cc <NRF_SendMessage+0xc0>
	{
		uint8_t currentData[30] = {0};
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	221e      	movs	r2, #30
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f003 fd6c 	bl	8004c52 <memset>
		memcpy(currentData, buf + (25 * i), 25);
 800117a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	009a      	lsls	r2, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	461a      	mov	r2, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	1899      	adds	r1, r3, r2
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	2219      	movs	r2, #25
 8001194:	4618      	mov	r0, r3
 8001196:	f003 fd51 	bl	8004c3c <memcpy>

		int8_t result = NRF_SendPacket(NULL, currentData, W_TX_PAYLOAD);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	22a0      	movs	r2, #160	; 0xa0
 80011a0:	4619      	mov	r1, r3
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff ff22 	bl	8000fec <NRF_SendPacket>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

		if(!result)
 80011ae:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <NRF_SendMessage+0xb0>
			return -1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e013      	b.n	80011e4 <NRF_SendMessage+0xd8>

		//TODO: Уменьшить значение
		HAL_Delay(50);
 80011bc:	2032      	movs	r0, #50	; 0x32
 80011be:	f001 f81d 	bl	80021fc <HAL_Delay>
	for(uint8_t i = 0; i < amountPackets; ++i)
 80011c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011c6:	3301      	adds	r3, #1
 80011c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011cc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80011d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d3c9      	bcc.n	800116c <NRF_SendMessage+0x60>
	}
	HAL_Delay(10);
 80011d8:	200a      	movs	r0, #10
 80011da:	f001 f80f 	bl	80021fc <HAL_Delay>
	NRF_RX_Mode();
 80011de:	f7ff fe41 	bl	8000e64 <NRF_RX_Mode>

	return 1;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3734      	adds	r7, #52	; 0x34
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd90      	pop	{r4, r7, pc}
 80011ec:	40390000 	.word	0x40390000

080011f0 <NRF_IsAvailablePacket>:

bool NRF_IsAvailablePacket(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	return !(NRF_ReadReg(NRF_REG_FIFO_STATUS) & _BV(RX_EMPTY));
 80011f4:	2017      	movs	r0, #23
 80011f6:	f7ff fd33 	bl	8000c60 <NRF_ReadReg>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <NRF_ClearRxBuff>:

void NRF_ClearRxBuff(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
	for(int i = 0; i < NRF_rxBuffSize; ++i)
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	e007      	b.n	800122c <NRF_ClearRxBuff+0x1c>
		NRF_rxBuff[i] = 0;
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <NRF_ClearRxBuff+0x2c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NRF_rxBuffSize; ++i)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b1f      	cmp	r3, #31
 8001230:	ddf4      	ble.n	800121c <NRF_ClearRxBuff+0xc>
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	20000040 	.word	0x20000040

08001240 <NRF_ClearTxBuff>:

void NRF_ClearTxBuff(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
	for(int i = 0; i < NRF_txBuffSize; ++i)
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	e007      	b.n	800125c <NRF_ClearTxBuff+0x1c>
			NRF_txBuff[i] = 0;
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <NRF_ClearTxBuff+0x2c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NRF_txBuffSize; ++i)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3301      	adds	r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b1f      	cmp	r3, #31
 8001260:	ddf4      	ble.n	800124c <NRF_ClearTxBuff+0xc>
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	20000060 	.word	0x20000060

08001270 <DelayMicro>:
*/

}

__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  micros *= (SystemCoreClock / 1000000) / 9;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <DelayMicro+0x34>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <DelayMicro+0x38>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0ddb      	lsrs	r3, r3, #23
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	607b      	str	r3, [r7, #4]

  /* Wait till done */

  while (micros--) ;
 800128c:	bf00      	nop
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1fa      	bne.n	800128e <DelayMicro+0x1e>

}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2000000c 	.word	0x2000000c
 80012a8:	ee9bfab5 	.word	0xee9bfab5

080012ac <SR_Set>:
extern SPI_HandleTypeDef hspi2;

uint16_t shiftRegisterValue = 0x00;

inline void SR_Set(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b6:	4802      	ldr	r0, [pc, #8]	; (80012c0 <SR_Set+0x14>)
 80012b8:	f001 faa0 	bl	80027fc <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40010c00 	.word	0x40010c00

080012c4 <SR_Reset>:

inline void SR_Reset(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ce:	4802      	ldr	r0, [pc, #8]	; (80012d8 <SR_Reset+0x14>)
 80012d0:	f001 fa94 	bl	80027fc <HAL_GPIO_WritePin>
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40010c00 	.word	0x40010c00

080012dc <SR_SetValue>:

void SR_SetValue(uint16_t value)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
	uint8_t txBuff[2] = {0};
 80012e6:	2300      	movs	r3, #0
 80012e8:	81bb      	strh	r3, [r7, #12]
	txBuff[0] = (uint8_t)(value >> 8);
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	733b      	strb	r3, [r7, #12]
	txBuff[1] = (uint8_t)value;
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi2, txBuff, 2, 5000);
 80012fa:	f107 010c 	add.w	r1, r7, #12
 80012fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001302:	2202      	movs	r2, #2
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <SR_SetValue+0x40>)
 8001306:	f001 ff48 	bl	800319a <HAL_SPI_Transmit>
	SR_Reset();
 800130a:	f7ff ffdb 	bl	80012c4 <SR_Reset>
	SR_Set();
 800130e:	f7ff ffcd 	bl	80012ac <SR_Set>
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000080 	.word	0x20000080

08001320 <SR_SetPin>:

void SR_SetPin(uint16_t pin)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
	shiftRegisterValue |= 1 << pin;
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2201      	movs	r2, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	b21a      	sxth	r2, r3
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <SR_SetPin+0x38>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29a      	uxth	r2, r3
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <SR_SetPin+0x38>)
 8001342:	801a      	strh	r2, [r3, #0]
	SR_SetValue(shiftRegisterValue);
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <SR_SetPin+0x38>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ffc7 	bl	80012dc <SR_SetValue>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000034 	.word	0x20000034

0800135c <SR_ResetPin>:

void SR_ResetPin(uint16_t pin)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
	shiftRegisterValue &= ~(1 << pin);
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	2201      	movs	r2, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	b21b      	sxth	r3, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	b21a      	sxth	r2, r3
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <SR_ResetPin+0x3c>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	b21b      	sxth	r3, r3
 800137a:	4013      	ands	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	b29a      	uxth	r2, r3
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SR_ResetPin+0x3c>)
 8001382:	801a      	strh	r2, [r3, #0]
	SR_SetValue(shiftRegisterValue);
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SR_ResetPin+0x3c>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ffa7 	bl	80012dc <SR_SetValue>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000034 	.word	0x20000034

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a2:	f000 fec9 	bl	8002138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a6:	f000 f859 	bl	800145c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013aa:	f7ff fb4f 	bl	8000a4c <MX_GPIO_Init>
  MX_SPI1_Init();
 80013ae:	f000 fa8f 	bl	80018d0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80013b2:	f000 fac3 	bl	800193c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80013b6:	f000 fdd3 	bl	8001f60 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013ba:	f000 fc35 	bl	8001c28 <MX_TIM2_Init>
  MX_TIM4_Init();
 80013be:	f000 fcb3 	bl	8001d28 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &recvByte, (uint16_t)1);
 80013c2:	2201      	movs	r2, #1
 80013c4:	491e      	ldr	r1, [pc, #120]	; (8001440 <main+0xa4>)
 80013c6:	481f      	ldr	r0, [pc, #124]	; (8001444 <main+0xa8>)
 80013c8:	f003 f86e 	bl	80044a8 <HAL_UART_Receive_IT>
  NRF_SetDefaultSettings();
 80013cc:	f7ff fbd8 	bl	8000b80 <NRF_SetDefaultSettings>
  SR_SetValue(0x0000);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff ff83 	bl	80012dc <SR_SetValue>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char *str = "Hello from STM32!!!\n";
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <main+0xac>)
 80013d8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, str, strlen(str), 1000);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7fe feb8 	bl	8000150 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4816      	ldr	r0, [pc, #88]	; (8001444 <main+0xa8>)
 80013ec:	f002 ffc3 	bl	8004376 <HAL_UART_Transmit>

  while (1)
  {
  	if(NRF_IsAvailablePacket())
 80013f0:	f7ff fefe 	bl	80011f0 <NRF_IsAvailablePacket>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00d      	beq.n	8001416 <main+0x7a>
		{
			NRF_GetPacket(NRF_rxBuff);
 80013fa:	4814      	ldr	r0, [pc, #80]	; (800144c <main+0xb0>)
 80013fc:	f7ff fd9e 	bl	8000f3c <NRF_GetPacket>
			InputMessageHandler(NRF_rxBuff);
 8001400:	4812      	ldr	r0, [pc, #72]	; (800144c <main+0xb0>)
 8001402:	f000 f871 	bl	80014e8 <InputMessageHandler>
			uint8_t sendMessage = NRF_SendMessage(mainHubAddr, NRF_rxBuff);
 8001406:	4911      	ldr	r1, [pc, #68]	; (800144c <main+0xb0>)
 8001408:	4811      	ldr	r0, [pc, #68]	; (8001450 <main+0xb4>)
 800140a:	f7ff fe7f 	bl	800110c <NRF_SendMessage>
 800140e:	4603      	mov	r3, r0
 8001410:	70fb      	strb	r3, [r7, #3]
			NRF_ClearRxBuff();
 8001412:	f7ff fefd 	bl	8001210 <NRF_ClearRxBuff>
		}

		if(UART1_MessageReady)
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <main+0xb8>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0e8      	beq.n	80013f0 <main+0x54>
		{
			InputMessageHandler(UART1_RX_buff);
 800141e:	480e      	ldr	r0, [pc, #56]	; (8001458 <main+0xbc>)
 8001420:	f000 f862 	bl	80014e8 <InputMessageHandler>
			HAL_UART_Transmit(&huart1, UART1_RX_buff, strlen(UART1_RX_buff), 1000);
 8001424:	480c      	ldr	r0, [pc, #48]	; (8001458 <main+0xbc>)
 8001426:	f7fe fe93 	bl	8000150 <strlen>
 800142a:	4603      	mov	r3, r0
 800142c:	b29a      	uxth	r2, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	4909      	ldr	r1, [pc, #36]	; (8001458 <main+0xbc>)
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <main+0xa8>)
 8001436:	f002 ff9e 	bl	8004376 <HAL_UART_Transmit>
			UART1_ClearRXBuff();
 800143a:	f000 fe3b 	bl	80020b4 <UART1_ClearRXBuff>
  	if(NRF_IsAvailablePacket())
 800143e:	e7d7      	b.n	80013f0 <main+0x54>
 8001440:	200001b0 	.word	0x200001b0
 8001444:	200001d4 	.word	0x200001d4
 8001448:	08004d90 	.word	0x08004d90
 800144c:	20000040 	.word	0x20000040
 8001450:	20000004 	.word	0x20000004
 8001454:	2000003c 	.word	0x2000003c
 8001458:	200001b4 	.word	0x200001b4

0800145c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b090      	sub	sp, #64	; 0x40
 8001460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	2228      	movs	r2, #40	; 0x28
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f003 fbf1 	bl	8004c52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001486:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148c:	2301      	movs	r3, #1
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001490:	2302      	movs	r3, #2
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800149a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800149e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 0318 	add.w	r3, r7, #24
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 f9fb 	bl	80028a0 <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014b0:	f000 fa00 	bl	80018b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	230f      	movs	r3, #15
 80014b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b8:	2302      	movs	r3, #2
 80014ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2102      	movs	r1, #2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 fc66 	bl	8002da0 <HAL_RCC_ClockConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014da:	f000 f9eb 	bl	80018b4 <Error_Handler>
  }
}
 80014de:	bf00      	nop
 80014e0:	3740      	adds	r7, #64	; 0x40
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <InputMessageHandler>:

/* USER CODE BEGIN 4 */
void InputMessageHandler(char *message)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	uint8_t cursorPosition = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]

	switch(message[cursorPosition])
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	2b3d      	cmp	r3, #61	; 0x3d
 8001500:	f200 81cc 	bhi.w	800189c <InputMessageHandler+0x3b4>
 8001504:	a201      	add	r2, pc, #4	; (adr r2, 800150c <InputMessageHandler+0x24>)
 8001506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150a:	bf00      	nop
 800150c:	08001605 	.word	0x08001605
 8001510:	08001613 	.word	0x08001613
 8001514:	08001621 	.word	0x08001621
 8001518:	08001629 	.word	0x08001629
 800151c:	08001631 	.word	0x08001631
 8001520:	08001639 	.word	0x08001639
 8001524:	08001641 	.word	0x08001641
 8001528:	08001649 	.word	0x08001649
 800152c:	08001651 	.word	0x08001651
 8001530:	08001659 	.word	0x08001659
 8001534:	08001661 	.word	0x08001661
 8001538:	08001669 	.word	0x08001669
 800153c:	08001671 	.word	0x08001671
 8001540:	08001679 	.word	0x08001679
 8001544:	08001681 	.word	0x08001681
 8001548:	08001689 	.word	0x08001689
 800154c:	08001691 	.word	0x08001691
 8001550:	08001699 	.word	0x08001699
 8001554:	080016a1 	.word	0x080016a1
 8001558:	080016a9 	.word	0x080016a9
 800155c:	080016b1 	.word	0x080016b1
 8001560:	080016b9 	.word	0x080016b9
 8001564:	080016c1 	.word	0x080016c1
 8001568:	080016c9 	.word	0x080016c9
 800156c:	080016d1 	.word	0x080016d1
 8001570:	080016d9 	.word	0x080016d9
 8001574:	080016e1 	.word	0x080016e1
 8001578:	080016e9 	.word	0x080016e9
 800157c:	080016f1 	.word	0x080016f1
 8001580:	080016f9 	.word	0x080016f9
 8001584:	08001701 	.word	0x08001701
 8001588:	08001709 	.word	0x08001709
 800158c:	08001711 	.word	0x08001711
 8001590:	08001719 	.word	0x08001719
 8001594:	08001721 	.word	0x08001721
 8001598:	08001751 	.word	0x08001751
 800159c:	08001763 	.word	0x08001763
 80015a0:	08001793 	.word	0x08001793
 80015a4:	080017a5 	.word	0x080017a5
 80015a8:	080017d3 	.word	0x080017d3
 80015ac:	080017e3 	.word	0x080017e3
 80015b0:	0800189d 	.word	0x0800189d
 80015b4:	0800189d 	.word	0x0800189d
 80015b8:	0800189d 	.word	0x0800189d
 80015bc:	0800189d 	.word	0x0800189d
 80015c0:	0800189d 	.word	0x0800189d
 80015c4:	0800189d 	.word	0x0800189d
 80015c8:	0800189d 	.word	0x0800189d
 80015cc:	0800189d 	.word	0x0800189d
 80015d0:	0800189d 	.word	0x0800189d
 80015d4:	0800189d 	.word	0x0800189d
 80015d8:	0800189d 	.word	0x0800189d
 80015dc:	0800189d 	.word	0x0800189d
 80015e0:	0800189d 	.word	0x0800189d
 80015e4:	0800189d 	.word	0x0800189d
 80015e8:	0800189d 	.word	0x0800189d
 80015ec:	0800189d 	.word	0x0800189d
 80015f0:	08001811 	.word	0x08001811
 80015f4:	08001821 	.word	0x08001821
 80015f8:	0800184f 	.word	0x0800184f
 80015fc:	0800185f 	.word	0x0800185f
 8001600:	0800188d 	.word	0x0800188d
	{
		case 0x01: HAL_GPIO_WritePin(BuildInLed_GPIO_Port, BuildInLed_Pin, 0); break;
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160a:	48a6      	ldr	r0, [pc, #664]	; (80018a4 <InputMessageHandler+0x3bc>)
 800160c:	f001 f8f6 	bl	80027fc <HAL_GPIO_WritePin>
 8001610:	e144      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x02: HAL_GPIO_WritePin(BuildInLed_GPIO_Port, BuildInLed_Pin, 1); break;
 8001612:	2201      	movs	r2, #1
 8001614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001618:	48a2      	ldr	r0, [pc, #648]	; (80018a4 <InputMessageHandler+0x3bc>)
 800161a:	f001 f8ef 	bl	80027fc <HAL_GPIO_WritePin>
 800161e:	e13d      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x03: SR_SetPin(0); break;
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fe7d 	bl	8001320 <SR_SetPin>
 8001626:	e139      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x04: SR_ResetPin(0); break;
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff fe97 	bl	800135c <SR_ResetPin>
 800162e:	e135      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x05: SR_SetPin(1); break;
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff fe75 	bl	8001320 <SR_SetPin>
 8001636:	e131      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x06: SR_ResetPin(1); break;
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff fe8f 	bl	800135c <SR_ResetPin>
 800163e:	e12d      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x07: SR_SetPin(2); break;
 8001640:	2002      	movs	r0, #2
 8001642:	f7ff fe6d 	bl	8001320 <SR_SetPin>
 8001646:	e129      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x08: SR_ResetPin(2); break;
 8001648:	2002      	movs	r0, #2
 800164a:	f7ff fe87 	bl	800135c <SR_ResetPin>
 800164e:	e125      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x09: SR_SetPin(3); break;
 8001650:	2003      	movs	r0, #3
 8001652:	f7ff fe65 	bl	8001320 <SR_SetPin>
 8001656:	e121      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x0A: SR_ResetPin(3); break;
 8001658:	2003      	movs	r0, #3
 800165a:	f7ff fe7f 	bl	800135c <SR_ResetPin>
 800165e:	e11d      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x0B: SR_SetPin(4); break;
 8001660:	2004      	movs	r0, #4
 8001662:	f7ff fe5d 	bl	8001320 <SR_SetPin>
 8001666:	e119      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x0C: SR_ResetPin(4); break;
 8001668:	2004      	movs	r0, #4
 800166a:	f7ff fe77 	bl	800135c <SR_ResetPin>
 800166e:	e115      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x0D: SR_SetPin(5); break;
 8001670:	2005      	movs	r0, #5
 8001672:	f7ff fe55 	bl	8001320 <SR_SetPin>
 8001676:	e111      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x0E: SR_ResetPin(5); break;
 8001678:	2005      	movs	r0, #5
 800167a:	f7ff fe6f 	bl	800135c <SR_ResetPin>
 800167e:	e10d      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x0F: SR_SetPin(6); break;
 8001680:	2006      	movs	r0, #6
 8001682:	f7ff fe4d 	bl	8001320 <SR_SetPin>
 8001686:	e109      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x10: SR_ResetPin(6); break;
 8001688:	2006      	movs	r0, #6
 800168a:	f7ff fe67 	bl	800135c <SR_ResetPin>
 800168e:	e105      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x11: SR_SetPin(7); break;
 8001690:	2007      	movs	r0, #7
 8001692:	f7ff fe45 	bl	8001320 <SR_SetPin>
 8001696:	e101      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x12: SR_ResetPin(7); break;
 8001698:	2007      	movs	r0, #7
 800169a:	f7ff fe5f 	bl	800135c <SR_ResetPin>
 800169e:	e0fd      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x13: SR_SetPin(8); break;
 80016a0:	2008      	movs	r0, #8
 80016a2:	f7ff fe3d 	bl	8001320 <SR_SetPin>
 80016a6:	e0f9      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x14: SR_ResetPin(8); break;
 80016a8:	2008      	movs	r0, #8
 80016aa:	f7ff fe57 	bl	800135c <SR_ResetPin>
 80016ae:	e0f5      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x15: SR_SetPin(9); break;
 80016b0:	2009      	movs	r0, #9
 80016b2:	f7ff fe35 	bl	8001320 <SR_SetPin>
 80016b6:	e0f1      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x16: SR_ResetPin(9); break;
 80016b8:	2009      	movs	r0, #9
 80016ba:	f7ff fe4f 	bl	800135c <SR_ResetPin>
 80016be:	e0ed      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x17: SR_SetPin(10); break;
 80016c0:	200a      	movs	r0, #10
 80016c2:	f7ff fe2d 	bl	8001320 <SR_SetPin>
 80016c6:	e0e9      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x18: SR_ResetPin(10); break;
 80016c8:	200a      	movs	r0, #10
 80016ca:	f7ff fe47 	bl	800135c <SR_ResetPin>
 80016ce:	e0e5      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x19: SR_SetPin(11); break;
 80016d0:	200b      	movs	r0, #11
 80016d2:	f7ff fe25 	bl	8001320 <SR_SetPin>
 80016d6:	e0e1      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x1A: SR_ResetPin(11); break;
 80016d8:	200b      	movs	r0, #11
 80016da:	f7ff fe3f 	bl	800135c <SR_ResetPin>
 80016de:	e0dd      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x1B: SR_SetPin(12); break;
 80016e0:	200c      	movs	r0, #12
 80016e2:	f7ff fe1d 	bl	8001320 <SR_SetPin>
 80016e6:	e0d9      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x1C: SR_ResetPin(12); break;
 80016e8:	200c      	movs	r0, #12
 80016ea:	f7ff fe37 	bl	800135c <SR_ResetPin>
 80016ee:	e0d5      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x1D: SR_SetPin(13); break;
 80016f0:	200d      	movs	r0, #13
 80016f2:	f7ff fe15 	bl	8001320 <SR_SetPin>
 80016f6:	e0d1      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x1E: SR_ResetPin(13); break;
 80016f8:	200d      	movs	r0, #13
 80016fa:	f7ff fe2f 	bl	800135c <SR_ResetPin>
 80016fe:	e0cd      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x1F: SR_SetPin(14); break;
 8001700:	200e      	movs	r0, #14
 8001702:	f7ff fe0d 	bl	8001320 <SR_SetPin>
 8001706:	e0c9      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x20: SR_ResetPin(14); break;
 8001708:	200e      	movs	r0, #14
 800170a:	f7ff fe27 	bl	800135c <SR_ResetPin>
 800170e:	e0c5      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x21: SR_SetPin(15); break;
 8001710:	200f      	movs	r0, #15
 8001712:	f7ff fe05 	bl	8001320 <SR_SetPin>
 8001716:	e0c1      	b.n	800189c <InputMessageHandler+0x3b4>
		case 0x22: SR_ResetPin(15); break;
 8001718:	200f      	movs	r0, #15
 800171a:	f7ff fe1f 	bl	800135c <SR_ResetPin>
 800171e:	e0bd      	b.n	800189c <InputMessageHandler+0x3b4>



		/* TIM2_CHANNEL_1 */
		case 0x23:
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001720:	2100      	movs	r1, #0
 8001722:	4861      	ldr	r0, [pc, #388]	; (80018a8 <InputMessageHandler+0x3c0>)
 8001724:	f002 f8f6 	bl	8003914 <HAL_TIM_PWM_Start>
			TIM2->CCR1 = ((uint16_t)message[++cursorPosition] << 8) | message[++cursorPosition];
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	3301      	adds	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	3201      	adds	r2, #1
 800173c:	73fa      	strb	r2, [r7, #15]
 800173e:	7bfa      	ldrb	r2, [r7, #15]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	440a      	add	r2, r1
 8001744:	7812      	ldrb	r2, [r2, #0]
 8001746:	431a      	orrs	r2, r3
 8001748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800174e:	e0a5      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x24:
			TIM2->CCR1 = 0;
 8001750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001754:	2200      	movs	r2, #0
 8001756:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001758:	2100      	movs	r1, #0
 800175a:	4853      	ldr	r0, [pc, #332]	; (80018a8 <InputMessageHandler+0x3c0>)
 800175c:	f002 f90c 	bl	8003978 <HAL_TIM_PWM_Stop>
			break;
 8001760:	e09c      	b.n	800189c <InputMessageHandler+0x3b4>

		/* TIM2_CHANNEL_2 */
		case 0x25:
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001762:	2104      	movs	r1, #4
 8001764:	4850      	ldr	r0, [pc, #320]	; (80018a8 <InputMessageHandler+0x3c0>)
 8001766:	f002 f8d5 	bl	8003914 <HAL_TIM_PWM_Start>
			TIM2->CCR2 = ((uint16_t)message[++cursorPosition] << 8) | message[++cursorPosition];
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	3301      	adds	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	3201      	adds	r2, #1
 800177e:	73fa      	strb	r2, [r7, #15]
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	440a      	add	r2, r1
 8001786:	7812      	ldrb	r2, [r2, #0]
 8001788:	431a      	orrs	r2, r3
 800178a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800178e:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001790:	e084      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x26:
			TIM2->CCR2 = 0;
 8001792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001796:	2200      	movs	r2, #0
 8001798:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800179a:	2104      	movs	r1, #4
 800179c:	4842      	ldr	r0, [pc, #264]	; (80018a8 <InputMessageHandler+0x3c0>)
 800179e:	f002 f8eb 	bl	8003978 <HAL_TIM_PWM_Stop>
			break;
 80017a2:	e07b      	b.n	800189c <InputMessageHandler+0x3b4>


		/* TIM4_CHANNEL_4 */
		case 0x27:
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80017a4:	210c      	movs	r1, #12
 80017a6:	4841      	ldr	r0, [pc, #260]	; (80018ac <InputMessageHandler+0x3c4>)
 80017a8:	f002 f8b4 	bl	8003914 <HAL_TIM_PWM_Start>
			TIM4->CCR4 = ((uint16_t)message[++cursorPosition] << 8) | message[++cursorPosition];
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	3301      	adds	r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	3201      	adds	r2, #1
 80017c0:	73fa      	strb	r2, [r7, #15]
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	440a      	add	r2, r1
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	431a      	orrs	r2, r3
 80017cc:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <InputMessageHandler+0x3c8>)
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80017d0:	e064      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x28:
			TIM4->CCR4 = 0;
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <InputMessageHandler+0x3c8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 80017d8:	210c      	movs	r1, #12
 80017da:	4834      	ldr	r0, [pc, #208]	; (80018ac <InputMessageHandler+0x3c4>)
 80017dc:	f002 f8cc 	bl	8003978 <HAL_TIM_PWM_Stop>
			break;
 80017e0:	e05c      	b.n	800189c <InputMessageHandler+0x3b4>

		/* TIM4_CHANNEL_3 */
		case 0x29:
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80017e2:	2108      	movs	r1, #8
 80017e4:	4831      	ldr	r0, [pc, #196]	; (80018ac <InputMessageHandler+0x3c4>)
 80017e6:	f002 f895 	bl	8003914 <HAL_TIM_PWM_Start>
			TIM4->CCR3 = ((uint16_t)message[++cursorPosition] << 8) | message[++cursorPosition];
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	3301      	adds	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	3201      	adds	r2, #1
 80017fe:	73fa      	strb	r2, [r7, #15]
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	440a      	add	r2, r1
 8001806:	7812      	ldrb	r2, [r2, #0]
 8001808:	431a      	orrs	r2, r3
 800180a:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <InputMessageHandler+0x3c8>)
 800180c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800180e:	e045      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x3A:
			TIM4->CCR3 = 0;
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <InputMessageHandler+0x3c8>)
 8001812:	2200      	movs	r2, #0
 8001814:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8001816:	2108      	movs	r1, #8
 8001818:	4824      	ldr	r0, [pc, #144]	; (80018ac <InputMessageHandler+0x3c4>)
 800181a:	f002 f8ad 	bl	8003978 <HAL_TIM_PWM_Stop>
			break;
 800181e:	e03d      	b.n	800189c <InputMessageHandler+0x3b4>

		/* TIM4_CHANNEL_2 */
		case 0x3B:
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001820:	2104      	movs	r1, #4
 8001822:	4822      	ldr	r0, [pc, #136]	; (80018ac <InputMessageHandler+0x3c4>)
 8001824:	f002 f876 	bl	8003914 <HAL_TIM_PWM_Start>
			TIM4->CCR2 = ((uint16_t)message[++cursorPosition] << 8) | message[++cursorPosition];
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	3301      	adds	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	3201      	adds	r2, #1
 800183c:	73fa      	strb	r2, [r7, #15]
 800183e:	7bfa      	ldrb	r2, [r7, #15]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	440a      	add	r2, r1
 8001844:	7812      	ldrb	r2, [r2, #0]
 8001846:	431a      	orrs	r2, r3
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <InputMessageHandler+0x3c8>)
 800184a:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800184c:	e026      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x3C:
			TIM4->CCR2 = 0;
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <InputMessageHandler+0x3c8>)
 8001850:	2200      	movs	r2, #0
 8001852:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001854:	2104      	movs	r1, #4
 8001856:	4815      	ldr	r0, [pc, #84]	; (80018ac <InputMessageHandler+0x3c4>)
 8001858:	f002 f88e 	bl	8003978 <HAL_TIM_PWM_Stop>
			break;
 800185c:	e01e      	b.n	800189c <InputMessageHandler+0x3b4>

		/* TIM4_CHANNEL_1 */
		case 0x3D:
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800185e:	2100      	movs	r1, #0
 8001860:	4812      	ldr	r0, [pc, #72]	; (80018ac <InputMessageHandler+0x3c4>)
 8001862:	f002 f857 	bl	8003914 <HAL_TIM_PWM_Start>
			TIM4->CCR1 = ((uint16_t)message[++cursorPosition] << 8) | message[++cursorPosition];
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	3301      	adds	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	3201      	adds	r2, #1
 800187a:	73fa      	strb	r2, [r7, #15]
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	440a      	add	r2, r1
 8001882:	7812      	ldrb	r2, [r2, #0]
 8001884:	431a      	orrs	r2, r3
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <InputMessageHandler+0x3c8>)
 8001888:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800188a:	e007      	b.n	800189c <InputMessageHandler+0x3b4>

		case 0x3E:
			TIM4->CCR1 = 0;
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <InputMessageHandler+0x3c8>)
 800188e:	2200      	movs	r2, #0
 8001890:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8001892:	2108      	movs	r1, #8
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <InputMessageHandler+0x3c4>)
 8001896:	f002 f86f 	bl	8003978 <HAL_TIM_PWM_Stop>
			break;
 800189a:	bf00      	nop


		//TODO: Input

	}
}
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40011000 	.word	0x40011000
 80018a8:	20000170 	.word	0x20000170
 80018ac:	20000130 	.word	0x20000130
 80018b0:	40000800 	.word	0x40000800

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(true)
	{
		HAL_GPIO_TogglePin(BuildInLed_GPIO_Port, BuildInLed_Pin);
 80018b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018bc:	4803      	ldr	r0, [pc, #12]	; (80018cc <Error_Handler+0x18>)
 80018be:	f000 ffb5 	bl	800282c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80018c2:	2064      	movs	r0, #100	; 0x64
 80018c4:	f000 fc9a 	bl	80021fc <HAL_Delay>
		HAL_GPIO_TogglePin(BuildInLed_GPIO_Port, BuildInLed_Pin);
 80018c8:	e7f6      	b.n	80018b8 <Error_Handler+0x4>
 80018ca:	bf00      	nop
 80018cc:	40011000 	.word	0x40011000

080018d0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <MX_SPI1_Init+0x64>)
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <MX_SPI1_Init+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <MX_SPI1_Init+0x64>)
 80018dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_SPI1_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_SPI1_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_SPI1_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_SPI1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_SPI1_Init+0x64>)
 80018fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001900:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_SPI1_Init+0x64>)
 8001904:	2220      	movs	r2, #32
 8001906:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <MX_SPI1_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_SPI1_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <MX_SPI1_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_SPI1_Init+0x64>)
 800191c:	220a      	movs	r2, #10
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <MX_SPI1_Init+0x64>)
 8001922:	f001 fbd9 	bl	80030d8 <HAL_SPI_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800192c:	f7ff ffc2 	bl	80018b4 <Error_Handler>
  }

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200000d8 	.word	0x200000d8
 8001938:	40013000 	.word	0x40013000

0800193c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <MX_SPI2_Init+0x64>)
 8001942:	4a18      	ldr	r2, [pc, #96]	; (80019a4 <MX_SPI2_Init+0x68>)
 8001944:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001946:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <MX_SPI2_Init+0x64>)
 8001948:	f44f 7282 	mov.w	r2, #260	; 0x104
 800194c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <MX_SPI2_Init+0x64>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_SPI2_Init+0x64>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_SPI2_Init+0x64>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_SPI2_Init+0x64>)
 8001962:	2200      	movs	r2, #0
 8001964:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_SPI2_Init+0x64>)
 8001968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_SPI2_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <MX_SPI2_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_SPI2_Init+0x64>)
 800197c:	2200      	movs	r2, #0
 800197e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <MX_SPI2_Init+0x64>)
 8001982:	2200      	movs	r2, #0
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_SPI2_Init+0x64>)
 8001988:	220a      	movs	r2, #10
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <MX_SPI2_Init+0x64>)
 800198e:	f001 fba3 	bl	80030d8 <HAL_SPI_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001998:	f7ff ff8c 	bl	80018b4 <Error_Handler>
  }

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000080 	.word	0x20000080
 80019a4:	40003800 	.word	0x40003800

080019a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a37      	ldr	r2, [pc, #220]	; (8001aa0 <HAL_SPI_MspInit+0xf8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d130      	bne.n	8001a2a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019c8:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a35      	ldr	r2, [pc, #212]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 80019ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a2f      	ldr	r2, [pc, #188]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019f8:	23a0      	movs	r3, #160	; 0xa0
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 0318 	add.w	r3, r7, #24
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4827      	ldr	r0, [pc, #156]	; (8001aa8 <HAL_SPI_MspInit+0x100>)
 8001a0c:	f000 fd9c 	bl	8002548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a10:	2340      	movs	r3, #64	; 0x40
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0318 	add.w	r3, r7, #24
 8001a20:	4619      	mov	r1, r3
 8001a22:	4821      	ldr	r0, [pc, #132]	; (8001aa8 <HAL_SPI_MspInit+0x100>)
 8001a24:	f000 fd90 	bl	8002548 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a28:	e036      	b.n	8001a98 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1f      	ldr	r2, [pc, #124]	; (8001aac <HAL_SPI_MspInit+0x104>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d131      	bne.n	8001a98 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3e:	61d3      	str	r3, [r2, #28]
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a52:	f043 0308 	orr.w	r3, r3, #8
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001a64:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 0318 	add.w	r3, r7, #24
 8001a76:	4619      	mov	r1, r3
 8001a78:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <HAL_SPI_MspInit+0x108>)
 8001a7a:	f000 fd65 	bl	8002548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f107 0318 	add.w	r3, r7, #24
 8001a90:	4619      	mov	r1, r3
 8001a92:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <HAL_SPI_MspInit+0x108>)
 8001a94:	f000 fd58 	bl	8002548 <HAL_GPIO_Init>
}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	; 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40013000 	.word	0x40013000
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010800 	.word	0x40010800
 8001aac:	40003800 	.word	0x40003800
 8001ab0:	40010c00 	.word	0x40010c00

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_MspInit+0x6c>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <HAL_MspInit+0x6c>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6193      	str	r3, [r2, #24]
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_MspInit+0x6c>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_MspInit+0x6c>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <HAL_MspInit+0x6c>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	61d3      	str	r3, [r2, #28]
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_MspInit+0x6c>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	2005      	movs	r0, #5
 8001af0:	f000 fc7d 	bl	80023ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001af4:	2005      	movs	r0, #5
 8001af6:	f000 fc96 	bl	8002426 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_MspInit+0x70>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_MspInit+0x70>)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000

08001b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  	HAL_GPIO_TogglePin(BuildInLed_GPIO_Port, BuildInLed_Pin);
 8001b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <HardFault_Handler+0x18>)
 8001b3e:	f000 fe75 	bl	800282c <HAL_GPIO_TogglePin>
  	HAL_Delay(100);
 8001b42:	2064      	movs	r0, #100	; 0x64
 8001b44:	f000 fb5a 	bl	80021fc <HAL_Delay>
  	HAL_GPIO_TogglePin(BuildInLed_GPIO_Port, BuildInLed_Pin);
 8001b48:	e7f6      	b.n	8001b38 <HardFault_Handler+0x4>
 8001b4a:	bf00      	nop
 8001b4c:	40011000 	.word	0x40011000

08001b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <MemManage_Handler+0x4>

08001b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <BusFault_Handler+0x4>

08001b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <UsageFault_Handler+0x4>

08001b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8a:	f000 fb1b 	bl	80021c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001ba2:	2004      	movs	r0, #4
 8001ba4:	f000 fe5a 	bl	800285c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <USART1_IRQHandler+0x10>)
 8001bb2:	f002 fccd 	bl	8004550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200001d4 	.word	0x200001d4

08001bc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <SystemInit+0x5c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <SystemInit+0x5c>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <SystemInit+0x5c>)
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4911      	ldr	r1, [pc, #68]	; (8001c1c <SystemInit+0x5c>)
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <SystemInit+0x60>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <SystemInit+0x5c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <SystemInit+0x5c>)
 8001be2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <SystemInit+0x5c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <SystemInit+0x5c>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <SystemInit+0x5c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <SystemInit+0x5c>)
 8001bfe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c02:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <SystemInit+0x5c>)
 8001c06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c0a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SystemInit+0x64>)
 8001c0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c12:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	f8ff0000 	.word	0xf8ff0000
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08e      	sub	sp, #56	; 0x38
 8001c2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3c:	f107 0320 	add.w	r3, r7, #32
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
 8001c54:	615a      	str	r2, [r3, #20]
 8001c56:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001c58:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <MX_TIM2_Init+0xfc>)
 8001c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c60:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <MX_TIM2_Init+0xfc>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <MX_TIM2_Init+0xfc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <MX_TIM2_Init+0xfc>)
 8001c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <MX_TIM2_Init+0xfc>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <MX_TIM2_Init+0xfc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c80:	4828      	ldr	r0, [pc, #160]	; (8001d24 <MX_TIM2_Init+0xfc>)
 8001c82:	f001 fde8 	bl	8003856 <HAL_TIM_Base_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c8c:	f7ff fe12 	bl	80018b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4821      	ldr	r0, [pc, #132]	; (8001d24 <MX_TIM2_Init+0xfc>)
 8001c9e:	f001 ff7d 	bl	8003b9c <HAL_TIM_ConfigClockSource>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ca8:	f7ff fe04 	bl	80018b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cac:	481d      	ldr	r0, [pc, #116]	; (8001d24 <MX_TIM2_Init+0xfc>)
 8001cae:	f001 fdfd 	bl	80038ac <HAL_TIM_PWM_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001cb8:	f7ff fdfc 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4816      	ldr	r0, [pc, #88]	; (8001d24 <MX_TIM2_Init+0xfc>)
 8001ccc:	f002 fac2 	bl	8004254 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cd6:	f7ff fded 	bl	80018b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cda:	2360      	movs	r3, #96	; 0x60
 8001cdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	4619      	mov	r1, r3
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <MX_TIM2_Init+0xfc>)
 8001cf2:	f001 fe8d 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001cfc:	f7ff fdda 	bl	80018b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2204      	movs	r2, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4807      	ldr	r0, [pc, #28]	; (8001d24 <MX_TIM2_Init+0xfc>)
 8001d08:	f001 fe82 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001d12:	f7ff fdcf 	bl	80018b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001d16:	4803      	ldr	r0, [pc, #12]	; (8001d24 <MX_TIM2_Init+0xfc>)
 8001d18:	f000 f8ce 	bl	8001eb8 <HAL_TIM_MspPostInit>

}
 8001d1c:	bf00      	nop
 8001d1e:	3738      	adds	r7, #56	; 0x38
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000170 	.word	0x20000170

08001d28 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08e      	sub	sp, #56	; 0x38
 8001d2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	f107 0320 	add.w	r3, r7, #32
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	615a      	str	r2, [r3, #20]
 8001d56:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001d58:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001d5a:	4a3e      	ldr	r2, [pc, #248]	; (8001e54 <MX_TIM4_Init+0x12c>)
 8001d5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d5e:	4b3c      	ldr	r3, [pc, #240]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d6a:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d7e:	4834      	ldr	r0, [pc, #208]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001d80:	f001 fd69 	bl	8003856 <HAL_TIM_Base_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d8a:	f7ff fd93 	bl	80018b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	482d      	ldr	r0, [pc, #180]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001d9c:	f001 fefe 	bl	8003b9c <HAL_TIM_ConfigClockSource>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001da6:	f7ff fd85 	bl	80018b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001daa:	4829      	ldr	r0, [pc, #164]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001dac:	f001 fd7e 	bl	80038ac <HAL_TIM_PWM_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001db6:	f7ff fd7d 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dc2:	f107 0320 	add.w	r3, r7, #32
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4821      	ldr	r0, [pc, #132]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001dca:	f002 fa43 	bl	8004254 <HAL_TIMEx_MasterConfigSynchronization>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001dd4:	f7ff fd6e 	bl	80018b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd8:	2360      	movs	r3, #96	; 0x60
 8001dda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	2200      	movs	r2, #0
 8001dec:	4619      	mov	r1, r3
 8001dee:	4818      	ldr	r0, [pc, #96]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001df0:	f001 fe0e 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001dfa:	f7ff fd5b 	bl	80018b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2204      	movs	r2, #4
 8001e02:	4619      	mov	r1, r3
 8001e04:	4812      	ldr	r0, [pc, #72]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001e06:	f001 fe03 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001e10:	f7ff fd50 	bl	80018b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	2208      	movs	r2, #8
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001e1c:	f001 fdf8 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001e26:	f7ff fd45 	bl	80018b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	220c      	movs	r2, #12
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4807      	ldr	r0, [pc, #28]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001e32:	f001 fded 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001e3c:	f7ff fd3a 	bl	80018b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001e40:	4803      	ldr	r0, [pc, #12]	; (8001e50 <MX_TIM4_Init+0x128>)
 8001e42:	f000 f839 	bl	8001eb8 <HAL_TIM_MspPostInit>

}
 8001e46:	bf00      	nop
 8001e48:	3738      	adds	r7, #56	; 0x38
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000130 	.word	0x20000130
 8001e54:	40000800 	.word	0x40000800

08001e58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e68:	d10c      	bne.n	8001e84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_TIM_Base_MspInit+0x58>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a10      	ldr	r2, [pc, #64]	; (8001eb0 <HAL_TIM_Base_MspInit+0x58>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	61d3      	str	r3, [r2, #28]
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_TIM_Base_MspInit+0x58>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e82:	e010      	b.n	8001ea6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_TIM_Base_MspInit+0x5c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_TIM_Base_MspInit+0x58>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_TIM_Base_MspInit+0x58>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	61d3      	str	r3, [r2, #28]
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_TIM_Base_MspInit+0x58>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40000800 	.word	0x40000800

08001eb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed6:	d118      	bne.n	8001f0a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_TIM_MspPostInit+0x98>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_TIM_MspPostInit+0x98>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_TIM_MspPostInit+0x98>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	4619      	mov	r1, r3
 8001f02:	4814      	ldr	r0, [pc, #80]	; (8001f54 <HAL_TIM_MspPostInit+0x9c>)
 8001f04:	f000 fb20 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f08:	e01d      	b.n	8001f46 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <HAL_TIM_MspPostInit+0xa0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d118      	bne.n	8001f46 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_TIM_MspPostInit+0x98>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <HAL_TIM_MspPostInit+0x98>)
 8001f1a:	f043 0308 	orr.w	r3, r3, #8
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_TIM_MspPostInit+0x98>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001f2c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001f30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	f107 0310 	add.w	r3, r7, #16
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4806      	ldr	r0, [pc, #24]	; (8001f5c <HAL_TIM_MspPostInit+0xa4>)
 8001f42:	f000 fb01 	bl	8002548 <HAL_GPIO_Init>
}
 8001f46:	bf00      	nop
 8001f48:	3720      	adds	r7, #32
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010800 	.word	0x40010800
 8001f58:	40000800 	.word	0x40000800
 8001f5c:	40010c00 	.word	0x40010c00

08001f60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <MX_USART1_UART_Init+0x50>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f86:	220c      	movs	r2, #12
 8001f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f98:	f002 f9a0 	bl	80042dc <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fa2:	f7ff fc87 	bl	80018b4 <Error_Handler>
  }

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200001d4 	.word	0x200001d4
 8001fb0:	40013800 	.word	0x40013800

08001fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a20      	ldr	r2, [pc, #128]	; (8002050 <HAL_UART_MspInit+0x9c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d139      	bne.n	8002048 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <HAL_UART_MspInit+0xa0>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <HAL_UART_MspInit+0xa0>)
 8001fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <HAL_UART_MspInit+0xa0>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_UART_MspInit+0xa0>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_UART_MspInit+0xa0>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_UART_MspInit+0xa0>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 0310 	add.w	r3, r7, #16
 8002016:	4619      	mov	r1, r3
 8002018:	480f      	ldr	r0, [pc, #60]	; (8002058 <HAL_UART_MspInit+0xa4>)
 800201a:	f000 fa95 	bl	8002548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800201e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	4619      	mov	r1, r3
 8002032:	4809      	ldr	r0, [pc, #36]	; (8002058 <HAL_UART_MspInit+0xa4>)
 8002034:	f000 fa88 	bl	8002548 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	2100      	movs	r1, #0
 800203c:	2025      	movs	r0, #37	; 0x25
 800203e:	f000 f9d6 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002042:	2025      	movs	r0, #37	; 0x25
 8002044:	f000 f9ef 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002048:	bf00      	nop
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40013800 	.word	0x40013800
 8002054:	40021000 	.word	0x40021000
 8002058:	40010800 	.word	0x40010800

0800205c <HAL_UART_RxCpltCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
		UART1_RX_buff[UART1_RX_buff_index++] = recvByte;
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_UART_RxCpltCallback+0x44>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	490d      	ldr	r1, [pc, #52]	; (80020a0 <HAL_UART_RxCpltCallback+0x44>)
 800206c:	600a      	str	r2, [r1, #0]
 800206e:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_UART_RxCpltCallback+0x48>)
 8002070:	7812      	ldrb	r2, [r2, #0]
 8002072:	b2d1      	uxtb	r1, r2
 8002074:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <HAL_UART_RxCpltCallback+0x4c>)
 8002076:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive_IT(&huart1, &recvByte, (uint16_t)1);
 8002078:	2201      	movs	r2, #1
 800207a:	490a      	ldr	r1, [pc, #40]	; (80020a4 <HAL_UART_RxCpltCallback+0x48>)
 800207c:	480b      	ldr	r0, [pc, #44]	; (80020ac <HAL_UART_RxCpltCallback+0x50>)
 800207e:	f002 fa13 	bl	80044a8 <HAL_UART_Receive_IT>

		if(recvByte == '\n')
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_UART_RxCpltCallback+0x48>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b0a      	cmp	r3, #10
 800208a:	d105      	bne.n	8002098 <HAL_UART_RxCpltCallback+0x3c>
		{
			UART1_MessageReady = true;
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_UART_RxCpltCallback+0x54>)
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
			UART1_RX_buff_index = 0;
 8002092:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <HAL_UART_RxCpltCallback+0x44>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
		}
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000038 	.word	0x20000038
 80020a4:	200001b0 	.word	0x200001b0
 80020a8:	200001b4 	.word	0x200001b4
 80020ac:	200001d4 	.word	0x200001d4
 80020b0:	2000003c 	.word	0x2000003c

080020b4 <UART1_ClearRXBuff>:

void UART1_ClearRXBuff(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 32; ++i)
 80020ba:	2300      	movs	r3, #0
 80020bc:	71fb      	strb	r3, [r7, #7]
 80020be:	e006      	b.n	80020ce <UART1_ClearRXBuff+0x1a>
		UART1_RX_buff[i] = 0;
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <UART1_ClearRXBuff+0x30>)
 80020c4:	2100      	movs	r1, #0
 80020c6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 32; ++i)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	3301      	adds	r3, #1
 80020cc:	71fb      	strb	r3, [r7, #7]
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	2b1f      	cmp	r3, #31
 80020d2:	d9f5      	bls.n	80020c0 <UART1_ClearRXBuff+0xc>

	UART1_MessageReady = false;
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <UART1_ClearRXBuff+0x34>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	200001b4 	.word	0x200001b4
 80020e8:	2000003c 	.word	0x2000003c

080020ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80020ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80020ee:	e003      	b.n	80020f8 <LoopCopyDataInit>

080020f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80020f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80020f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80020f6:	3104      	adds	r1, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80020f8:	480a      	ldr	r0, [pc, #40]	; (8002124 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80020fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80020fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002100:	d3f6      	bcc.n	80020f0 <CopyDataInit>
  ldr r2, =_sbss
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002104:	e002      	b.n	800210c <LoopFillZerobss>

08002106 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002108:	f842 3b04 	str.w	r3, [r2], #4

0800210c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800210e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002110:	d3f9      	bcc.n	8002106 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002112:	f7ff fd55 	bl	8001bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002116:	f002 fd6d 	bl	8004bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800211a:	f7ff f93f 	bl	800139c <main>
  bx lr
 800211e:	4770      	bx	lr
  ldr r3, =_sidata
 8002120:	08004ddc 	.word	0x08004ddc
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002128:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 800212c:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8002130:	20000218 	.word	0x20000218

08002134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002134:	e7fe      	b.n	8002134 <ADC1_2_IRQHandler>
	...

08002138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_Init+0x28>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a07      	ldr	r2, [pc, #28]	; (8002160 <HAL_Init+0x28>)
 8002142:	f043 0310 	orr.w	r3, r3, #16
 8002146:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002148:	2003      	movs	r0, #3
 800214a:	f000 f945 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800214e:	2000      	movs	r0, #0
 8002150:	f000 f808 	bl	8002164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002154:	f7ff fcae 	bl	8001ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40022000 	.word	0x40022000

08002164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_InitTick+0x54>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_InitTick+0x58>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4619      	mov	r1, r3
 8002176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217a:	fbb3 f3f1 	udiv	r3, r3, r1
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f95d 	bl	8002442 <HAL_SYSTICK_Config>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e00e      	b.n	80021b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b0f      	cmp	r3, #15
 8002196:	d80a      	bhi.n	80021ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002198:	2200      	movs	r2, #0
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f000 f925 	bl	80023ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <HAL_InitTick+0x5c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	2000000c 	.word	0x2000000c
 80021bc:	20000014 	.word	0x20000014
 80021c0:	20000010 	.word	0x20000010

080021c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_IncTick+0x1c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_IncTick+0x20>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	4a03      	ldr	r2, [pc, #12]	; (80021e4 <HAL_IncTick+0x20>)
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000014 	.word	0x20000014
 80021e4:	20000214 	.word	0x20000214

080021e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return uwTick;
 80021ec:	4b02      	ldr	r3, [pc, #8]	; (80021f8 <HAL_GetTick+0x10>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	20000214 	.word	0x20000214

080021fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff fff0 	bl	80021e8 <HAL_GetTick>
 8002208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d005      	beq.n	8002222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_Delay+0x40>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002222:	bf00      	nop
 8002224:	f7ff ffe0 	bl	80021e8 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d8f7      	bhi.n	8002224 <HAL_Delay+0x28>
  {
  }
}
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000014 	.word	0x20000014

08002240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800226c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002272:	4a04      	ldr	r2, [pc, #16]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	60d3      	str	r3, [r2, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <__NVIC_GetPriorityGrouping+0x18>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0307 	and.w	r3, r3, #7
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4906      	ldr	r1, [pc, #24]	; (80022d8 <__NVIC_EnableIRQ+0x34>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2001      	movs	r0, #1
 80022c6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a4:	d301      	bcc.n	80023aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00f      	b.n	80023ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <SysTick_Config+0x40>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b2:	210f      	movs	r1, #15
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f7ff ff90 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SysTick_Config+0x40>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <SysTick_Config+0x40>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000e010 	.word	0xe000e010

080023d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff2d 	bl	8002240 <__NVIC_SetPriorityGrouping>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002400:	f7ff ff42 	bl	8002288 <__NVIC_GetPriorityGrouping>
 8002404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7ff ff90 	bl	8002330 <NVIC_EncodePriority>
 8002410:	4602      	mov	r2, r0
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff5f 	bl	80022dc <__NVIC_SetPriority>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff35 	bl	80022a4 <__NVIC_EnableIRQ>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffa2 	bl	8002394 <SysTick_Config>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800246e:	2b02      	cmp	r3, #2
 8002470:	d005      	beq.n	800247e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2204      	movs	r2, #4
 8002476:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e051      	b.n	8002522 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 020e 	bic.w	r2, r2, #14
 800248c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a22      	ldr	r2, [pc, #136]	; (800252c <HAL_DMA_Abort_IT+0xd0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d029      	beq.n	80024fc <HAL_DMA_Abort_IT+0xa0>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a20      	ldr	r2, [pc, #128]	; (8002530 <HAL_DMA_Abort_IT+0xd4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d022      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x9c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1f      	ldr	r2, [pc, #124]	; (8002534 <HAL_DMA_Abort_IT+0xd8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d01a      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x96>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <HAL_DMA_Abort_IT+0xdc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d012      	beq.n	80024ec <HAL_DMA_Abort_IT+0x90>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_DMA_Abort_IT+0xe0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00a      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x8a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1a      	ldr	r2, [pc, #104]	; (8002540 <HAL_DMA_Abort_IT+0xe4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d102      	bne.n	80024e0 <HAL_DMA_Abort_IT+0x84>
 80024da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024de:	e00e      	b.n	80024fe <HAL_DMA_Abort_IT+0xa2>
 80024e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024e4:	e00b      	b.n	80024fe <HAL_DMA_Abort_IT+0xa2>
 80024e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ea:	e008      	b.n	80024fe <HAL_DMA_Abort_IT+0xa2>
 80024ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f0:	e005      	b.n	80024fe <HAL_DMA_Abort_IT+0xa2>
 80024f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f6:	e002      	b.n	80024fe <HAL_DMA_Abort_IT+0xa2>
 80024f8:	2310      	movs	r3, #16
 80024fa:	e000      	b.n	80024fe <HAL_DMA_Abort_IT+0xa2>
 80024fc:	2301      	movs	r3, #1
 80024fe:	4a11      	ldr	r2, [pc, #68]	; (8002544 <HAL_DMA_Abort_IT+0xe8>)
 8002500:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	4798      	blx	r3
    } 
  }
  return status;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40020008 	.word	0x40020008
 8002530:	4002001c 	.word	0x4002001c
 8002534:	40020030 	.word	0x40020030
 8002538:	40020044 	.word	0x40020044
 800253c:	40020058 	.word	0x40020058
 8002540:	4002006c 	.word	0x4002006c
 8002544:	40020000 	.word	0x40020000

08002548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b08b      	sub	sp, #44	; 0x2c
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255a:	e127      	b.n	80027ac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800255c:	2201      	movs	r2, #1
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 8116 	bne.w	80027a6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b12      	cmp	r3, #18
 8002580:	d034      	beq.n	80025ec <HAL_GPIO_Init+0xa4>
 8002582:	2b12      	cmp	r3, #18
 8002584:	d80d      	bhi.n	80025a2 <HAL_GPIO_Init+0x5a>
 8002586:	2b02      	cmp	r3, #2
 8002588:	d02b      	beq.n	80025e2 <HAL_GPIO_Init+0x9a>
 800258a:	2b02      	cmp	r3, #2
 800258c:	d804      	bhi.n	8002598 <HAL_GPIO_Init+0x50>
 800258e:	2b00      	cmp	r3, #0
 8002590:	d031      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
 8002592:	2b01      	cmp	r3, #1
 8002594:	d01c      	beq.n	80025d0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002596:	e048      	b.n	800262a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002598:	2b03      	cmp	r3, #3
 800259a:	d043      	beq.n	8002624 <HAL_GPIO_Init+0xdc>
 800259c:	2b11      	cmp	r3, #17
 800259e:	d01b      	beq.n	80025d8 <HAL_GPIO_Init+0x90>
          break;
 80025a0:	e043      	b.n	800262a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025a2:	4a89      	ldr	r2, [pc, #548]	; (80027c8 <HAL_GPIO_Init+0x280>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d026      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
 80025a8:	4a87      	ldr	r2, [pc, #540]	; (80027c8 <HAL_GPIO_Init+0x280>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d806      	bhi.n	80025bc <HAL_GPIO_Init+0x74>
 80025ae:	4a87      	ldr	r2, [pc, #540]	; (80027cc <HAL_GPIO_Init+0x284>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d020      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
 80025b4:	4a86      	ldr	r2, [pc, #536]	; (80027d0 <HAL_GPIO_Init+0x288>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01d      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
          break;
 80025ba:	e036      	b.n	800262a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025bc:	4a85      	ldr	r2, [pc, #532]	; (80027d4 <HAL_GPIO_Init+0x28c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d019      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
 80025c2:	4a85      	ldr	r2, [pc, #532]	; (80027d8 <HAL_GPIO_Init+0x290>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d016      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
 80025c8:	4a84      	ldr	r2, [pc, #528]	; (80027dc <HAL_GPIO_Init+0x294>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
          break;
 80025ce:	e02c      	b.n	800262a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	623b      	str	r3, [r7, #32]
          break;
 80025d6:	e028      	b.n	800262a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	3304      	adds	r3, #4
 80025de:	623b      	str	r3, [r7, #32]
          break;
 80025e0:	e023      	b.n	800262a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	3308      	adds	r3, #8
 80025e8:	623b      	str	r3, [r7, #32]
          break;
 80025ea:	e01e      	b.n	800262a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	330c      	adds	r3, #12
 80025f2:	623b      	str	r3, [r7, #32]
          break;
 80025f4:	e019      	b.n	800262a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025fe:	2304      	movs	r3, #4
 8002600:	623b      	str	r3, [r7, #32]
          break;
 8002602:	e012      	b.n	800262a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d105      	bne.n	8002618 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800260c:	2308      	movs	r3, #8
 800260e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	611a      	str	r2, [r3, #16]
          break;
 8002616:	e008      	b.n	800262a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002618:	2308      	movs	r3, #8
 800261a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	615a      	str	r2, [r3, #20]
          break;
 8002622:	e002      	b.n	800262a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002624:	2300      	movs	r3, #0
 8002626:	623b      	str	r3, [r7, #32]
          break;
 8002628:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2bff      	cmp	r3, #255	; 0xff
 800262e:	d801      	bhi.n	8002634 <HAL_GPIO_Init+0xec>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	e001      	b.n	8002638 <HAL_GPIO_Init+0xf0>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2bff      	cmp	r3, #255	; 0xff
 800263e:	d802      	bhi.n	8002646 <HAL_GPIO_Init+0xfe>
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x104>
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	3b08      	subs	r3, #8
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	210f      	movs	r1, #15
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	401a      	ands	r2, r3
 800265e:	6a39      	ldr	r1, [r7, #32]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	431a      	orrs	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8096 	beq.w	80027a6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800267a:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_GPIO_Init+0x298>)
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_GPIO_Init+0x298>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6193      	str	r3, [r2, #24]
 8002686:	4b56      	ldr	r3, [pc, #344]	; (80027e0 <HAL_GPIO_Init+0x298>)
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002692:	4a54      	ldr	r2, [pc, #336]	; (80027e4 <HAL_GPIO_Init+0x29c>)
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3302      	adds	r3, #2
 800269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4013      	ands	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4b      	ldr	r2, [pc, #300]	; (80027e8 <HAL_GPIO_Init+0x2a0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_GPIO_Init+0x19e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4a      	ldr	r2, [pc, #296]	; (80027ec <HAL_GPIO_Init+0x2a4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00d      	beq.n	80026e2 <HAL_GPIO_Init+0x19a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a49      	ldr	r2, [pc, #292]	; (80027f0 <HAL_GPIO_Init+0x2a8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d007      	beq.n	80026de <HAL_GPIO_Init+0x196>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a48      	ldr	r2, [pc, #288]	; (80027f4 <HAL_GPIO_Init+0x2ac>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_GPIO_Init+0x192>
 80026d6:	2303      	movs	r3, #3
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x1a0>
 80026da:	2304      	movs	r3, #4
 80026dc:	e004      	b.n	80026e8 <HAL_GPIO_Init+0x1a0>
 80026de:	2302      	movs	r3, #2
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_Init+0x1a0>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_GPIO_Init+0x1a0>
 80026e6:	2300      	movs	r3, #0
 80026e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ea:	f002 0203 	and.w	r2, r2, #3
 80026ee:	0092      	lsls	r2, r2, #2
 80026f0:	4093      	lsls	r3, r2
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026f8:	493a      	ldr	r1, [pc, #232]	; (80027e4 <HAL_GPIO_Init+0x29c>)
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	3302      	adds	r3, #2
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002712:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4938      	ldr	r1, [pc, #224]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
 800271e:	e006      	b.n	800272e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002720:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	43db      	mvns	r3, r3
 8002728:	4933      	ldr	r1, [pc, #204]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 800272a:	4013      	ands	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800273a:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	492e      	ldr	r1, [pc, #184]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
 8002746:	e006      	b.n	8002756 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	43db      	mvns	r3, r3
 8002750:	4929      	ldr	r1, [pc, #164]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002752:	4013      	ands	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002762:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	4924      	ldr	r1, [pc, #144]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
 800276e:	e006      	b.n	800277e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002770:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	43db      	mvns	r3, r3
 8002778:	491f      	ldr	r1, [pc, #124]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 800277a:	4013      	ands	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d006      	beq.n	8002798 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	491a      	ldr	r1, [pc, #104]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	60cb      	str	r3, [r1, #12]
 8002796:	e006      	b.n	80027a6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002798:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	43db      	mvns	r3, r3
 80027a0:	4915      	ldr	r1, [pc, #84]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	3301      	adds	r3, #1
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	fa22 f303 	lsr.w	r3, r2, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f47f aed0 	bne.w	800255c <HAL_GPIO_Init+0x14>
  }
}
 80027bc:	bf00      	nop
 80027be:	372c      	adds	r7, #44	; 0x2c
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	10210000 	.word	0x10210000
 80027cc:	10110000 	.word	0x10110000
 80027d0:	10120000 	.word	0x10120000
 80027d4:	10310000 	.word	0x10310000
 80027d8:	10320000 	.word	0x10320000
 80027dc:	10220000 	.word	0x10220000
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40010000 	.word	0x40010000
 80027e8:	40010800 	.word	0x40010800
 80027ec:	40010c00 	.word	0x40010c00
 80027f0:	40011000 	.word	0x40011000
 80027f4:	40011400 	.word	0x40011400
 80027f8:	40010400 	.word	0x40010400

080027fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]
 8002808:	4613      	mov	r3, r2
 800280a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800280c:	787b      	ldrb	r3, [r7, #1]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002812:	887a      	ldrh	r2, [r7, #2]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002818:	e003      	b.n	8002822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800281a:	887b      	ldrh	r3, [r7, #2]
 800281c:	041a      	lsls	r2, r3, #16
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	611a      	str	r2, [r3, #16]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002844:	887a      	ldrh	r2, [r7, #2]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800284a:	e002      	b.n	8002852 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800284c:	887a      	ldrh	r2, [r7, #2]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	611a      	str	r2, [r3, #16]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d006      	beq.n	8002880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002872:	4a05      	ldr	r2, [pc, #20]	; (8002888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f806 	bl	800288c <HAL_GPIO_EXTI_Callback>
  }
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40010400 	.word	0x40010400

0800288c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e26c      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8087 	beq.w	80029ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c0:	4b92      	ldr	r3, [pc, #584]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d00c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028cc:	4b8f      	ldr	r3, [pc, #572]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d112      	bne.n	80028fe <HAL_RCC_OscConfig+0x5e>
 80028d8:	4b8c      	ldr	r3, [pc, #560]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e4:	d10b      	bne.n	80028fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e6:	4b89      	ldr	r3, [pc, #548]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d06c      	beq.n	80029cc <HAL_RCC_OscConfig+0x12c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d168      	bne.n	80029cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e246      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x76>
 8002908:	4b80      	ldr	r3, [pc, #512]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a7f      	ldr	r2, [pc, #508]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800290e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	e02e      	b.n	8002974 <HAL_RCC_OscConfig+0xd4>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x98>
 800291e:	4b7b      	ldr	r3, [pc, #492]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a7a      	ldr	r2, [pc, #488]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b78      	ldr	r3, [pc, #480]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a77      	ldr	r2, [pc, #476]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e01d      	b.n	8002974 <HAL_RCC_OscConfig+0xd4>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0xbc>
 8002942:	4b72      	ldr	r3, [pc, #456]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a71      	ldr	r2, [pc, #452]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b6f      	ldr	r3, [pc, #444]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a6e      	ldr	r2, [pc, #440]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0xd4>
 800295c:	4b6b      	ldr	r3, [pc, #428]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6a      	ldr	r2, [pc, #424]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a67      	ldr	r2, [pc, #412]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800296e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002972:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7ff fc34 	bl	80021e8 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002984:	f7ff fc30 	bl	80021e8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e1fa      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b5d      	ldr	r3, [pc, #372]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0xe4>
 80029a2:	e014      	b.n	80029ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7ff fc20 	bl	80021e8 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ac:	f7ff fc1c 	bl	80021e8 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e1e6      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	4b53      	ldr	r3, [pc, #332]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x10c>
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d063      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029da:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029e6:	4b49      	ldr	r3, [pc, #292]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d11c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x18c>
 80029f2:	4b46      	ldr	r3, [pc, #280]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d116      	bne.n	8002a2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	4b43      	ldr	r3, [pc, #268]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_RCC_OscConfig+0x176>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e1ba      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4939      	ldr	r1, [pc, #228]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	e03a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a34:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7ff fbd5 	bl	80021e8 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a42:	f7ff fbd1 	bl	80021e8 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e19b      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a60:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4927      	ldr	r1, [pc, #156]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
 8002a74:	e015      	b.n	8002aa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a76:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7ff fbb4 	bl	80021e8 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a84:	f7ff fbb0 	bl	80021e8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e17a      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d03a      	beq.n	8002b24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d019      	beq.n	8002aea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7ff fb94 	bl	80021e8 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7ff fb90 	bl	80021e8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e15a      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f000 fada 	bl	800309c <RCC_Delay>
 8002ae8:	e01c      	b.n	8002b24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af0:	f7ff fb7a 	bl	80021e8 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af6:	e00f      	b.n	8002b18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af8:	f7ff fb76 	bl	80021e8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d908      	bls.n	8002b18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e140      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	42420000 	.word	0x42420000
 8002b14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b18:	4b9e      	ldr	r3, [pc, #632]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e9      	bne.n	8002af8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80a6 	beq.w	8002c7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b36:	4b97      	ldr	r3, [pc, #604]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10d      	bne.n	8002b5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	4b94      	ldr	r3, [pc, #592]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	4a93      	ldr	r2, [pc, #588]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	61d3      	str	r3, [r2, #28]
 8002b4e:	4b91      	ldr	r3, [pc, #580]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b8e      	ldr	r3, [pc, #568]	; (8002d98 <HAL_RCC_OscConfig+0x4f8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d118      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	4b8b      	ldr	r3, [pc, #556]	; (8002d98 <HAL_RCC_OscConfig+0x4f8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a8a      	ldr	r2, [pc, #552]	; (8002d98 <HAL_RCC_OscConfig+0x4f8>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b76:	f7ff fb37 	bl	80021e8 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7e:	f7ff fb33 	bl	80021e8 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b64      	cmp	r3, #100	; 0x64
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e0fd      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	4b81      	ldr	r3, [pc, #516]	; (8002d98 <HAL_RCC_OscConfig+0x4f8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x312>
 8002ba4:	4b7b      	ldr	r3, [pc, #492]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4a7a      	ldr	r2, [pc, #488]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6213      	str	r3, [r2, #32]
 8002bb0:	e02d      	b.n	8002c0e <HAL_RCC_OscConfig+0x36e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x334>
 8002bba:	4b76      	ldr	r3, [pc, #472]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a75      	ldr	r2, [pc, #468]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6213      	str	r3, [r2, #32]
 8002bc6:	4b73      	ldr	r3, [pc, #460]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a72      	ldr	r2, [pc, #456]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	6213      	str	r3, [r2, #32]
 8002bd2:	e01c      	b.n	8002c0e <HAL_RCC_OscConfig+0x36e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d10c      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x356>
 8002bdc:	4b6d      	ldr	r3, [pc, #436]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a6c      	ldr	r2, [pc, #432]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	f043 0304 	orr.w	r3, r3, #4
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	4b6a      	ldr	r3, [pc, #424]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4a69      	ldr	r2, [pc, #420]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6213      	str	r3, [r2, #32]
 8002bf4:	e00b      	b.n	8002c0e <HAL_RCC_OscConfig+0x36e>
 8002bf6:	4b67      	ldr	r3, [pc, #412]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a66      	ldr	r2, [pc, #408]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	6213      	str	r3, [r2, #32]
 8002c02:	4b64      	ldr	r3, [pc, #400]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	4a63      	ldr	r2, [pc, #396]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002c08:	f023 0304 	bic.w	r3, r3, #4
 8002c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d015      	beq.n	8002c42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7ff fae7 	bl	80021e8 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7ff fae3 	bl	80021e8 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0ab      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c34:	4b57      	ldr	r3, [pc, #348]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ee      	beq.n	8002c1e <HAL_RCC_OscConfig+0x37e>
 8002c40:	e014      	b.n	8002c6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7ff fad1 	bl	80021e8 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7ff facd 	bl	80021e8 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e095      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c60:	4b4c      	ldr	r3, [pc, #304]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ee      	bne.n	8002c4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c72:	4b48      	ldr	r3, [pc, #288]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4a47      	ldr	r2, [pc, #284]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8081 	beq.w	8002d8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c88:	4b42      	ldr	r3, [pc, #264]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 030c 	and.w	r3, r3, #12
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d061      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d146      	bne.n	8002d2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9c:	4b3f      	ldr	r3, [pc, #252]	; (8002d9c <HAL_RCC_OscConfig+0x4fc>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7ff faa1 	bl	80021e8 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002caa:	f7ff fa9d 	bl	80021e8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e067      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbc:	4b35      	ldr	r3, [pc, #212]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd0:	d108      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cd2:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	492d      	ldr	r1, [pc, #180]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a19      	ldr	r1, [r3, #32]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	4927      	ldr	r1, [pc, #156]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cfc:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <HAL_RCC_OscConfig+0x4fc>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7ff fa71 	bl	80021e8 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0a:	f7ff fa6d 	bl	80021e8 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e037      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x46a>
 8002d28:	e02f      	b.n	8002d8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <HAL_RCC_OscConfig+0x4fc>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7ff fa5a 	bl	80021e8 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7ff fa56 	bl	80021e8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e020      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x498>
 8002d56:	e018      	b.n	8002d8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e013      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_OscConfig+0x4f4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d106      	bne.n	8002d86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40007000 	.word	0x40007000
 8002d9c:	42420060 	.word	0x42420060

08002da0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0d0      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b6a      	ldr	r3, [pc, #424]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d910      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b67      	ldr	r3, [pc, #412]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 0207 	bic.w	r2, r3, #7
 8002dca:	4965      	ldr	r1, [pc, #404]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b63      	ldr	r3, [pc, #396]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0b8      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	494d      	ldr	r1, [pc, #308]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d040      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5e:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e073      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e06b      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4936      	ldr	r1, [pc, #216]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e90:	f7ff f9aa 	bl	80021e8 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7ff f9a6 	bl	80021e8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e053      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d210      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 0207 	bic.w	r2, r3, #7
 8002ed6:	4922      	ldr	r1, [pc, #136]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e032      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4916      	ldr	r1, [pc, #88]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	490e      	ldr	r1, [pc, #56]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f2e:	f000 f821 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f32:	4601      	mov	r1, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002f40:	5cd3      	ldrb	r3, [r2, r3]
 8002f42:	fa21 f303 	lsr.w	r3, r1, r3
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_RCC_ClockConfig+0x1cc>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1d0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f908 	bl	8002164 <HAL_InitTick>

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40022000 	.word	0x40022000
 8002f64:	40021000 	.word	0x40021000
 8002f68:	08004dbc 	.word	0x08004dbc
 8002f6c:	2000000c 	.word	0x2000000c
 8002f70:	20000010 	.word	0x20000010

08002f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	b490      	push	{r4, r7}
 8002f76:	b08a      	sub	sp, #40	; 0x28
 8002f78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f7c:	1d3c      	adds	r4, r7, #4
 8002f7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f84:	4b28      	ldr	r3, [pc, #160]	; (8003028 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	2300      	movs	r3, #0
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f9e:	4b23      	ldr	r3, [pc, #140]	; (800302c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d002      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d003      	beq.n	8002fba <HAL_RCC_GetSysClockFreq+0x46>
 8002fb2:	e02d      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fb4:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fb6:	623b      	str	r3, [r7, #32]
      break;
 8002fb8:	e02d      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	0c9b      	lsrs	r3, r3, #18
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fcc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fd8:	4b14      	ldr	r3, [pc, #80]	; (800302c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	0c5b      	lsrs	r3, r3, #17
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ff2:	fb02 f203 	mul.w	r2, r2, r3
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffe:	e004      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003004:	fb02 f303 	mul.w	r3, r2, r3
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	623b      	str	r3, [r7, #32]
      break;
 800300e:	e002      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003012:	623b      	str	r3, [r7, #32]
      break;
 8003014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003016:	6a3b      	ldr	r3, [r7, #32]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3728      	adds	r7, #40	; 0x28
 800301c:	46bd      	mov	sp, r7
 800301e:	bc90      	pop	{r4, r7}
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	08004da8 	.word	0x08004da8
 8003028:	08004db8 	.word	0x08004db8
 800302c:	40021000 	.word	0x40021000
 8003030:	007a1200 	.word	0x007a1200
 8003034:	003d0900 	.word	0x003d0900

08003038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800303c:	4b02      	ldr	r3, [pc, #8]	; (8003048 <HAL_RCC_GetHCLKFreq+0x10>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr
 8003048:	2000000c 	.word	0x2000000c

0800304c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003050:	f7ff fff2 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003054:	4601      	mov	r1, r0
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4a03      	ldr	r2, [pc, #12]	; (8003070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40021000 	.word	0x40021000
 8003070:	08004dcc 	.word	0x08004dcc

08003074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003078:	f7ff ffde 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 800307c:	4601      	mov	r1, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	0adb      	lsrs	r3, r3, #11
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4a03      	ldr	r2, [pc, #12]	; (8003098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800308a:	5cd3      	ldrb	r3, [r2, r3]
 800308c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	08004dcc 	.word	0x08004dcc

0800309c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <RCC_Delay+0x34>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <RCC_Delay+0x38>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	0a5b      	lsrs	r3, r3, #9
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030b8:	bf00      	nop
  }
  while (Delay --);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1e5a      	subs	r2, r3, #1
 80030be:	60fa      	str	r2, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f9      	bne.n	80030b8 <RCC_Delay+0x1c>
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	2000000c 	.word	0x2000000c
 80030d4:	10624dd3 	.word	0x10624dd3

080030d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e053      	b.n	8003192 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d106      	bne.n	800310a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7fe fc4f 	bl	80019a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2202      	movs	r2, #2
 800310e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003120:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	ea42 0103 	orr.w	r1, r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	0c1a      	lsrs	r2, r3, #16
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f002 0204 	and.w	r2, r2, #4
 8003170:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003180:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b088      	sub	sp, #32
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_SPI_Transmit+0x22>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e11e      	b.n	80033fa <HAL_SPI_Transmit+0x260>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031c4:	f7ff f810 	bl	80021e8 <HAL_GetTick>
 80031c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d002      	beq.n	80031e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031da:	2302      	movs	r3, #2
 80031dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031de:	e103      	b.n	80033e8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_SPI_Transmit+0x52>
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031f0:	e0fa      	b.n	80033e8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2203      	movs	r2, #3
 80031f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	88fa      	ldrh	r2, [r7, #6]
 800320a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	88fa      	ldrh	r2, [r7, #6]
 8003210:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003238:	d107      	bne.n	800324a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003248:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b40      	cmp	r3, #64	; 0x40
 8003256:	d007      	beq.n	8003268 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003266:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003270:	d14b      	bne.n	800330a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_SPI_Transmit+0xe6>
 800327a:	8afb      	ldrh	r3, [r7, #22]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d13e      	bne.n	80032fe <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	881a      	ldrh	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	1c9a      	adds	r2, r3, #2
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032a4:	e02b      	b.n	80032fe <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d112      	bne.n	80032da <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	881a      	ldrh	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	1c9a      	adds	r2, r3, #2
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80032d8:	e011      	b.n	80032fe <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032da:	f7fe ff85 	bl	80021e8 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d803      	bhi.n	80032f2 <HAL_SPI_Transmit+0x158>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d102      	bne.n	80032f8 <HAL_SPI_Transmit+0x15e>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032fc:	e074      	b.n	80033e8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ce      	bne.n	80032a6 <HAL_SPI_Transmit+0x10c>
 8003308:	e04c      	b.n	80033a4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_SPI_Transmit+0x17e>
 8003312:	8afb      	ldrh	r3, [r7, #22]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d140      	bne.n	800339a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800333e:	e02c      	b.n	800339a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b02      	cmp	r3, #2
 800334c:	d113      	bne.n	8003376 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	330c      	adds	r3, #12
 8003358:	7812      	ldrb	r2, [r2, #0]
 800335a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	86da      	strh	r2, [r3, #54]	; 0x36
 8003374:	e011      	b.n	800339a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003376:	f7fe ff37 	bl	80021e8 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d803      	bhi.n	800338e <HAL_SPI_Transmit+0x1f4>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d102      	bne.n	8003394 <HAL_SPI_Transmit+0x1fa>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d102      	bne.n	800339a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003398:	e026      	b.n	80033e8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1cd      	bne.n	8003340 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	6839      	ldr	r1, [r7, #0]
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fa36 	bl	800381a <SPI_EndRxTxTransaction>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10a      	bne.n	80033d8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e000      	b.n	80033e8 <HAL_SPI_Transmit+0x24e>
  }

error:
 80033e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08c      	sub	sp, #48	; 0x30
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003410:	2301      	movs	r3, #1
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_SPI_TransmitReceive+0x26>
 8003424:	2302      	movs	r3, #2
 8003426:	e18a      	b.n	800373e <HAL_SPI_TransmitReceive+0x33c>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003430:	f7fe feda 	bl	80021e8 <HAL_GetTick>
 8003434:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800343c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003446:	887b      	ldrh	r3, [r7, #2]
 8003448:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800344a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800344e:	2b01      	cmp	r3, #1
 8003450:	d00f      	beq.n	8003472 <HAL_SPI_TransmitReceive+0x70>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003458:	d107      	bne.n	800346a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <HAL_SPI_TransmitReceive+0x68>
 8003462:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003466:	2b04      	cmp	r3, #4
 8003468:	d003      	beq.n	8003472 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800346a:	2302      	movs	r3, #2
 800346c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003470:	e15b      	b.n	800372a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_SPI_TransmitReceive+0x82>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_SPI_TransmitReceive+0x82>
 800347e:	887b      	ldrh	r3, [r7, #2]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d103      	bne.n	800348c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800348a:	e14e      	b.n	800372a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b04      	cmp	r3, #4
 8003496:	d003      	beq.n	80034a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2205      	movs	r2, #5
 800349c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	887a      	ldrh	r2, [r7, #2]
 80034b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	887a      	ldrh	r2, [r7, #2]
 80034c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b40      	cmp	r3, #64	; 0x40
 80034e2:	d007      	beq.n	80034f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034fc:	d178      	bne.n	80035f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_SPI_TransmitReceive+0x10a>
 8003506:	8b7b      	ldrh	r3, [r7, #26]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d166      	bne.n	80035da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	881a      	ldrh	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	1c9a      	adds	r2, r3, #2
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003530:	e053      	b.n	80035da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b02      	cmp	r3, #2
 800353e:	d11b      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x176>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d016      	beq.n	8003578 <HAL_SPI_TransmitReceive+0x176>
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d113      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	881a      	ldrh	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	1c9a      	adds	r2, r3, #2
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d119      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x1b8>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d014      	beq.n	80035ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	b292      	uxth	r2, r2
 800359c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	1c9a      	adds	r2, r3, #2
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035b6:	2301      	movs	r3, #1
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035ba:	f7fe fe15 	bl	80021e8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d807      	bhi.n	80035da <HAL_SPI_TransmitReceive+0x1d8>
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d003      	beq.n	80035da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035d8:	e0a7      	b.n	800372a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1a6      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x130>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1a1      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x130>
 80035ee:	e07c      	b.n	80036ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_SPI_TransmitReceive+0x1fc>
 80035f8:	8b7b      	ldrh	r3, [r7, #26]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d16b      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003624:	e057      	b.n	80036d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b02      	cmp	r3, #2
 8003632:	d11c      	bne.n	800366e <HAL_SPI_TransmitReceive+0x26c>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d017      	beq.n	800366e <HAL_SPI_TransmitReceive+0x26c>
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d114      	bne.n	800366e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	330c      	adds	r3, #12
 800364e:	7812      	ldrb	r2, [r2, #0]
 8003650:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b01      	cmp	r3, #1
 800367a:	d119      	bne.n	80036b0 <HAL_SPI_TransmitReceive+0x2ae>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d014      	beq.n	80036b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036ac:	2301      	movs	r3, #1
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036b0:	f7fe fd9a 	bl	80021e8 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036bc:	429a      	cmp	r2, r3
 80036be:	d803      	bhi.n	80036c8 <HAL_SPI_TransmitReceive+0x2c6>
 80036c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d102      	bne.n	80036ce <HAL_SPI_TransmitReceive+0x2cc>
 80036c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036d4:	e029      	b.n	800372a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1a2      	bne.n	8003626 <HAL_SPI_TransmitReceive+0x224>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d19d      	bne.n	8003626 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f893 	bl	800381a <SPI_EndRxTxTransaction>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d006      	beq.n	8003708 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003706:	e010      	b.n	800372a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	e000      	b.n	800372a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003728:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800373a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800373e:	4618      	mov	r0, r3
 8003740:	3730      	adds	r7, #48	; 0x30
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003756:	e04c      	b.n	80037f2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d048      	beq.n	80037f2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003760:	f7fe fd42 	bl	80021e8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d902      	bls.n	8003776 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d13d      	bne.n	80037f2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003784:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800378e:	d111      	bne.n	80037b4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003798:	d004      	beq.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a2:	d107      	bne.n	80037b4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037bc:	d10f      	bne.n	80037de <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e00f      	b.n	8003812 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4013      	ands	r3, r2
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	429a      	cmp	r2, r3
 8003800:	bf0c      	ite	eq
 8003802:	2301      	moveq	r3, #1
 8003804:	2300      	movne	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	429a      	cmp	r2, r3
 800380e:	d1a3      	bne.n	8003758 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af02      	add	r7, sp, #8
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2200      	movs	r2, #0
 800382e:	2180      	movs	r1, #128	; 0x80
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f7ff ff88 	bl	8003746 <SPI_WaitFlagStateUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	f043 0220 	orr.w	r2, r3, #32
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e000      	b.n	800384e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e01d      	b.n	80038a4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fe faeb 	bl	8001e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2202      	movs	r2, #2
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3304      	adds	r3, #4
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f000 fa39 	bl	8003d0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e01d      	b.n	80038fa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f815 	bl	8003902 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4619      	mov	r1, r3
 80038ea:	4610      	mov	r0, r2
 80038ec:	f000 fa0e 	bl	8003d0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2201      	movs	r2, #1
 8003924:	6839      	ldr	r1, [r7, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fc70 	bl	800420c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a10      	ldr	r2, [pc, #64]	; (8003974 <HAL_TIM_PWM_Start+0x60>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d107      	bne.n	8003946 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b06      	cmp	r3, #6
 8003956:	d007      	beq.n	8003968 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40012c00 	.word	0x40012c00

08003978 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	6839      	ldr	r1, [r7, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fc3e 	bl	800420c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <HAL_TIM_PWM_Stop+0x94>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d117      	bne.n	80039ca <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6a1a      	ldr	r2, [r3, #32]
 80039a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10f      	bne.n	80039ca <HAL_TIM_PWM_Stop+0x52>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	f240 4344 	movw	r3, #1092	; 0x444
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d107      	bne.n	80039ca <HAL_TIM_PWM_Stop+0x52>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6a1a      	ldr	r2, [r3, #32]
 80039d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <HAL_TIM_PWM_Stop+0x82>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	f240 4344 	movw	r3, #1092	; 0x444
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d107      	bne.n	80039fa <HAL_TIM_PWM_Stop+0x82>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40012c00 	.word	0x40012c00

08003a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e0b4      	b.n	8003b94 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2202      	movs	r2, #2
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b0c      	cmp	r3, #12
 8003a3e:	f200 809f 	bhi.w	8003b80 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003a42:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a7d 	.word	0x08003a7d
 8003a4c:	08003b81 	.word	0x08003b81
 8003a50:	08003b81 	.word	0x08003b81
 8003a54:	08003b81 	.word	0x08003b81
 8003a58:	08003abd 	.word	0x08003abd
 8003a5c:	08003b81 	.word	0x08003b81
 8003a60:	08003b81 	.word	0x08003b81
 8003a64:	08003b81 	.word	0x08003b81
 8003a68:	08003aff 	.word	0x08003aff
 8003a6c:	08003b81 	.word	0x08003b81
 8003a70:	08003b81 	.word	0x08003b81
 8003a74:	08003b81 	.word	0x08003b81
 8003a78:	08003b3f 	.word	0x08003b3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f9a4 	bl	8003dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0208 	orr.w	r2, r2, #8
 8003a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0204 	bic.w	r2, r2, #4
 8003aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6999      	ldr	r1, [r3, #24]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	619a      	str	r2, [r3, #24]
      break;
 8003aba:	e062      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f9ea 	bl	8003e9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6999      	ldr	r1, [r3, #24]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	021a      	lsls	r2, r3, #8
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	619a      	str	r2, [r3, #24]
      break;
 8003afc:	e041      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fa33 	bl	8003f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0208 	orr.w	r2, r2, #8
 8003b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0204 	bic.w	r2, r2, #4
 8003b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69d9      	ldr	r1, [r3, #28]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	61da      	str	r2, [r3, #28]
      break;
 8003b3c:	e021      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fa7d 	bl	8004044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69d9      	ldr	r1, [r3, #28]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	021a      	lsls	r2, r3, #8
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	61da      	str	r2, [r3, #28]
      break;
 8003b7e:	e000      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003b80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIM_ConfigClockSource+0x18>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e0a6      	b.n	8003d02 <HAL_TIM_ConfigClockSource+0x166>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d067      	beq.n	8003cbc <HAL_TIM_ConfigClockSource+0x120>
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d80b      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x6c>
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d073      	beq.n	8003cdc <HAL_TIM_ConfigClockSource+0x140>
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d802      	bhi.n	8003bfe <HAL_TIM_ConfigClockSource+0x62>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d06f      	beq.n	8003cdc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003bfc:	e078      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d06c      	beq.n	8003cdc <HAL_TIM_ConfigClockSource+0x140>
 8003c02:	2b30      	cmp	r3, #48	; 0x30
 8003c04:	d06a      	beq.n	8003cdc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c06:	e073      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c08:	2b70      	cmp	r3, #112	; 0x70
 8003c0a:	d00d      	beq.n	8003c28 <HAL_TIM_ConfigClockSource+0x8c>
 8003c0c:	2b70      	cmp	r3, #112	; 0x70
 8003c0e:	d804      	bhi.n	8003c1a <HAL_TIM_ConfigClockSource+0x7e>
 8003c10:	2b50      	cmp	r3, #80	; 0x50
 8003c12:	d033      	beq.n	8003c7c <HAL_TIM_ConfigClockSource+0xe0>
 8003c14:	2b60      	cmp	r3, #96	; 0x60
 8003c16:	d041      	beq.n	8003c9c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c18:	e06a      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1e:	d066      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x152>
 8003c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c24:	d017      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c26:	e063      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6899      	ldr	r1, [r3, #8]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f000 fac9 	bl	80041ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	609a      	str	r2, [r3, #8]
      break;
 8003c54:	e04c      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6899      	ldr	r1, [r3, #8]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f000 fab2 	bl	80041ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c78:	609a      	str	r2, [r3, #8]
      break;
 8003c7a:	e039      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f000 fa29 	bl	80040e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2150      	movs	r1, #80	; 0x50
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fa80 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003c9a:	e029      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f000 fa47 	bl	800413c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2160      	movs	r1, #96	; 0x60
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fa70 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003cba:	e019      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f000 fa09 	bl	80040e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2140      	movs	r1, #64	; 0x40
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fa60 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003cda:	e009      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f000 fa57 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003cec:	e000      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003cee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a29      	ldr	r2, [pc, #164]	; (8003dc4 <TIM_Base_SetConfig+0xb8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00b      	beq.n	8003d3c <TIM_Base_SetConfig+0x30>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2a:	d007      	beq.n	8003d3c <TIM_Base_SetConfig+0x30>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a26      	ldr	r2, [pc, #152]	; (8003dc8 <TIM_Base_SetConfig+0xbc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_Base_SetConfig+0x30>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a25      	ldr	r2, [pc, #148]	; (8003dcc <TIM_Base_SetConfig+0xc0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d108      	bne.n	8003d4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <TIM_Base_SetConfig+0xb8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00b      	beq.n	8003d6e <TIM_Base_SetConfig+0x62>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5c:	d007      	beq.n	8003d6e <TIM_Base_SetConfig+0x62>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <TIM_Base_SetConfig+0xbc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_Base_SetConfig+0x62>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <TIM_Base_SetConfig+0xc0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d108      	bne.n	8003d80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <TIM_Base_SetConfig+0xb8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d103      	bne.n	8003db4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	615a      	str	r2, [r3, #20]
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800

08003dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f023 0201 	bic.w	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f023 0302 	bic.w	r3, r3, #2
 8003e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <TIM_OC1_SetConfig+0xc8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d10c      	bne.n	8003e46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f023 0308 	bic.w	r3, r3, #8
 8003e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <TIM_OC1_SetConfig+0xc8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d111      	bne.n	8003e72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	621a      	str	r2, [r3, #32]
}
 8003e8c:	bf00      	nop
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00

08003e9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f023 0210 	bic.w	r2, r3, #16
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0320 	bic.w	r3, r3, #32
 8003ee6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <TIM_OC2_SetConfig+0xd0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10d      	bne.n	8003f18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <TIM_OC2_SetConfig+0xd0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d113      	bne.n	8003f48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	40012c00 	.word	0x40012c00

08003f70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0303 	bic.w	r3, r3, #3
 8003fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a1d      	ldr	r2, [pc, #116]	; (8004040 <TIM_OC3_SetConfig+0xd0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d10d      	bne.n	8003fea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a14      	ldr	r2, [pc, #80]	; (8004040 <TIM_OC3_SetConfig+0xd0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d113      	bne.n	800401a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40012c00 	.word	0x40012c00

08004044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800408e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	031b      	lsls	r3, r3, #12
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a0f      	ldr	r2, [pc, #60]	; (80040dc <TIM_OC4_SetConfig+0x98>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d109      	bne.n	80040b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	019b      	lsls	r3, r3, #6
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr
 80040dc:	40012c00 	.word	0x40012c00

080040e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0201 	bic.w	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800410a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f023 030a 	bic.w	r3, r3, #10
 800411c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f023 0210 	bic.w	r2, r3, #16
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004166:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	031b      	lsls	r3, r3, #12
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004178:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	621a      	str	r2, [r3, #32]
}
 8004190:	bf00      	nop
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f043 0307 	orr.w	r3, r3, #7
 80041bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	609a      	str	r2, [r3, #8]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b087      	sub	sp, #28
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	607a      	str	r2, [r7, #4]
 80041da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	021a      	lsls	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	609a      	str	r2, [r3, #8]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	2201      	movs	r2, #1
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1a      	ldr	r2, [r3, #32]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	43db      	mvns	r3, r3
 800422e:	401a      	ands	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1a      	ldr	r2, [r3, #32]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	431a      	orrs	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004268:	2302      	movs	r3, #2
 800426a:	e032      	b.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e03f      	b.n	800436e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd fe56 	bl	8001fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	; 0x24
 800430c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800431e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fb8d 	bl	8004a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b088      	sub	sp, #32
 800437a:	af02      	add	r7, sp, #8
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	603b      	str	r3, [r7, #0]
 8004382:	4613      	mov	r3, r2
 8004384:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	f040 8083 	bne.w	800449e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_UART_Transmit+0x2e>
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e07b      	b.n	80044a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Transmit+0x40>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e074      	b.n	80044a0 <HAL_UART_Transmit+0x12a>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2221      	movs	r2, #33	; 0x21
 80043c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80043cc:	f7fd ff0c 	bl	80021e8 <HAL_GetTick>
 80043d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043de:	e042      	b.n	8004466 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f6:	d122      	bne.n	800443e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2200      	movs	r2, #0
 8004400:	2180      	movs	r1, #128	; 0x80
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f9b2 	bl	800476c <UART_WaitOnFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e046      	b.n	80044a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004424:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	3302      	adds	r3, #2
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	e017      	b.n	8004466 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3301      	adds	r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	e013      	b.n	8004466 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2200      	movs	r2, #0
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f98f 	bl	800476c <UART_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e023      	b.n	80044a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	60ba      	str	r2, [r7, #8]
 800445e:	781a      	ldrb	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1b7      	bne.n	80043e0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2200      	movs	r2, #0
 8004478:	2140      	movs	r1, #64	; 0x40
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f976 	bl	800476c <UART_WaitOnFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e00a      	b.n	80044a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d140      	bne.n	8004544 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_UART_Receive_IT+0x26>
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e039      	b.n	8004546 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_UART_Receive_IT+0x38>
 80044dc:	2302      	movs	r3, #2
 80044de:	e032      	b.n	8004546 <HAL_UART_Receive_IT+0x9e>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	88fa      	ldrh	r2, [r7, #6]
 80044f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2222      	movs	r2, #34	; 0x22
 8004504:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800451e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0220 	orr.w	r2, r2, #32
 800453e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	e000      	b.n	8004546 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004544:	2302      	movs	r3, #2
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_UART_IRQHandler+0x52>
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f9ce 	bl	800493c <UART_Receive_IT>
      return;
 80045a0:	e0cc      	b.n	800473c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80ab 	beq.w	8004700 <HAL_UART_IRQHandler+0x1b0>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <HAL_UART_IRQHandler+0x70>
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80a0 	beq.w	8004700 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_UART_IRQHandler+0x90>
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	f043 0201 	orr.w	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_UART_IRQHandler+0xb0>
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	f043 0202 	orr.w	r2, r3, #2
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_UART_IRQHandler+0xd0>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	f043 0204 	orr.w	r2, r3, #4
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_UART_IRQHandler+0xf0>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	f043 0208 	orr.w	r2, r3, #8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d078      	beq.n	800473a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <HAL_UART_IRQHandler+0x112>
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f96d 	bl	800493c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf14      	ite	ne
 8004670:	2301      	movne	r3, #1
 8004672:	2300      	moveq	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <HAL_UART_IRQHandler+0x13a>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d031      	beq.n	80046ee <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f8b8 	bl	8004800 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d023      	beq.n	80046e6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d013      	beq.n	80046de <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	4a22      	ldr	r2, [pc, #136]	; (8004744 <HAL_UART_IRQHandler+0x1f4>)
 80046bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fd feca 	bl	800245c <HAL_DMA_Abort_IT>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d016      	beq.n	80046fc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046d8:	4610      	mov	r0, r2
 80046da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	e00e      	b.n	80046fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f83b 	bl	800475a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e4:	e00a      	b.n	80046fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f837 	bl	800475a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	e006      	b.n	80046fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f833 	bl	800475a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80046fa:	e01e      	b.n	800473a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	bf00      	nop
    return;
 80046fe:	e01c      	b.n	800473a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_UART_IRQHandler+0x1cc>
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f8a4 	bl	8004862 <UART_Transmit_IT>
    return;
 800471a:	e00f      	b.n	800473c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_UART_IRQHandler+0x1ec>
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f8eb 	bl	800490c <UART_EndTransmit_IT>
    return;
 8004736:	bf00      	nop
 8004738:	e000      	b.n	800473c <HAL_UART_IRQHandler+0x1ec>
    return;
 800473a:	bf00      	nop
  }
}
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	0800483b 	.word	0x0800483b

08004748 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr

0800475a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477c:	e02c      	b.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d028      	beq.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <UART_WaitOnFlagUntilTimeout+0x30>
 800478c:	f7fd fd2c 	bl	80021e8 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	429a      	cmp	r2, r3
 800479a:	d21d      	bcs.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e00f      	b.n	80047f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4013      	ands	r3, r2
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d0c3      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004816:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff ff80 	bl	800475a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b21      	cmp	r3, #33	; 0x21
 8004874:	d144      	bne.n	8004900 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487e:	d11a      	bne.n	80048b6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004894:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d105      	bne.n	80048aa <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	1c9a      	adds	r2, r3, #2
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	621a      	str	r2, [r3, #32]
 80048a8:	e00e      	b.n	80048c8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	621a      	str	r2, [r3, #32]
 80048b4:	e008      	b.n	80048c8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	1c59      	adds	r1, r3, #1
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6211      	str	r1, [r2, #32]
 80048c0:	781a      	ldrb	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4619      	mov	r1, r3
 80048d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10f      	bne.n	80048fc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	e000      	b.n	8004902 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004900:	2302      	movs	r3, #2
  }
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr

0800490c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004922:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff ff0b 	bl	8004748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b22      	cmp	r3, #34	; 0x22
 800494e:	d171      	bne.n	8004a34 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004958:	d123      	bne.n	80049a2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10e      	bne.n	8004986 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	1c9a      	adds	r2, r3, #2
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28
 8004984:	e029      	b.n	80049da <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	b29b      	uxth	r3, r3
 800498e:	b2db      	uxtb	r3, r3
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	629a      	str	r2, [r3, #40]	; 0x28
 80049a0:	e01b      	b.n	80049da <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6858      	ldr	r0, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	1c59      	adds	r1, r3, #1
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6291      	str	r1, [r2, #40]	; 0x28
 80049ba:	b2c2      	uxtb	r2, r0
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	e00c      	b.n	80049da <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	1c58      	adds	r0, r3, #1
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	6288      	str	r0, [r1, #40]	; 0x28
 80049d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	4619      	mov	r1, r3
 80049e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d120      	bne.n	8004a30 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0220 	bic.w	r2, r2, #32
 80049fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fd fb18 	bl	800205c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e002      	b.n	8004a36 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	e000      	b.n	8004a36 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004a34:	2302      	movs	r3, #2
  }
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a7a:	f023 030c 	bic.w	r3, r3, #12
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	430b      	orrs	r3, r1
 8004a86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a52      	ldr	r2, [pc, #328]	; (8004bec <UART_SetConfig+0x1ac>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d14e      	bne.n	8004b46 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004aa8:	f7fe fae4 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 8004aac:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009a      	lsls	r2, r3, #2
 8004ab8:	441a      	add	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	4a4a      	ldr	r2, [pc, #296]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	0119      	lsls	r1, r3, #4
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009a      	lsls	r2, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ae4:	4b42      	ldr	r3, [pc, #264]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	2064      	movs	r0, #100	; 0x64
 8004aee:	fb00 f303 	mul.w	r3, r0, r3
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	3332      	adds	r3, #50	; 0x32
 8004af8:	4a3d      	ldr	r2, [pc, #244]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b04:	4419      	add	r1, r3
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009a      	lsls	r2, r3, #2
 8004b10:	441a      	add	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b1c:	4b34      	ldr	r3, [pc, #208]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004b1e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	2064      	movs	r0, #100	; 0x64
 8004b26:	fb00 f303 	mul.w	r3, r0, r3
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	3332      	adds	r3, #50	; 0x32
 8004b30:	4a2f      	ldr	r2, [pc, #188]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	f003 020f 	and.w	r2, r3, #15
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	440a      	add	r2, r1
 8004b42:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004b44:	e04d      	b.n	8004be2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b46:	f7fe fa81 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 8004b4a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009a      	lsls	r2, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b62:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	0119      	lsls	r1, r3, #4
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	009a      	lsls	r2, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b82:	4b1b      	ldr	r3, [pc, #108]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004b84:	fba3 0302 	umull	r0, r3, r3, r2
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	2064      	movs	r0, #100	; 0x64
 8004b8c:	fb00 f303 	mul.w	r3, r0, r3
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	3332      	adds	r3, #50	; 0x32
 8004b96:	4a16      	ldr	r2, [pc, #88]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba2:	4419      	add	r1, r3
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009a      	lsls	r2, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bba:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004bbc:	fba3 0302 	umull	r0, r3, r3, r2
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	2064      	movs	r0, #100	; 0x64
 8004bc4:	fb00 f303 	mul.w	r3, r0, r3
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	3332      	adds	r3, #50	; 0x32
 8004bce:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	f003 020f 	and.w	r2, r3, #15
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	440a      	add	r2, r1
 8004be0:	609a      	str	r2, [r3, #8]
}
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40013800 	.word	0x40013800
 8004bf0:	51eb851f 	.word	0x51eb851f

08004bf4 <__libc_init_array>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	2500      	movs	r5, #0
 8004bf8:	4e0c      	ldr	r6, [pc, #48]	; (8004c2c <__libc_init_array+0x38>)
 8004bfa:	4c0d      	ldr	r4, [pc, #52]	; (8004c30 <__libc_init_array+0x3c>)
 8004bfc:	1ba4      	subs	r4, r4, r6
 8004bfe:	10a4      	asrs	r4, r4, #2
 8004c00:	42a5      	cmp	r5, r4
 8004c02:	d109      	bne.n	8004c18 <__libc_init_array+0x24>
 8004c04:	f000 f8b0 	bl	8004d68 <_init>
 8004c08:	2500      	movs	r5, #0
 8004c0a:	4e0a      	ldr	r6, [pc, #40]	; (8004c34 <__libc_init_array+0x40>)
 8004c0c:	4c0a      	ldr	r4, [pc, #40]	; (8004c38 <__libc_init_array+0x44>)
 8004c0e:	1ba4      	subs	r4, r4, r6
 8004c10:	10a4      	asrs	r4, r4, #2
 8004c12:	42a5      	cmp	r5, r4
 8004c14:	d105      	bne.n	8004c22 <__libc_init_array+0x2e>
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
 8004c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c1c:	4798      	blx	r3
 8004c1e:	3501      	adds	r5, #1
 8004c20:	e7ee      	b.n	8004c00 <__libc_init_array+0xc>
 8004c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c26:	4798      	blx	r3
 8004c28:	3501      	adds	r5, #1
 8004c2a:	e7f2      	b.n	8004c12 <__libc_init_array+0x1e>
 8004c2c:	08004dd4 	.word	0x08004dd4
 8004c30:	08004dd4 	.word	0x08004dd4
 8004c34:	08004dd4 	.word	0x08004dd4
 8004c38:	08004dd8 	.word	0x08004dd8

08004c3c <memcpy>:
 8004c3c:	b510      	push	{r4, lr}
 8004c3e:	1e43      	subs	r3, r0, #1
 8004c40:	440a      	add	r2, r1
 8004c42:	4291      	cmp	r1, r2
 8004c44:	d100      	bne.n	8004c48 <memcpy+0xc>
 8004c46:	bd10      	pop	{r4, pc}
 8004c48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c50:	e7f7      	b.n	8004c42 <memcpy+0x6>

08004c52 <memset>:
 8004c52:	4603      	mov	r3, r0
 8004c54:	4402      	add	r2, r0
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d100      	bne.n	8004c5c <memset+0xa>
 8004c5a:	4770      	bx	lr
 8004c5c:	f803 1b01 	strb.w	r1, [r3], #1
 8004c60:	e7f9      	b.n	8004c56 <memset+0x4>
 8004c62:	0000      	movs	r0, r0
 8004c64:	0000      	movs	r0, r0
	...

08004c68 <ceil>:
 8004c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c6c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004c70:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004c74:	2e13      	cmp	r6, #19
 8004c76:	4607      	mov	r7, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	dc31      	bgt.n	8004ce4 <ceil+0x7c>
 8004c80:	2e00      	cmp	r6, #0
 8004c82:	da12      	bge.n	8004caa <ceil+0x42>
 8004c84:	a334      	add	r3, pc, #208	; (adr r3, 8004d58 <ceil+0xf0>)
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	f7fb fa6f 	bl	800016c <__adddf3>
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2300      	movs	r3, #0
 8004c92:	f7fb feb1 	bl	80009f8 <__aeabi_dcmpgt>
 8004c96:	b128      	cbz	r0, 8004ca4 <ceil+0x3c>
 8004c98:	2c00      	cmp	r4, #0
 8004c9a:	db57      	blt.n	8004d4c <ceil+0xe4>
 8004c9c:	433c      	orrs	r4, r7
 8004c9e:	d059      	beq.n	8004d54 <ceil+0xec>
 8004ca0:	2500      	movs	r5, #0
 8004ca2:	4c2f      	ldr	r4, [pc, #188]	; (8004d60 <ceil+0xf8>)
 8004ca4:	4623      	mov	r3, r4
 8004ca6:	462f      	mov	r7, r5
 8004ca8:	e026      	b.n	8004cf8 <ceil+0x90>
 8004caa:	4a2e      	ldr	r2, [pc, #184]	; (8004d64 <ceil+0xfc>)
 8004cac:	fa42 f806 	asr.w	r8, r2, r6
 8004cb0:	ea01 0208 	and.w	r2, r1, r8
 8004cb4:	4302      	orrs	r2, r0
 8004cb6:	d01f      	beq.n	8004cf8 <ceil+0x90>
 8004cb8:	a327      	add	r3, pc, #156	; (adr r3, 8004d58 <ceil+0xf0>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f7fb fa55 	bl	800016c <__adddf3>
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f7fb fe97 	bl	80009f8 <__aeabi_dcmpgt>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d0ea      	beq.n	8004ca4 <ceil+0x3c>
 8004cce:	2c00      	cmp	r4, #0
 8004cd0:	bfc2      	ittt	gt
 8004cd2:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8004cd6:	fa43 f606 	asrgt.w	r6, r3, r6
 8004cda:	19a4      	addgt	r4, r4, r6
 8004cdc:	ea24 0408 	bic.w	r4, r4, r8
 8004ce0:	2500      	movs	r5, #0
 8004ce2:	e7df      	b.n	8004ca4 <ceil+0x3c>
 8004ce4:	2e33      	cmp	r6, #51	; 0x33
 8004ce6:	dd0b      	ble.n	8004d00 <ceil+0x98>
 8004ce8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004cec:	d104      	bne.n	8004cf8 <ceil+0x90>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	f7fb fa3c 	bl	800016c <__adddf3>
 8004cf4:	4607      	mov	r7, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d00:	f04f 32ff 	mov.w	r2, #4294967295
 8004d04:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004d08:	fa22 f808 	lsr.w	r8, r2, r8
 8004d0c:	ea18 0f00 	tst.w	r8, r0
 8004d10:	d0f2      	beq.n	8004cf8 <ceil+0x90>
 8004d12:	a311      	add	r3, pc, #68	; (adr r3, 8004d58 <ceil+0xf0>)
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f7fb fa28 	bl	800016c <__adddf3>
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f7fb fe6a 	bl	80009f8 <__aeabi_dcmpgt>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d0bd      	beq.n	8004ca4 <ceil+0x3c>
 8004d28:	2c00      	cmp	r4, #0
 8004d2a:	dd02      	ble.n	8004d32 <ceil+0xca>
 8004d2c:	2e14      	cmp	r6, #20
 8004d2e:	d103      	bne.n	8004d38 <ceil+0xd0>
 8004d30:	3401      	adds	r4, #1
 8004d32:	ea25 0508 	bic.w	r5, r5, r8
 8004d36:	e7b5      	b.n	8004ca4 <ceil+0x3c>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004d3e:	fa03 f606 	lsl.w	r6, r3, r6
 8004d42:	4435      	add	r5, r6
 8004d44:	42bd      	cmp	r5, r7
 8004d46:	bf38      	it	cc
 8004d48:	18e4      	addcc	r4, r4, r3
 8004d4a:	e7f2      	b.n	8004d32 <ceil+0xca>
 8004d4c:	2500      	movs	r5, #0
 8004d4e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004d52:	e7a7      	b.n	8004ca4 <ceil+0x3c>
 8004d54:	4625      	mov	r5, r4
 8004d56:	e7a5      	b.n	8004ca4 <ceil+0x3c>
 8004d58:	8800759c 	.word	0x8800759c
 8004d5c:	7e37e43c 	.word	0x7e37e43c
 8004d60:	3ff00000 	.word	0x3ff00000
 8004d64:	000fffff 	.word	0x000fffff

08004d68 <_init>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr

08004d74 <_fini>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr
