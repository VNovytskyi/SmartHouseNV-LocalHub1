
LocalHub1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044ac  080044ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080044ac  080044ac  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044ac  080044ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080044b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000074  08004528  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08004528  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fbb  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001665  00000000  00000000  00028058  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000898  00000000  00000000  000296c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e0  00000000  00000000  00029f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013c05  00000000  00000000  0002a738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000659a  00000000  00000000  0003e33d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d2f2  00000000  00000000  000448d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b1bc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002810  00000000  00000000  000b1c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080043e0 	.word	0x080043e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080043e0 	.word	0x080043e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <NRF_SetDefaultSettings>:
bool NRF_AvailableMessage = false;

uint8_t NRF_MessageBuff[NRF_MessageBuffSize] = {0};

void NRF_SetDefaultSettings(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
	NRF_CE_LOW;
 8000a52:	2200      	movs	r2, #0
 8000a54:	2110      	movs	r1, #16
 8000a56:	4834      	ldr	r0, [pc, #208]	; (8000b28 <NRF_SetDefaultSettings+0xdc>)
 8000a58:	f001 fc70 	bl	800233c <HAL_GPIO_WritePin>
	NRF_Delay(1);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f001 f9e3 	bl	8001e28 <HAL_Delay>
	NRF_WriteReg(NRF_REG_CONFIG, 0x02);
 8000a62:	2102      	movs	r1, #2
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 f89d 	bl	8000ba4 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_EN_AA, 0x3f); //Enable auto Acknowledgment pipe1 0x3f
 8000a6a:	213f      	movs	r1, #63	; 0x3f
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f000 f899 	bl	8000ba4 <NRF_WriteReg>
  NRF_WriteReg(NRF_REG_EN_RXADDR, 0x03); // Enable rx address pipe1
 8000a72:	2103      	movs	r1, #3
 8000a74:	2002      	movs	r0, #2
 8000a76:	f000 f895 	bl	8000ba4 <NRF_WriteReg>
  NRF_WriteReg(NRF_REG_SETUP_AW, 0x03); // Address width 5 bytes
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f891 	bl	8000ba4 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_SETUP_RETR, 0x5F); // 1500us, 15 retrans
 8000a82:	215f      	movs	r1, #95	; 0x5f
 8000a84:	2004      	movs	r0, #4
 8000a86:	f000 f88d 	bl	8000ba4 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_RF_CH, 0x60); // Set 96 channel
 8000a8a:	2160      	movs	r1, #96	; 0x60
 8000a8c:	2005      	movs	r0, #5
 8000a8e:	f000 f889 	bl	8000ba4 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_RF_SETUP, 0x27); //0dBm, 250kbps
 8000a92:	2127      	movs	r1, #39	; 0x27
 8000a94:	2006      	movs	r0, #6
 8000a96:	f000 f885 	bl	8000ba4 <NRF_WriteReg>
	NRF_ToggleFeatures();
 8000a9a:	f000 f8b1 	bl	8000c00 <NRF_ToggleFeatures>
	NRF_WriteReg(NRF_REG_FEATURE, 0x06);
 8000a9e:	2106      	movs	r1, #6
 8000aa0:	201d      	movs	r0, #29
 8000aa2:	f000 f87f 	bl	8000ba4 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_DYNPD, 0x3F); //Enable dynamic payloads on all pipes
 8000aa6:	213f      	movs	r1, #63	; 0x3f
 8000aa8:	201c      	movs	r0, #28
 8000aaa:	f000 f87b 	bl	8000ba4 <NRF_WriteReg>

	//uint8_t NRF_TX_Addr[] = {16, 'N', 'o', 'd', 'e'};
	//NRF_WriteMBReg(NRF_REG_TX_ADDR, NRF_TX_Addr, 5);

	uint8_t NRF_TX_Addr[] = {'2', 'N', 'o', 'd', 'e'};
 8000aae:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <NRF_SetDefaultSettings+0xe0>)
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ab8:	6018      	str	r0, [r3, #0]
 8000aba:	3304      	adds	r3, #4
 8000abc:	7019      	strb	r1, [r3, #0]
	NRF_WriteMBReg(NRF_REG_TX_ADDR, NRF_TX_Addr, 5);
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	2205      	movs	r2, #5
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	2010      	movs	r0, #16
 8000ac8:	f000 f8ee 	bl	8000ca8 <NRF_WriteMBReg>

	uint8_t NRF_RX0_Addr[] = {'1', 'N', 'o', 'd', 'e'};
 8000acc:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <NRF_SetDefaultSettings+0xe4>)
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad6:	6018      	str	r0, [r3, #0]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	7019      	strb	r1, [r3, #0]
	NRF_WriteMBReg(NRF_REG_RX_ADDR_P0, NRF_RX0_Addr, 5);
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	2205      	movs	r2, #5
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	200a      	movs	r0, #10
 8000ae6:	f000 f8df 	bl	8000ca8 <NRF_WriteMBReg>

	uint8_t NRF_RX1_Addr[] = {'1', 'N', 'o', 'd', 'e'};
 8000aea:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <NRF_SetDefaultSettings+0xe4>)
 8000aec:	463b      	mov	r3, r7
 8000aee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af2:	6018      	str	r0, [r3, #0]
 8000af4:	3304      	adds	r3, #4
 8000af6:	7019      	strb	r1, [r3, #0]
	NRF_WriteMBReg(NRF_REG_RX_ADDR_P1, NRF_RX1_Addr, 5);
 8000af8:	463b      	mov	r3, r7
 8000afa:	2205      	movs	r2, #5
 8000afc:	4619      	mov	r1, r3
 8000afe:	200b      	movs	r0, #11
 8000b00:	f000 f8d2 	bl	8000ca8 <NRF_WriteMBReg>

	NRF_FlushRX();
 8000b04:	f000 f902 	bl	8000d0c <NRF_FlushRX>
	NRF_FlushTX();
 8000b08:	f000 f922 	bl	8000d50 <NRF_FlushTX>

	NRF_AvailablePacket = false;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <NRF_SetDefaultSettings+0xe8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
	NRF_AvailableMessage = false;
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <NRF_SetDefaultSettings+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]

	NRF_ClearMessageBuff();
 8000b18:	f000 fb1a 	bl	8001150 <NRF_ClearMessageBuff>
  NRF_RX_Mode();
 8000b1c:	f000 f93a 	bl	8000d94 <NRF_RX_Mode>
}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	080043f8 	.word	0x080043f8
 8000b30:	08004400 	.word	0x08004400
 8000b34:	20000090 	.word	0x20000090
 8000b38:	20000091 	.word	0x20000091

08000b3c <NRF_ReadReg>:

uint8_t NRF_ReadReg(uint8_t regAddr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af02      	add	r7, sp, #8
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	uint8_t regValue = 0x00;
 8000b46:	2300      	movs	r3, #0
 8000b48:	73fb      	strb	r3, [r7, #15]

	NRF_CSN_LOW;
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	4812      	ldr	r0, [pc, #72]	; (8000b98 <NRF_ReadReg+0x5c>)
 8000b50:	f001 fbf4 	bl	800233c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &regAddr, &regValue, 1, 1000);
 8000b54:	f107 020f 	add.w	r2, r7, #15
 8000b58:	1df9      	adds	r1, r7, #7
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2301      	movs	r3, #1
 8000b62:	480e      	ldr	r0, [pc, #56]	; (8000b9c <NRF_ReadReg+0x60>)
 8000b64:	f002 fad4 	bl	8003110 <HAL_SPI_TransmitReceive>

	if(regAddr != NRF_REG_STATUS)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b07      	cmp	r3, #7
 8000b6c:	d009      	beq.n	8000b82 <NRF_ReadReg+0x46>
	{
		HAL_SPI_TransmitReceive(&hspi1, &NRF_CMD_NOP, &regValue,1,1000);
 8000b6e:	f107 020f 	add.w	r2, r7, #15
 8000b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	4909      	ldr	r1, [pc, #36]	; (8000ba0 <NRF_ReadReg+0x64>)
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <NRF_ReadReg+0x60>)
 8000b7e:	f002 fac7 	bl	8003110 <HAL_SPI_TransmitReceive>
	}
	NRF_CSN_HIGH;
 8000b82:	2201      	movs	r2, #1
 8000b84:	2108      	movs	r1, #8
 8000b86:	4804      	ldr	r0, [pc, #16]	; (8000b98 <NRF_ReadReg+0x5c>)
 8000b88:	f001 fbd8 	bl	800233c <HAL_GPIO_WritePin>

	return regValue;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40010800 	.word	0x40010800
 8000b9c:	2000033c 	.word	0x2000033c
 8000ba0:	20000000 	.word	0x20000000

08000ba4 <NRF_WriteReg>:

void NRF_WriteReg(uint8_t regAddr, uint8_t regValue)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	460a      	mov	r2, r1
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = regAddr | W_REGISTER;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f043 0320 	orr.w	r3, r3, #32
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	73fb      	strb	r3, [r7, #15]
	NRF_CSN_LOW;
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <NRF_WriteReg+0x54>)
 8000bc4:	f001 fbba 	bl	800233c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 1000);
 8000bc8:	f107 010f 	add.w	r1, r7, #15
 8000bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	480a      	ldr	r0, [pc, #40]	; (8000bfc <NRF_WriteReg+0x58>)
 8000bd4:	f002 f85f 	bl	8002c96 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &regValue, 1, 1000);
 8000bd8:	1db9      	adds	r1, r7, #6
 8000bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bde:	2201      	movs	r2, #1
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <NRF_WriteReg+0x58>)
 8000be2:	f002 f858 	bl	8002c96 <HAL_SPI_Transmit>
	NRF_CSN_HIGH;
 8000be6:	2201      	movs	r2, #1
 8000be8:	2108      	movs	r1, #8
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <NRF_WriteReg+0x54>)
 8000bec:	f001 fba6 	bl	800233c <HAL_GPIO_WritePin>
}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40010800 	.word	0x40010800
 8000bfc:	2000033c 	.word	0x2000033c

08000c00 <NRF_ToggleFeatures>:

void NRF_ToggleFeatures(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 8000c06:	2350      	movs	r3, #80	; 0x50
 8000c08:	713b      	strb	r3, [r7, #4]

  NRF_CSN_LOW;
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	480f      	ldr	r0, [pc, #60]	; (8000c4c <NRF_ToggleFeatures+0x4c>)
 8000c10:	f001 fb94 	bl	800233c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, dt, 1,1000);
 8000c14:	1d39      	adds	r1, r7, #4
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <NRF_ToggleFeatures+0x50>)
 8000c1e:	f002 f83a 	bl	8002c96 <HAL_SPI_Transmit>
  NRF_Delay(1);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f001 f900 	bl	8001e28 <HAL_Delay>
  dt[0] = 0x73;
 8000c28:	2373      	movs	r3, #115	; 0x73
 8000c2a:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1, dt, 1,1000);
 8000c2c:	1d39      	adds	r1, r7, #4
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	2201      	movs	r2, #1
 8000c34:	4806      	ldr	r0, [pc, #24]	; (8000c50 <NRF_ToggleFeatures+0x50>)
 8000c36:	f002 f82e 	bl	8002c96 <HAL_SPI_Transmit>

  NRF_CSN_HIGH;
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	4803      	ldr	r0, [pc, #12]	; (8000c4c <NRF_ToggleFeatures+0x4c>)
 8000c40:	f001 fb7c 	bl	800233c <HAL_GPIO_WritePin>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40010800 	.word	0x40010800
 8000c50:	2000033c 	.word	0x2000033c

08000c54 <NRF_ReadMBReg>:

void NRF_ReadMBReg(uint8_t regAddr, uint8_t *pBuf, uint8_t countBytes)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	4613      	mov	r3, r2
 8000c62:	71bb      	strb	r3, [r7, #6]
	NRF_CSN_LOW;
 8000c64:	2200      	movs	r2, #0
 8000c66:	2108      	movs	r1, #8
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <NRF_ReadMBReg+0x4c>)
 8000c6a:	f001 fb67 	bl	800233c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &regAddr, 1, 1000);
 8000c6e:	1df9      	adds	r1, r7, #7
 8000c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c74:	2201      	movs	r2, #1
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <NRF_ReadMBReg+0x50>)
 8000c78:	f002 f80d 	bl	8002c96 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pBuf, countBytes, 1000);
 8000c7c:	79bb      	ldrb	r3, [r7, #6]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c84:	6839      	ldr	r1, [r7, #0]
 8000c86:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <NRF_ReadMBReg+0x50>)
 8000c88:	f002 f939 	bl	8002efe <HAL_SPI_Receive>
	NRF_CSN_HIGH;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2108      	movs	r1, #8
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <NRF_ReadMBReg+0x4c>)
 8000c92:	f001 fb53 	bl	800233c <HAL_GPIO_WritePin>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40010800 	.word	0x40010800
 8000ca4:	2000033c 	.word	0x2000033c

08000ca8 <NRF_WriteMBReg>:

void NRF_WriteMBReg(uint8_t regAddr, uint8_t *pBuf, uint8_t countBytes)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = regAddr | W_REGISTER;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f043 0320 	orr.w	r3, r3, #32
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	73fb      	strb	r3, [r7, #15]

	NRF_CSN_LOW;
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2108      	movs	r1, #8
 8000cc6:	480f      	ldr	r0, [pc, #60]	; (8000d04 <NRF_WriteMBReg+0x5c>)
 8000cc8:	f001 fb38 	bl	800233c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 1000);
 8000ccc:	f107 010f 	add.w	r1, r7, #15
 8000cd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	480c      	ldr	r0, [pc, #48]	; (8000d08 <NRF_WriteMBReg+0x60>)
 8000cd8:	f001 ffdd 	bl	8002c96 <HAL_SPI_Transmit>
	NRF_Delay(1);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f001 f8a3 	bl	8001e28 <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, pBuf, countBytes, 1000);
 8000ce2:	79bb      	ldrb	r3, [r7, #6]
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	6839      	ldr	r1, [r7, #0]
 8000cec:	4806      	ldr	r0, [pc, #24]	; (8000d08 <NRF_WriteMBReg+0x60>)
 8000cee:	f001 ffd2 	bl	8002c96 <HAL_SPI_Transmit>
	NRF_CSN_HIGH;
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	4803      	ldr	r0, [pc, #12]	; (8000d04 <NRF_WriteMBReg+0x5c>)
 8000cf8:	f001 fb20 	bl	800233c <HAL_GPIO_WritePin>
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40010800 	.word	0x40010800
 8000d08:	2000033c 	.word	0x2000033c

08000d0c <NRF_FlushRX>:

void NRF_FlushRX(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000d12:	23e2      	movs	r3, #226	; 0xe2
 8000d14:	713b      	strb	r3, [r7, #4]

  NRF_CSN_LOW;
 8000d16:	2200      	movs	r2, #0
 8000d18:	2108      	movs	r1, #8
 8000d1a:	480b      	ldr	r0, [pc, #44]	; (8000d48 <NRF_FlushRX+0x3c>)
 8000d1c:	f001 fb0e 	bl	800233c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000d20:	1d39      	adds	r1, r7, #4
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	2201      	movs	r2, #1
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <NRF_FlushRX+0x40>)
 8000d2a:	f001 ffb4 	bl	8002c96 <HAL_SPI_Transmit>
  NRF_Delay(1);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f001 f87a 	bl	8001e28 <HAL_Delay>

  NRF_CSN_HIGH;
 8000d34:	2201      	movs	r2, #1
 8000d36:	2108      	movs	r1, #8
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <NRF_FlushRX+0x3c>)
 8000d3a:	f001 faff 	bl	800233c <HAL_GPIO_WritePin>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	2000033c 	.word	0x2000033c

08000d50 <NRF_FlushTX>:

void NRF_FlushTX(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 8000d56:	23e1      	movs	r3, #225	; 0xe1
 8000d58:	713b      	strb	r3, [r7, #4]

  NRF_CSN_LOW;
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	480b      	ldr	r0, [pc, #44]	; (8000d8c <NRF_FlushTX+0x3c>)
 8000d60:	f001 faec 	bl	800233c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000d64:	1d39      	adds	r1, r7, #4
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4808      	ldr	r0, [pc, #32]	; (8000d90 <NRF_FlushTX+0x40>)
 8000d6e:	f001 ff92 	bl	8002c96 <HAL_SPI_Transmit>
  NRF_Delay(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f001 f858 	bl	8001e28 <HAL_Delay>

  NRF_CSN_HIGH;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <NRF_FlushTX+0x3c>)
 8000d7e:	f001 fadd 	bl	800233c <HAL_GPIO_WritePin>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40010800 	.word	0x40010800
 8000d90:	2000033c 	.word	0x2000033c

08000d94 <NRF_RX_Mode>:

void NRF_RX_Mode(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  uint8_t regval = 0x00;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  regval = NRF_ReadReg(NRF_REG_CONFIG);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff fecc 	bl	8000b3c <NRF_ReadReg>
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f043 0303 	orr.w	r3, r3, #3
 8000dae:	71fb      	strb	r3, [r7, #7]

  NRF_WriteReg(NRF_REG_CONFIG, regval);
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	4619      	mov	r1, r3
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fef5 	bl	8000ba4 <NRF_WriteReg>

  if(!(regval & _BV(PWR_UP)))
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <NRF_RX_Mode+0x36>
  	HAL_Delay(5);
 8000dc4:	2005      	movs	r0, #5
 8000dc6:	f001 f82f 	bl	8001e28 <HAL_Delay>

  NRF_CE_HIGH;
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4808      	ldr	r0, [pc, #32]	; (8000df0 <NRF_RX_Mode+0x5c>)
 8000dd0:	f001 fab4 	bl	800233c <HAL_GPIO_WritePin>

  HAL_Delay(1);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f001 f827 	bl	8001e28 <HAL_Delay>

  NRF_FlushRX();
 8000dda:	f7ff ff97 	bl	8000d0c <NRF_FlushRX>
  NRF_FlushTX();
 8000dde:	f7ff ffb7 	bl	8000d50 <NRF_FlushTX>

  HAL_Delay(5);
 8000de2:	2005      	movs	r0, #5
 8000de4:	f001 f820 	bl	8001e28 <HAL_Delay>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40010800 	.word	0x40010800

08000df4 <NRF_TX_Mode>:

void NRF_TX_Mode(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
	NRF_CE_LOW;
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	481a      	ldr	r0, [pc, #104]	; (8000e68 <NRF_TX_Mode+0x74>)
 8000e00:	f001 fa9c 	bl	800233c <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8000e04:	200f      	movs	r0, #15
 8000e06:	f001 f80f 	bl	8001e28 <HAL_Delay>

	uint8_t config = NRF_ReadReg(NRF_REG_CONFIG);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fe96 	bl	8000b3c <NRF_ReadReg>
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]

	if(!(config & _BV(PWR_UP)))
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10b      	bne.n	8000e36 <NRF_TX_Mode+0x42>
	{
		config |= _BV(PWR_UP);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	71fb      	strb	r3, [r7, #7]
		NRF_WriteReg(NRF_REG_CONFIG, config);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff feba 	bl	8000ba4 <NRF_WriteReg>
		HAL_Delay(5); //1.5ms
 8000e30:	2005      	movs	r0, #5
 8000e32:	f000 fff9 	bl	8001e28 <HAL_Delay>
	}

	config = NRF_ReadReg(NRF_REG_CONFIG);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fe80 	bl	8000b3c <NRF_ReadReg>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	71fb      	strb	r3, [r7, #7]
	config &= ~_BV(PRIM_RX);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f023 0301 	bic.w	r3, r3, #1
 8000e46:	71fb      	strb	r3, [r7, #7]
	NRF_WriteReg(NRF_REG_CONFIG, config);
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff fea9 	bl	8000ba4 <NRF_WriteReg>

	NRF_FlushRX();
 8000e52:	f7ff ff5b 	bl	8000d0c <NRF_FlushRX>
	NRF_FlushTX();
 8000e56:	f7ff ff7b 	bl	8000d50 <NRF_FlushTX>

	HAL_Delay(5);
 8000e5a:	2005      	movs	r0, #5
 8000e5c:	f000 ffe4 	bl	8001e28 <HAL_Delay>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40010800 	.word	0x40010800

08000e6c <NRF_GetPacket>:


void NRF_GetPacket(uint8_t *buf)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af02      	add	r7, sp, #8
 8000e72:	6078      	str	r0, [r7, #4]
	uint8_t nop = 0xFF;
 8000e74:	23ff      	movs	r3, #255	; 0xff
 8000e76:	733b      	strb	r3, [r7, #12]
	uint8_t reg = R_RX_PAYLOAD;
 8000e78:	2361      	movs	r3, #97	; 0x61
 8000e7a:	72fb      	strb	r3, [r7, #11]
	uint8_t status = NRF_ReadReg(NRF_REG_STATUS);
 8000e7c:	2007      	movs	r0, #7
 8000e7e:	f7ff fe5d 	bl	8000b3c <NRF_ReadReg>
 8000e82:	4603      	mov	r3, r0
 8000e84:	73fb      	strb	r3, [r7, #15]

	NRF_CSN_LOW;
 8000e86:	2200      	movs	r2, #0
 8000e88:	2108      	movs	r1, #8
 8000e8a:	4826      	ldr	r0, [pc, #152]	; (8000f24 <NRF_GetPacket+0xb8>)
 8000e8c:	f001 fa56 	bl	800233c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8000e90:	f107 010b 	add.w	r1, r7, #11
 8000e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4823      	ldr	r0, [pc, #140]	; (8000f28 <NRF_GetPacket+0xbc>)
 8000e9c:	f001 fefb 	bl	8002c96 <HAL_SPI_Transmit>

	uint8_t dataLength = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_TransmitReceive(&hspi1, &nop, &dataLength, 1, 1000);
 8000ea4:	f107 020a 	add.w	r2, r7, #10
 8000ea8:	f107 010c 	add.w	r1, r7, #12
 8000eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	481c      	ldr	r0, [pc, #112]	; (8000f28 <NRF_GetPacket+0xbc>)
 8000eb6:	f002 f92b 	bl	8003110 <HAL_SPI_TransmitReceive>

	if(dataLength == 0xff)
 8000eba:	7abb      	ldrb	r3, [r7, #10]
 8000ebc:	2bff      	cmp	r3, #255	; 0xff
 8000ebe:	d02c      	beq.n	8000f1a <NRF_GetPacket+0xae>
		return;


	HAL_SPI_TransmitReceive(&hspi1, &nop, buf, dataLength, 1000);
 8000ec0:	7abb      	ldrb	r3, [r7, #10]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	f107 010c 	add.w	r1, r7, #12
 8000ec8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4815      	ldr	r0, [pc, #84]	; (8000f28 <NRF_GetPacket+0xbc>)
 8000ed4:	f002 f91c 	bl	8003110 <HAL_SPI_TransmitReceive>

	uint8_t en_dpl = NRF_ReadReg(NRF_REG_FEATURE) & (1<<(2));
 8000ed8:	201d      	movs	r0, #29
 8000eda:	f7ff fe2f 	bl	8000b3c <NRF_ReadReg>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	73bb      	strb	r3, [r7, #14]
	if(en_dpl)
 8000ee6:	7bbb      	ldrb	r3, [r7, #14]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00c      	beq.n	8000f06 <NRF_GetPacket+0x9a>
	{
		uint8_t blank = 32 - dataLength;
 8000eec:	7abb      	ldrb	r3, [r7, #10]
 8000eee:	f1c3 0320 	rsb	r3, r3, #32
 8000ef2:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&hspi1, &nop, blank, 1000);
 8000ef4:	7b7b      	ldrb	r3, [r7, #13]
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	f107 010c 	add.w	r1, r7, #12
 8000efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <NRF_GetPacket+0xbc>)
 8000f02:	f001 fec8 	bl	8002c96 <HAL_SPI_Transmit>
	}

	NRF_CSN_HIGH;
 8000f06:	2201      	movs	r2, #1
 8000f08:	2108      	movs	r1, #8
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <NRF_GetPacket+0xb8>)
 8000f0c:	f001 fa16 	bl	800233c <HAL_GPIO_WritePin>
	NRF_WriteReg(NRF_REG_STATUS, _BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS));
 8000f10:	2170      	movs	r1, #112	; 0x70
 8000f12:	2007      	movs	r0, #7
 8000f14:	f7ff fe46 	bl	8000ba4 <NRF_WriteReg>
 8000f18:	e000      	b.n	8000f1c <NRF_GetPacket+0xb0>
		return;
 8000f1a:	bf00      	nop
}
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40010800 	.word	0x40010800
 8000f28:	2000033c 	.word	0x2000033c

08000f2c <NRF_SendPacket>:

int8_t NRF_SendPacket(uint8_t *receiverAddress, uint8_t *buf, uint8_t writeType)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	4613      	mov	r3, r2
 8000f38:	71fb      	strb	r3, [r7, #7]
	if(receiverAddress != NULL)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d004      	beq.n	8000f4a <NRF_SendPacket+0x1e>
		NRF_WriteMBReg(NRF_REG_TX_ADDR, receiverAddress, 5);
 8000f40:	2205      	movs	r2, #5
 8000f42:	68f9      	ldr	r1, [r7, #12]
 8000f44:	2010      	movs	r0, #16
 8000f46:	f7ff feaf 	bl	8000ca8 <NRF_WriteMBReg>

	uint8_t dataLength = strlen(buf);
 8000f4a:	68b8      	ldr	r0, [r7, #8]
 8000f4c:	f7ff f900 	bl	8000150 <strlen>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	753b      	strb	r3, [r7, #20]
	if(dataLength > 29)
 8000f56:	7d3b      	ldrb	r3, [r7, #20]
 8000f58:	2b1d      	cmp	r3, #29
 8000f5a:	d902      	bls.n	8000f62 <NRF_SendPacket+0x36>
		return -2;
 8000f5c:	f06f 0301 	mvn.w	r3, #1
 8000f60:	e069      	b.n	8001036 <NRF_SendPacket+0x10a>

	NRF_CSN_LOW;
 8000f62:	2200      	movs	r2, #0
 8000f64:	2108      	movs	r1, #8
 8000f66:	4836      	ldr	r0, [pc, #216]	; (8001040 <NRF_SendPacket+0x114>)
 8000f68:	f001 f9e8 	bl	800233c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &writeType, 1, 1000);
 8000f6c:	1df9      	adds	r1, r7, #7
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	2201      	movs	r2, #1
 8000f74:	4833      	ldr	r0, [pc, #204]	; (8001044 <NRF_SendPacket+0x118>)
 8000f76:	f001 fe8e 	bl	8002c96 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &dataLength, 1, 1000);
 8000f7a:	f107 0114 	add.w	r1, r7, #20
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	2201      	movs	r2, #1
 8000f84:	482f      	ldr	r0, [pc, #188]	; (8001044 <NRF_SendPacket+0x118>)
 8000f86:	f001 fe86 	bl	8002c96 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, dataLength, 1000);
 8000f8a:	7d3b      	ldrb	r3, [r7, #20]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	482b      	ldr	r0, [pc, #172]	; (8001044 <NRF_SendPacket+0x118>)
 8000f96:	f001 fe7e 	bl	8002c96 <HAL_SPI_Transmit>

	bool en_dpl = NRF_ReadReg(NRF_REG_FEATURE) & _BV(EN_DPL);
 8000f9a:	201d      	movs	r0, #29
 8000f9c:	f7ff fdce 	bl	8000b3c <NRF_ReadReg>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	bf14      	ite	ne
 8000faa:	2301      	movne	r3, #1
 8000fac:	2300      	moveq	r3, #0
 8000fae:	75fb      	strb	r3, [r7, #23]
	if(!en_dpl)
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	f083 0301 	eor.w	r3, r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00b      	beq.n	8000fd4 <NRF_SendPacket+0xa8>
	{
		uint8_t blank = 32 - dataLength;
 8000fbc:	7d3b      	ldrb	r3, [r7, #20]
 8000fbe:	f1c3 0320 	rsb	r3, r3, #32
 8000fc2:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi1, &NRF_CMD_NOP, blank, 1000);
 8000fc4:	7dbb      	ldrb	r3, [r7, #22]
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	491e      	ldr	r1, [pc, #120]	; (8001048 <NRF_SendPacket+0x11c>)
 8000fce:	481d      	ldr	r0, [pc, #116]	; (8001044 <NRF_SendPacket+0x118>)
 8000fd0:	f001 fe61 	bl	8002c96 <HAL_SPI_Transmit>
	}
	NRF_CSN_HIGH;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	4819      	ldr	r0, [pc, #100]	; (8001040 <NRF_SendPacket+0x114>)
 8000fda:	f001 f9af 	bl	800233c <HAL_GPIO_WritePin>

	NRF_CE_HIGH;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	4817      	ldr	r0, [pc, #92]	; (8001040 <NRF_SendPacket+0x114>)
 8000fe4:	f001 f9aa 	bl	800233c <HAL_GPIO_WritePin>
	DelayMicro(150);
 8000fe8:	2096      	movs	r0, #150	; 0x96
 8000fea:	f000 f8dd 	bl	80011a8 <DelayMicro>
	//NRF_Delay(10);
	NRF_CE_LOW;
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2110      	movs	r1, #16
 8000ff2:	4813      	ldr	r0, [pc, #76]	; (8001040 <NRF_SendPacket+0x114>)
 8000ff4:	f001 f9a2 	bl	800233c <HAL_GPIO_WritePin>

	uint8_t status = NRF_ReadReg(NRF_REG_STATUS);
 8000ff8:	2007      	movs	r0, #7
 8000ffa:	f7ff fd9f 	bl	8000b3c <NRF_ReadReg>
 8000ffe:	4603      	mov	r3, r0
 8001000:	757b      	strb	r3, [r7, #21]

	if(status & _BV(TX_DS))
 8001002:	7d7b      	ldrb	r3, [r7, #21]
 8001004:	f003 0320 	and.w	r3, r3, #32
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <NRF_SendPacket+0xec>
	{
		NRF_WriteReg(NRF_REG_STATUS, 0x20);
 800100c:	2120      	movs	r1, #32
 800100e:	2007      	movs	r0, #7
 8001010:	f7ff fdc8 	bl	8000ba4 <NRF_WriteReg>
		return 1;
 8001014:	2301      	movs	r3, #1
 8001016:	e00e      	b.n	8001036 <NRF_SendPacket+0x10a>
	}

	if(status & _BV(MAX_RT))
 8001018:	7d7b      	ldrb	r3, [r7, #21]
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	2b00      	cmp	r3, #0
 8001020:	d007      	beq.n	8001032 <NRF_SendPacket+0x106>
	{
		NRF_WriteReg(NRF_REG_STATUS, 0x10);
 8001022:	2110      	movs	r1, #16
 8001024:	2007      	movs	r0, #7
 8001026:	f7ff fdbd 	bl	8000ba4 <NRF_WriteReg>
		NRF_FlushTX();
 800102a:	f7ff fe91 	bl	8000d50 <NRF_FlushTX>
		return 0;
 800102e:	2300      	movs	r3, #0
 8001030:	e001      	b.n	8001036 <NRF_SendPacket+0x10a>
	}

	return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40010800 	.word	0x40010800
 8001044:	2000033c 	.word	0x2000033c
 8001048:	20000000 	.word	0x20000000

0800104c <NRF_SendMessage>:

int8_t NRF_SendMessage(uint8_t *receiverAddress, uint8_t *buf)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b08d      	sub	sp, #52	; 0x34
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	NRF_WriteMBReg(NRF_REG_TX_ADDR, receiverAddress, 5);
 8001056:	2205      	movs	r2, #5
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	2010      	movs	r0, #16
 800105c:	f7ff fe24 	bl	8000ca8 <NRF_WriteMBReg>

	uint16_t dataLength = strlen(buf);
 8001060:	6838      	ldr	r0, [r7, #0]
 8001062:	f7ff f875 	bl	8000150 <strlen>
 8001066:	4603      	mov	r3, r0
 8001068:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint8_t amountPackets = ceil((double)dataLength / 25.0);
 800106a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f9b9 	bl	80003e4 <__aeabi_ui2d>
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <NRF_SendMessage+0xe0>)
 8001078:	f7ff fb58 	bl	800072c <__aeabi_ddiv>
 800107c:	4603      	mov	r3, r0
 800107e:	460c      	mov	r4, r1
 8001080:	4618      	mov	r0, r3
 8001082:	4621      	mov	r1, r4
 8001084:	f003 f92c 	bl	80042e0 <ceil>
 8001088:	4603      	mov	r3, r0
 800108a:	460c      	mov	r4, r1
 800108c:	4618      	mov	r0, r3
 800108e:	4621      	mov	r1, r4
 8001090:	f7ff fcbc 	bl	8000a0c <__aeabi_d2uiz>
 8001094:	4603      	mov	r3, r0
 8001096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	NRF_TX_Mode();
 800109a:	f7ff feab 	bl	8000df4 <NRF_TX_Mode>
	HAL_Delay(10);
 800109e:	200a      	movs	r0, #10
 80010a0:	f000 fec2 	bl	8001e28 <HAL_Delay>
	for(uint8_t i = 0; i < amountPackets; ++i)
 80010a4:	2300      	movs	r3, #0
 80010a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010aa:	e02f      	b.n	800110c <NRF_SendMessage+0xc0>
	{
		uint8_t currentData[30] = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	221e      	movs	r2, #30
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 fce6 	bl	8003a86 <memset>
		memcpy(currentData, buf + (25 * i), 25);
 80010ba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	009a      	lsls	r2, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	1899      	adds	r1, r3, r2
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2219      	movs	r2, #25
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fccb 	bl	8003a70 <memcpy>

		int8_t result = NRF_SendPacket(NULL, currentData, W_TX_PAYLOAD);
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	22a0      	movs	r2, #160	; 0xa0
 80010e0:	4619      	mov	r1, r3
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ff22 	bl	8000f2c <NRF_SendPacket>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

		if(!result)
 80010ee:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <NRF_SendMessage+0xb0>
			return -1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e013      	b.n	8001124 <NRF_SendMessage+0xd8>

		//TODO: Уменьшить значение
		HAL_Delay(50);
 80010fc:	2032      	movs	r0, #50	; 0x32
 80010fe:	f000 fe93 	bl	8001e28 <HAL_Delay>
	for(uint8_t i = 0; i < amountPackets; ++i)
 8001102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001106:	3301      	adds	r3, #1
 8001108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800110c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001110:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001114:	429a      	cmp	r2, r3
 8001116:	d3c9      	bcc.n	80010ac <NRF_SendMessage+0x60>
	}
	HAL_Delay(10);
 8001118:	200a      	movs	r0, #10
 800111a:	f000 fe85 	bl	8001e28 <HAL_Delay>
	NRF_RX_Mode();
 800111e:	f7ff fe39 	bl	8000d94 <NRF_RX_Mode>

	return 1;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3734      	adds	r7, #52	; 0x34
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	40390000 	.word	0x40390000

08001130 <NRF_IsAvailablePacket>:

bool NRF_IsAvailablePacket(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	return !(NRF_ReadReg(NRF_REG_FIFO_STATUS) & _BV(RX_EMPTY));
 8001134:	2017      	movs	r0, #23
 8001136:	f7ff fd01 	bl	8000b3c <NRF_ReadReg>
 800113a:	4603      	mov	r3, r0
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf0c      	ite	eq
 8001144:	2301      	moveq	r3, #1
 8001146:	2300      	movne	r3, #0
 8001148:	b2db      	uxtb	r3, r3
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <NRF_ClearMessageBuff>:
{
	return NRF_AvailableMessage;
}

void NRF_ClearMessageBuff(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
	for(int i = 0; i < NRF_MessageBuffSize; ++i)
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	e007      	b.n	800116c <NRF_ClearMessageBuff+0x1c>
		NRF_MessageBuff[i] = 0;
 800115c:	4a08      	ldr	r2, [pc, #32]	; (8001180 <NRF_ClearMessageBuff+0x30>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NRF_MessageBuffSize; ++i)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3301      	adds	r3, #1
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001172:	dbf3      	blt.n	800115c <NRF_ClearMessageBuff+0xc>
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000094 	.word	0x20000094

08001184 <NRF_CallbackFunc>:

void NRF_CallbackFunc(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
		//HAL_UART_Transmit(&huart1, buff, strlen(buff), 100);

	//char *buff = "_IRQ: ";
	//HAL_UART_Transmit(&huart1, buff, strlen(buff), 100);

	if(!(NRF_ReadReg(NRF_REG_FIFO_STATUS) & _BV(RX_EMPTY)))
 8001188:	2017      	movs	r0, #23
 800118a:	f7ff fcd7 	bl	8000b3c <NRF_ReadReg>
 800118e:	4603      	mov	r3, r0
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <NRF_CallbackFunc+0x1a>
	{
		NRF_AvailablePacket = true;
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <NRF_CallbackFunc+0x20>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
		char *buff = "MAX_RT\n";
		HAL_UART_Transmit(&huart1, buff, strlen(buff), 100);
	}
*/

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000090 	.word	0x20000090

080011a8 <DelayMicro>:

__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  micros *= (SystemCoreClock / 1000000) / 9;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <DelayMicro+0x34>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <DelayMicro+0x38>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	0ddb      	lsrs	r3, r3, #23
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	607b      	str	r3, [r7, #4]

  /* Wait till done */

  while (micros--) ;
 80011c4:	bf00      	nop
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1fa      	bne.n	80011c6 <DelayMicro+0x1e>

}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000004 	.word	0x20000004
 80011e0:	ee9bfab5 	.word	0xee9bfab5

080011e4 <SR_Set>:
extern SPI_HandleTypeDef hspi2;

uint16_t shiftRegisterValue = 0x00;

inline void SR_Set(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ee:	4802      	ldr	r0, [pc, #8]	; (80011f8 <SR_Set+0x14>)
 80011f0:	f001 f8a4 	bl	800233c <HAL_GPIO_WritePin>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40010c00 	.word	0x40010c00

080011fc <SR_Reset>:

inline void SR_Reset(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001206:	4802      	ldr	r0, [pc, #8]	; (8001210 <SR_Reset+0x14>)
 8001208:	f001 f898 	bl	800233c <HAL_GPIO_WritePin>
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40010c00 	.word	0x40010c00

08001214 <SR_SetValue>:

void SR_SetValue(uint16_t value)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	80fb      	strh	r3, [r7, #6]
	uint8_t txBuff[2] = {0};
 800121e:	2300      	movs	r3, #0
 8001220:	81bb      	strh	r3, [r7, #12]
	txBuff[0] = (uint8_t)(value >> 8);
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	b29b      	uxth	r3, r3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	733b      	strb	r3, [r7, #12]
	txBuff[1] = (uint8_t)value;
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi2, txBuff, 2, 5000);
 8001232:	f107 010c 	add.w	r1, r7, #12
 8001236:	f241 3388 	movw	r3, #5000	; 0x1388
 800123a:	2202      	movs	r2, #2
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <SR_SetValue+0x40>)
 800123e:	f001 fd2a 	bl	8002c96 <HAL_SPI_Transmit>
	SR_Reset();
 8001242:	f7ff ffdb 	bl	80011fc <SR_Reset>
	SR_Set();
 8001246:	f7ff ffcd 	bl	80011e4 <SR_Set>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200002a4 	.word	0x200002a4

08001258 <SR_SetPin>:

void SR_SetPin(uint16_t pin)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
	shiftRegisterValue |= 1 << pin;
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	2201      	movs	r2, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <SR_SetPin+0x38>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21b      	sxth	r3, r3
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SR_SetPin+0x38>)
 800127a:	801a      	strh	r2, [r3, #0]
	SR_SetValue(shiftRegisterValue);
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SR_SetPin+0x38>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ffc7 	bl	8001214 <SR_SetValue>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000294 	.word	0x20000294

08001294 <SR_ResetPin>:

void SR_ResetPin(uint16_t pin)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
	shiftRegisterValue &= ~(1 << pin);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	2201      	movs	r2, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <SR_ResetPin+0x3c>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	4013      	ands	r3, r2
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SR_ResetPin+0x3c>)
 80012ba:	801a      	strh	r2, [r3, #0]
	SR_SetValue(shiftRegisterValue);
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SR_ResetPin+0x3c>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ffa7 	bl	8001214 <SR_SetValue>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000294 	.word	0x20000294

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80012da:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012dc:	f000 fd42 	bl	8001d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e0:	f000 f90c 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e4:	f000 f9e6 	bl	80016b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012e8:	f000 f94e 	bl	8001588 <MX_SPI1_Init>
  MX_SPI2_Init();
 80012ec:	f000 f982 	bl	80015f4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80012f0:	f000 f9b6 	bl	8001660 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF_SetDefaultSettings();
 80012f4:	f7ff fbaa 	bl	8000a4c <NRF_SetDefaultSettings>
  SR_SetValue(0x0000);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff ff8b 	bl	8001214 <SR_SetValue>

  /*
     * DEBUG
     */
    uint8_t status = NRF_ReadReg(NRF_REG_STATUS);
 80012fe:	2007      	movs	r0, #7
 8001300:	f7ff fc1c 	bl	8000b3c <NRF_ReadReg>
 8001304:	4603      	mov	r3, r0
 8001306:	f887 322e 	strb.w	r3, [r7, #558]	; 0x22e
    uint8_t rxAddrP0[5];
    NRF_ReadMBReg(NRF_REG_RX_ADDR_P0, rxAddrP0, 5);
 800130a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800130e:	2205      	movs	r2, #5
 8001310:	4619      	mov	r1, r3
 8001312:	200a      	movs	r0, #10
 8001314:	f7ff fc9e 	bl	8000c54 <NRF_ReadMBReg>
    uint8_t rxAddrP1[5];
    NRF_ReadMBReg(NRF_REG_RX_ADDR_P1, rxAddrP1, 5);
 8001318:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800131c:	2205      	movs	r2, #5
 800131e:	4619      	mov	r1, r3
 8001320:	200b      	movs	r0, #11
 8001322:	f7ff fc97 	bl	8000c54 <NRF_ReadMBReg>
    //rx addr p2-5
    uint8_t txAddr[5];
    NRF_ReadMBReg(NRF_REG_TX_ADDR, txAddr, 5);
 8001326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800132a:	2205      	movs	r2, #5
 800132c:	4619      	mov	r1, r3
 800132e:	2010      	movs	r0, #16
 8001330:	f7ff fc90 	bl	8000c54 <NRF_ReadMBReg>
    //rx payload width
    uint8_t enableAA = NRF_ReadReg(NRF_REG_EN_AA);
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff fc01 	bl	8000b3c <NRF_ReadReg>
 800133a:	4603      	mov	r3, r0
 800133c:	f887 322d 	strb.w	r3, [r7, #557]	; 0x22d
    uint8_t enableRXAddr = NRF_ReadReg(NRF_REG_EN_RXADDR);
 8001340:	2002      	movs	r0, #2
 8001342:	f7ff fbfb 	bl	8000b3c <NRF_ReadReg>
 8001346:	4603      	mov	r3, r0
 8001348:	f887 322c 	strb.w	r3, [r7, #556]	; 0x22c
    uint8_t setupAW = NRF_ReadReg(NRF_REG_SETUP_AW);
 800134c:	2003      	movs	r0, #3
 800134e:	f7ff fbf5 	bl	8000b3c <NRF_ReadReg>
 8001352:	4603      	mov	r3, r0
 8001354:	f887 322b 	strb.w	r3, [r7, #555]	; 0x22b
    uint8_t setuptRETR = NRF_ReadReg(NRF_REG_SETUP_RETR);
 8001358:	2004      	movs	r0, #4
 800135a:	f7ff fbef 	bl	8000b3c <NRF_ReadReg>
 800135e:	4603      	mov	r3, r0
 8001360:	f887 322a 	strb.w	r3, [r7, #554]	; 0x22a
    uint8_t channel = NRF_ReadReg(NRF_REG_RF_CH);
 8001364:	2005      	movs	r0, #5
 8001366:	f7ff fbe9 	bl	8000b3c <NRF_ReadReg>
 800136a:	4603      	mov	r3, r0
 800136c:	f887 3229 	strb.w	r3, [r7, #553]	; 0x229
    uint8_t rfSetup = NRF_ReadReg(NRF_REG_RF_SETUP);
 8001370:	2006      	movs	r0, #6
 8001372:	f7ff fbe3 	bl	8000b3c <NRF_ReadReg>
 8001376:	4603      	mov	r3, r0
 8001378:	f887 3228 	strb.w	r3, [r7, #552]	; 0x228
    uint8_t config = NRF_ReadReg(NRF_REG_CONFIG);
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff fbdd 	bl	8000b3c <NRF_ReadReg>
 8001382:	4603      	mov	r3, r0
 8001384:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
    uint8_t dynpd = NRF_ReadReg(NRF_REG_DYNPD);
 8001388:	201c      	movs	r0, #28
 800138a:	f7ff fbd7 	bl	8000b3c <NRF_ReadReg>
 800138e:	4603      	mov	r3, r0
 8001390:	f887 3226 	strb.w	r3, [r7, #550]	; 0x226
    uint8_t feature = NRF_ReadReg(NRF_REG_FEATURE);
 8001394:	201d      	movs	r0, #29
 8001396:	f7ff fbd1 	bl	8000b3c <NRF_ReadReg>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool sendAnswer = false;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
  while (1)
  {
  	if(NRF_IsAvailablePacket())
 80013a6:	f7ff fec3 	bl	8001130 <NRF_IsAvailablePacket>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <main+0xe2>
  		NRF_AvailablePacket = true;
 80013b0:	4b4a      	ldr	r3, [pc, #296]	; (80014dc <main+0x208>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]

  	if(NRF_AvailablePacket)
 80013b6:	4b49      	ldr	r3, [pc, #292]	; (80014dc <main+0x208>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d022      	beq.n	8001404 <main+0x130>
		{
			NRF_AvailablePacket = false;
 80013be:	4b47      	ldr	r3, [pc, #284]	; (80014dc <main+0x208>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]

			uint8_t readData[32] = {0};
 80013c4:	463b      	mov	r3, r7
 80013c6:	4618      	mov	r0, r3
 80013c8:	2320      	movs	r3, #32
 80013ca:	461a      	mov	r2, r3
 80013cc:	2100      	movs	r1, #0
 80013ce:	f002 fb5a 	bl	8003a86 <memset>
			NRF_GetPacket(&readData);
 80013d2:	463b      	mov	r3, r7
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fd49 	bl	8000e6c <NRF_GetPacket>

			strcat(NRF_MessageBuff, readData);
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4840      	ldr	r0, [pc, #256]	; (80014e0 <main+0x20c>)
 80013e0:	f002 fb7a 	bl	8003ad8 <strcat>

			if(strchr(NRF_MessageBuff, '\n') || strlen(NRF_MessageBuff) < 29)
 80013e4:	210a      	movs	r1, #10
 80013e6:	483e      	ldr	r0, [pc, #248]	; (80014e0 <main+0x20c>)
 80013e8:	f002 fb85 	bl	8003af6 <strchr>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d105      	bne.n	80013fe <main+0x12a>
 80013f2:	483b      	ldr	r0, [pc, #236]	; (80014e0 <main+0x20c>)
 80013f4:	f7fe feac 	bl	8000150 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b1c      	cmp	r3, #28
 80013fc:	d802      	bhi.n	8001404 <main+0x130>
				NRF_AvailableMessage = true;
 80013fe:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <main+0x210>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
		}

		if(NRF_AvailableMessage)
 8001404:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <main+0x210>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d027      	beq.n	800145c <main+0x188>
		{
			NRF_AvailableMessage = false;
 800140c:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <main+0x210>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
			sendAnswer = true;
 8001412:	2301      	movs	r3, #1
 8001414:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f

			InputMessageHandler(NRF_MessageBuff);
 8001418:	4831      	ldr	r0, [pc, #196]	; (80014e0 <main+0x20c>)
 800141a:	f000 f9f1 	bl	8001800 <InputMessageHandler>

			char buff[512] = {0};
 800141e:	463b      	mov	r3, r7
 8001420:	4618      	mov	r0, r3
 8001422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001426:	461a      	mov	r2, r3
 8001428:	2100      	movs	r1, #0
 800142a:	f002 fb2c 	bl	8003a86 <memset>
			sprintf(buff, "STM get message [%d]: %s", strlen(NRF_MessageBuff), NRF_MessageBuff);
 800142e:	482c      	ldr	r0, [pc, #176]	; (80014e0 <main+0x20c>)
 8001430:	f7fe fe8e 	bl	8000150 <strlen>
 8001434:	4602      	mov	r2, r0
 8001436:	4638      	mov	r0, r7
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <main+0x20c>)
 800143a:	492b      	ldr	r1, [pc, #172]	; (80014e8 <main+0x214>)
 800143c:	f002 fb2c 	bl	8003a98 <siprintf>
			HAL_UART_Transmit(&huart1, buff, strlen(buff), 1000);
 8001440:	463b      	mov	r3, r7
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe fe84 	bl	8000150 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	4639      	mov	r1, r7
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	4826      	ldr	r0, [pc, #152]	; (80014ec <main+0x218>)
 8001454:	f002 f925 	bl	80036a2 <HAL_UART_Transmit>

			NRF_ClearMessageBuff();
 8001458:	f7ff fe7a 	bl	8001150 <NRF_ClearMessageBuff>
		}

		if(sendAnswer)
 800145c:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0a0      	beq.n	80013a6 <main+0xd2>
		{
			sendAnswer = false;
 8001464:	2300      	movs	r3, #0
 8001466:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
			char buff[128] = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	4618      	mov	r0, r3
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	461a      	mov	r2, r3
 8001472:	2100      	movs	r1, #0
 8001474:	f002 fb07 	bl	8003a86 <memset>
			uint8_t *sendBuff = "Hello";
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <main+0x21c>)
 800147a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
			uint8_t localHub1[] = {'2', 'N', 'o', 'd', 'e'};
 800147e:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <main+0x220>)
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001488:	6018      	str	r0, [r3, #0]
 800148a:	3304      	adds	r3, #4
 800148c:	7019      	strb	r1, [r3, #0]

			uint8_t sendMessage = NRF_SendMessage(localHub1, sendBuff);
 800148e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001492:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fdd8 	bl	800104c <NRF_SendMessage>
 800149c:	4603      	mov	r3, r0
 800149e:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

			sprintf(buff, "STM send message (%d) [%d]: %s",sendMessage, strlen(sendBuff), sendBuff);
 80014a2:	f897 421f 	ldrb.w	r4, [r7, #543]	; 0x21f
 80014a6:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80014aa:	f7fe fe51 	bl	8000150 <strlen>
 80014ae:	4602      	mov	r2, r0
 80014b0:	4638      	mov	r0, r7
 80014b2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	4613      	mov	r3, r2
 80014ba:	4622      	mov	r2, r4
 80014bc:	490e      	ldr	r1, [pc, #56]	; (80014f8 <main+0x224>)
 80014be:	f002 faeb 	bl	8003a98 <siprintf>
			HAL_UART_Transmit(&huart1, buff, strlen(buff), 1000);
 80014c2:	463b      	mov	r3, r7
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe fe43 	bl	8000150 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4639      	mov	r1, r7
 80014d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <main+0x218>)
 80014d6:	f002 f8e4 	bl	80036a2 <HAL_UART_Transmit>
  	if(NRF_IsAvailablePacket())
 80014da:	e764      	b.n	80013a6 <main+0xd2>
 80014dc:	20000090 	.word	0x20000090
 80014e0:	20000094 	.word	0x20000094
 80014e4:	20000091 	.word	0x20000091
 80014e8:	08004408 	.word	0x08004408
 80014ec:	200002fc 	.word	0x200002fc
 80014f0:	08004424 	.word	0x08004424
 80014f4:	080043f8 	.word	0x080043f8
 80014f8:	0800442c 	.word	0x0800442c

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b090      	sub	sp, #64	; 0x40
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0318 	add.w	r3, r7, #24
 8001506:	2228      	movs	r2, #40	; 0x28
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fabb 	bl	8003a86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151e:	2301      	movs	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001526:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152c:	2301      	movs	r3, #1
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001530:	2302      	movs	r3, #2
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001538:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800153a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	4618      	mov	r0, r3
 8001546:	f000 ff29 	bl	800239c <HAL_RCC_OscConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001550:	f000 fa46 	bl	80019e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001554:	230f      	movs	r3, #15
 8001556:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001558:	2302      	movs	r3, #2
 800155a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001564:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2102      	movs	r1, #2
 800156e:	4618      	mov	r0, r3
 8001570:	f001 f994 	bl	800289c <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800157a:	f000 fa31 	bl	80019e0 <Error_Handler>
  }
}
 800157e:	bf00      	nop
 8001580:	3740      	adds	r7, #64	; 0x40
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <MX_SPI1_Init+0x64>)
 800158e:	4a18      	ldr	r2, [pc, #96]	; (80015f0 <MX_SPI1_Init+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MX_SPI1_Init+0x64>)
 8001594:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001598:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_SPI1_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_SPI1_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_SPI1_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_SPI1_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_SPI1_Init+0x64>)
 80015b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_SPI1_Init+0x64>)
 80015bc:	2220      	movs	r2, #32
 80015be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <MX_SPI1_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_SPI1_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <MX_SPI1_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_SPI1_Init+0x64>)
 80015d4:	220a      	movs	r2, #10
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <MX_SPI1_Init+0x64>)
 80015da:	f001 fafb 	bl	8002bd4 <HAL_SPI_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015e4:	f000 f9fc 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2000033c 	.word	0x2000033c
 80015f0:	40013000 	.word	0x40013000

080015f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_SPI2_Init+0x64>)
 80015fa:	4a18      	ldr	r2, [pc, #96]	; (800165c <MX_SPI2_Init+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_SPI2_Init+0x64>)
 8001600:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001604:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_SPI2_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_SPI2_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_SPI2_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_SPI2_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_SPI2_Init+0x64>)
 8001620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001624:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_SPI2_Init+0x64>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_SPI2_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_SPI2_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <MX_SPI2_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_SPI2_Init+0x64>)
 8001640:	220a      	movs	r2, #10
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_SPI2_Init+0x64>)
 8001646:	f001 fac5 	bl	8002bd4 <HAL_SPI_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001650:	f000 f9c6 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200002a4 	.word	0x200002a4
 800165c:	40003800 	.word	0x40003800

08001660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <MX_USART1_UART_Init+0x50>)
 8001668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001698:	f001 ffb6 	bl	8003608 <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016a2:	f000 f99d 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200002fc 	.word	0x200002fc
 80016b0:	40013800 	.word	0x40013800

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c8:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <MX_GPIO_Init+0x120>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a41      	ldr	r2, [pc, #260]	; (80017d4 <MX_GPIO_Init+0x120>)
 80016ce:	f043 0310 	orr.w	r3, r3, #16
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <MX_GPIO_Init+0x120>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <MX_GPIO_Init+0x120>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a3b      	ldr	r2, [pc, #236]	; (80017d4 <MX_GPIO_Init+0x120>)
 80016e6:	f043 0320 	orr.w	r3, r3, #32
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <MX_GPIO_Init+0x120>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <MX_GPIO_Init+0x120>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a35      	ldr	r2, [pc, #212]	; (80017d4 <MX_GPIO_Init+0x120>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <MX_GPIO_Init+0x120>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001710:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <MX_GPIO_Init+0x120>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a2f      	ldr	r2, [pc, #188]	; (80017d4 <MX_GPIO_Init+0x120>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <MX_GPIO_Init+0x120>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BuildInLed_GPIO_Port, BuildInLed_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172e:	482a      	ldr	r0, [pc, #168]	; (80017d8 <MX_GPIO_Init+0x124>)
 8001730:	f000 fe04 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CSN_Pin|SPI1_CE_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2118      	movs	r1, #24
 8001738:	4828      	ldr	r0, [pc, #160]	; (80017dc <MX_GPIO_Init+0x128>)
 800173a:	f000 fdff 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001744:	4826      	ldr	r0, [pc, #152]	; (80017e0 <MX_GPIO_Init+0x12c>)
 8001746:	f000 fdf9 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BuildInLed_Pin */
  GPIO_InitStruct.Pin = BuildInLed_Pin;
 800174a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2302      	movs	r3, #2
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BuildInLed_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4619      	mov	r1, r3
 8001762:	481d      	ldr	r0, [pc, #116]	; (80017d8 <MX_GPIO_Init+0x124>)
 8001764:	f000 fc90 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 8001768:	2304      	movs	r3, #4
 800176a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <MX_GPIO_Init+0x130>)
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4619      	mov	r1, r3
 800177a:	4818      	ldr	r0, [pc, #96]	; (80017dc <MX_GPIO_Init+0x128>)
 800177c:	f000 fc84 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CSN_Pin SPI1_CE_Pin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|SPI1_CE_Pin;
 8001780:	2318      	movs	r3, #24
 8001782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2302      	movs	r3, #2
 800178e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	4811      	ldr	r0, [pc, #68]	; (80017dc <MX_GPIO_Init+0x128>)
 8001798:	f000 fc76 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800179c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4619      	mov	r1, r3
 80017b4:	480a      	ldr	r0, [pc, #40]	; (80017e0 <MX_GPIO_Init+0x12c>)
 80017b6:	f000 fc67 	bl	8002088 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	2008      	movs	r0, #8
 80017c0:	f000 fc2b 	bl	800201a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80017c4:	2008      	movs	r0, #8
 80017c6:	f000 fc44 	bl	8002052 <HAL_NVIC_EnableIRQ>

}
 80017ca:	bf00      	nop
 80017cc:	3720      	adds	r7, #32
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40011000 	.word	0x40011000
 80017dc:	40010800 	.word	0x40010800
 80017e0:	40010c00 	.word	0x40010c00
 80017e4:	10210000 	.word	0x10210000

080017e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
		NRF_CallbackFunc();
 80017f2:	f7ff fcc7 	bl	8001184 <NRF_CallbackFunc>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <InputMessageHandler>:

void InputMessageHandler(char *message)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	uint8_t cursorPosition = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]
	uint8_t messageLen = strlen(message);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7fe fc9f 	bl	8000150 <strlen>
 8001812:	4603      	mov	r3, r0
 8001814:	73bb      	strb	r3, [r7, #14]

	//TODO: Организовать цикл
	char currentValue = message[cursorPosition];
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	737b      	strb	r3, [r7, #13]

	switch(currentValue)
 8001820:	7b7b      	ldrb	r3, [r7, #13]
 8001822:	3b01      	subs	r3, #1
 8001824:	2b21      	cmp	r3, #33	; 0x21
 8001826:	f200 80d5 	bhi.w	80019d4 <InputMessageHandler+0x1d4>
 800182a:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <InputMessageHandler+0x30>)
 800182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001830:	080018b9 	.word	0x080018b9
 8001834:	080018c7 	.word	0x080018c7
 8001838:	080018d5 	.word	0x080018d5
 800183c:	080018dd 	.word	0x080018dd
 8001840:	080018e5 	.word	0x080018e5
 8001844:	080018ed 	.word	0x080018ed
 8001848:	080018f5 	.word	0x080018f5
 800184c:	080018fd 	.word	0x080018fd
 8001850:	08001905 	.word	0x08001905
 8001854:	0800190d 	.word	0x0800190d
 8001858:	08001915 	.word	0x08001915
 800185c:	0800191d 	.word	0x0800191d
 8001860:	08001925 	.word	0x08001925
 8001864:	0800192d 	.word	0x0800192d
 8001868:	08001935 	.word	0x08001935
 800186c:	0800193d 	.word	0x0800193d
 8001870:	08001945 	.word	0x08001945
 8001874:	0800194d 	.word	0x0800194d
 8001878:	08001955 	.word	0x08001955
 800187c:	0800195d 	.word	0x0800195d
 8001880:	08001965 	.word	0x08001965
 8001884:	0800196d 	.word	0x0800196d
 8001888:	08001975 	.word	0x08001975
 800188c:	0800197d 	.word	0x0800197d
 8001890:	08001985 	.word	0x08001985
 8001894:	0800198d 	.word	0x0800198d
 8001898:	08001995 	.word	0x08001995
 800189c:	0800199d 	.word	0x0800199d
 80018a0:	080019a5 	.word	0x080019a5
 80018a4:	080019ad 	.word	0x080019ad
 80018a8:	080019b5 	.word	0x080019b5
 80018ac:	080019bd 	.word	0x080019bd
 80018b0:	080019c5 	.word	0x080019c5
 80018b4:	080019cd 	.word	0x080019cd
	{
		case 0x01: HAL_GPIO_WritePin(BuildInLed_GPIO_Port, BuildInLed_Pin, 0); break;
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018be:	4847      	ldr	r0, [pc, #284]	; (80019dc <InputMessageHandler+0x1dc>)
 80018c0:	f000 fd3c 	bl	800233c <HAL_GPIO_WritePin>
 80018c4:	e086      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x02: HAL_GPIO_WritePin(BuildInLed_GPIO_Port, BuildInLed_Pin, 1); break;
 80018c6:	2201      	movs	r2, #1
 80018c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018cc:	4843      	ldr	r0, [pc, #268]	; (80019dc <InputMessageHandler+0x1dc>)
 80018ce:	f000 fd35 	bl	800233c <HAL_GPIO_WritePin>
 80018d2:	e07f      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x03: SR_SetPin(0); break;
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff fcbf 	bl	8001258 <SR_SetPin>
 80018da:	e07b      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x04: SR_ResetPin(0); break;
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff fcd9 	bl	8001294 <SR_ResetPin>
 80018e2:	e077      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x05: SR_SetPin(1); break;
 80018e4:	2001      	movs	r0, #1
 80018e6:	f7ff fcb7 	bl	8001258 <SR_SetPin>
 80018ea:	e073      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x06: SR_ResetPin(1); break;
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7ff fcd1 	bl	8001294 <SR_ResetPin>
 80018f2:	e06f      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x07: SR_SetPin(2); break;
 80018f4:	2002      	movs	r0, #2
 80018f6:	f7ff fcaf 	bl	8001258 <SR_SetPin>
 80018fa:	e06b      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x08: SR_ResetPin(2); break;
 80018fc:	2002      	movs	r0, #2
 80018fe:	f7ff fcc9 	bl	8001294 <SR_ResetPin>
 8001902:	e067      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x09: SR_SetPin(3); break;
 8001904:	2003      	movs	r0, #3
 8001906:	f7ff fca7 	bl	8001258 <SR_SetPin>
 800190a:	e063      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x0A: SR_ResetPin(3); break;
 800190c:	2003      	movs	r0, #3
 800190e:	f7ff fcc1 	bl	8001294 <SR_ResetPin>
 8001912:	e05f      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x0B: SR_SetPin(4); break;
 8001914:	2004      	movs	r0, #4
 8001916:	f7ff fc9f 	bl	8001258 <SR_SetPin>
 800191a:	e05b      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x0C: SR_ResetPin(4); break;
 800191c:	2004      	movs	r0, #4
 800191e:	f7ff fcb9 	bl	8001294 <SR_ResetPin>
 8001922:	e057      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x0D: SR_SetPin(5); break;
 8001924:	2005      	movs	r0, #5
 8001926:	f7ff fc97 	bl	8001258 <SR_SetPin>
 800192a:	e053      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x0E: SR_ResetPin(5); break;
 800192c:	2005      	movs	r0, #5
 800192e:	f7ff fcb1 	bl	8001294 <SR_ResetPin>
 8001932:	e04f      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x0F: SR_SetPin(6); break;
 8001934:	2006      	movs	r0, #6
 8001936:	f7ff fc8f 	bl	8001258 <SR_SetPin>
 800193a:	e04b      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x10: SR_ResetPin(6); break;
 800193c:	2006      	movs	r0, #6
 800193e:	f7ff fca9 	bl	8001294 <SR_ResetPin>
 8001942:	e047      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x11: SR_SetPin(7); break;
 8001944:	2007      	movs	r0, #7
 8001946:	f7ff fc87 	bl	8001258 <SR_SetPin>
 800194a:	e043      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x12: SR_ResetPin(7); break;
 800194c:	2007      	movs	r0, #7
 800194e:	f7ff fca1 	bl	8001294 <SR_ResetPin>
 8001952:	e03f      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x13: SR_SetPin(8); break;
 8001954:	2008      	movs	r0, #8
 8001956:	f7ff fc7f 	bl	8001258 <SR_SetPin>
 800195a:	e03b      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x14: SR_ResetPin(8); break;
 800195c:	2008      	movs	r0, #8
 800195e:	f7ff fc99 	bl	8001294 <SR_ResetPin>
 8001962:	e037      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x15: SR_SetPin(9); break;
 8001964:	2009      	movs	r0, #9
 8001966:	f7ff fc77 	bl	8001258 <SR_SetPin>
 800196a:	e033      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x16: SR_ResetPin(9); break;
 800196c:	2009      	movs	r0, #9
 800196e:	f7ff fc91 	bl	8001294 <SR_ResetPin>
 8001972:	e02f      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x17: SR_SetPin(10); break;
 8001974:	200a      	movs	r0, #10
 8001976:	f7ff fc6f 	bl	8001258 <SR_SetPin>
 800197a:	e02b      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x18: SR_ResetPin(10); break;
 800197c:	200a      	movs	r0, #10
 800197e:	f7ff fc89 	bl	8001294 <SR_ResetPin>
 8001982:	e027      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x19: SR_SetPin(11); break;
 8001984:	200b      	movs	r0, #11
 8001986:	f7ff fc67 	bl	8001258 <SR_SetPin>
 800198a:	e023      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x1A: SR_ResetPin(11); break;
 800198c:	200b      	movs	r0, #11
 800198e:	f7ff fc81 	bl	8001294 <SR_ResetPin>
 8001992:	e01f      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x1B: SR_SetPin(12); break;
 8001994:	200c      	movs	r0, #12
 8001996:	f7ff fc5f 	bl	8001258 <SR_SetPin>
 800199a:	e01b      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x1C: SR_ResetPin(12); break;
 800199c:	200c      	movs	r0, #12
 800199e:	f7ff fc79 	bl	8001294 <SR_ResetPin>
 80019a2:	e017      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x1D: SR_SetPin(13); break;
 80019a4:	200d      	movs	r0, #13
 80019a6:	f7ff fc57 	bl	8001258 <SR_SetPin>
 80019aa:	e013      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x1E: SR_ResetPin(13); break;
 80019ac:	200d      	movs	r0, #13
 80019ae:	f7ff fc71 	bl	8001294 <SR_ResetPin>
 80019b2:	e00f      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x1F: SR_SetPin(14); break;
 80019b4:	200e      	movs	r0, #14
 80019b6:	f7ff fc4f 	bl	8001258 <SR_SetPin>
 80019ba:	e00b      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x20: SR_ResetPin(14); break;
 80019bc:	200e      	movs	r0, #14
 80019be:	f7ff fc69 	bl	8001294 <SR_ResetPin>
 80019c2:	e007      	b.n	80019d4 <InputMessageHandler+0x1d4>

		case 0x21: SR_SetPin(15); break;
 80019c4:	200f      	movs	r0, #15
 80019c6:	f7ff fc47 	bl	8001258 <SR_SetPin>
 80019ca:	e003      	b.n	80019d4 <InputMessageHandler+0x1d4>
		case 0x22: SR_ResetPin(15); break;
 80019cc:	200f      	movs	r0, #15
 80019ce:	f7ff fc61 	bl	8001294 <SR_ResetPin>
 80019d2:	bf00      	nop

		//default:
			//if(cursorPosition < messageLen)
				//++cursorPosition;
	}
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40011000 	.word	0x40011000

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_MspInit+0x5c>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_MspInit+0x5c>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6193      	str	r3, [r2, #24]
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_MspInit+0x60>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_MspInit+0x60>)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000

08001a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0318 	add.w	r3, r7, #24
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a37      	ldr	r2, [pc, #220]	; (8001b48 <HAL_SPI_MspInit+0xf8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d130      	bne.n	8001ad2 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a70:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a35      	ldr	r2, [pc, #212]	; (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001a76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b33      	ldr	r3, [pc, #204]	; (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a2f      	ldr	r2, [pc, #188]	; (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001aa0:	23a0      	movs	r3, #160	; 0xa0
 8001aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0318 	add.w	r3, r7, #24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4827      	ldr	r0, [pc, #156]	; (8001b50 <HAL_SPI_MspInit+0x100>)
 8001ab4:	f000 fae8 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ab8:	2340      	movs	r3, #64	; 0x40
 8001aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0318 	add.w	r3, r7, #24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4821      	ldr	r0, [pc, #132]	; (8001b50 <HAL_SPI_MspInit+0x100>)
 8001acc:	f000 fadc 	bl	8002088 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ad0:	e036      	b.n	8001b40 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_SPI_MspInit+0x104>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d131      	bne.n	8001b40 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	4a1a      	ldr	r2, [pc, #104]	; (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae6:	61d3      	str	r3, [r2, #28]
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001afa:	f043 0308 	orr.w	r3, r3, #8
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001b0c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 0318 	add.w	r3, r7, #24
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <HAL_SPI_MspInit+0x108>)
 8001b22:	f000 fab1 	bl	8002088 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <HAL_SPI_MspInit+0x108>)
 8001b3c:	f000 faa4 	bl	8002088 <HAL_GPIO_Init>
}
 8001b40:	bf00      	nop
 8001b42:	3728      	adds	r7, #40	; 0x28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40013000 	.word	0x40013000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010800 	.word	0x40010800
 8001b54:	40003800 	.word	0x40003800
 8001b58:	40010c00 	.word	0x40010c00

08001b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <HAL_UART_MspInit+0x8c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d131      	bne.n	8001be0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <HAL_UART_MspInit+0x94>)
 8001bc2:	f000 fa61 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <HAL_UART_MspInit+0x94>)
 8001bdc:	f000 fa54 	bl	8002088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40013800 	.word	0x40013800
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010800 	.word	0x40010800

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <HardFault_Handler+0x4>

08001c06 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <MemManage_Handler+0x4>

08001c0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <BusFault_Handler+0x4>

08001c12 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <UsageFault_Handler+0x4>

08001c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c40:	f000 f8d6 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001c4c:	2004      	movs	r0, #4
 8001c4e:	f000 fb8d 	bl	800236c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <_sbrk+0x50>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x16>
		heap_end = &end;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <_sbrk+0x50>)
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <_sbrk+0x54>)
 8001c6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <_sbrk+0x50>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <_sbrk+0x50>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	466a      	mov	r2, sp
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d907      	bls.n	8001c92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c82:	f001 fecb 	bl	8003a1c <__errno>
 8001c86:	4602      	mov	r2, r0
 8001c88:	230c      	movs	r3, #12
 8001c8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c90:	e006      	b.n	8001ca0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <_sbrk+0x50>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a03      	ldr	r2, [pc, #12]	; (8001ca8 <_sbrk+0x50>)
 8001c9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000298 	.word	0x20000298
 8001cac:	200003a0 	.word	0x200003a0

08001cb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <SystemInit+0x5c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <SystemInit+0x5c>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <SystemInit+0x5c>)
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4911      	ldr	r1, [pc, #68]	; (8001d0c <SystemInit+0x5c>)
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <SystemInit+0x60>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <SystemInit+0x5c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <SystemInit+0x5c>)
 8001cd2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <SystemInit+0x5c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <SystemInit+0x5c>)
 8001ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <SystemInit+0x5c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <SystemInit+0x5c>)
 8001cee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001cf2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <SystemInit+0x5c>)
 8001cf6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001cfa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <SystemInit+0x64>)
 8001cfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d02:	609a      	str	r2, [r3, #8]
#endif 
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	f8ff0000 	.word	0xf8ff0000
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d1a:	e003      	b.n	8001d24 <LoopCopyDataInit>

08001d1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d22:	3104      	adds	r1, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d24:	480a      	ldr	r0, [pc, #40]	; (8001d50 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d2c:	d3f6      	bcc.n	8001d1c <CopyDataInit>
  ldr r2, =_sbss
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d30:	e002      	b.n	8001d38 <LoopFillZerobss>

08001d32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d34:	f842 3b04 	str.w	r3, [r2], #4

08001d38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d3c:	d3f9      	bcc.n	8001d32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d3e:	f7ff ffb7 	bl	8001cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d42:	f001 fe71 	bl	8003a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d46:	f7ff fac5 	bl	80012d4 <main>
  bx lr
 8001d4a:	4770      	bx	lr
  ldr r3, =_sidata
 8001d4c:	080044b4 	.word	0x080044b4
  ldr r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d54:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001d58:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001d5c:	2000039c 	.word	0x2000039c

08001d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC1_2_IRQHandler>
	...

08001d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_Init+0x28>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <HAL_Init+0x28>)
 8001d6e:	f043 0310 	orr.w	r3, r3, #16
 8001d72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d74:	2003      	movs	r0, #3
 8001d76:	f000 f945 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f000 f808 	bl	8001d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d80:	f7ff fe34 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40022000 	.word	0x40022000

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_InitTick+0x54>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_InitTick+0x58>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f95d 	bl	800206e <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00e      	b.n	8001ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d80a      	bhi.n	8001dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f000 f925 	bl	800201a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd0:	4a06      	ldr	r2, [pc, #24]	; (8001dec <HAL_InitTick+0x5c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000004 	.word	0x20000004
 8001de8:	2000000c 	.word	0x2000000c
 8001dec:	20000008 	.word	0x20000008

08001df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_IncTick+0x1c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_IncTick+0x20>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_IncTick+0x20>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	2000000c 	.word	0x2000000c
 8001e10:	20000394 	.word	0x20000394

08001e14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b02      	ldr	r3, [pc, #8]	; (8001e24 <HAL_GetTick+0x10>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	20000394 	.word	0x20000394

08001e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_GetTick>
 8001e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e40:	d005      	beq.n	8001e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_Delay+0x40>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e4e:	bf00      	nop
 8001e50:	f7ff ffe0 	bl	8001e14 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d8f7      	bhi.n	8001e50 <HAL_Delay+0x28>
  {
  }
}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	2000000c 	.word	0x2000000c

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4906      	ldr	r1, [pc, #24]	; (8001f04 <__NVIC_EnableIRQ+0x34>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100

08001f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	db0a      	blt.n	8001f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	490c      	ldr	r1, [pc, #48]	; (8001f54 <__NVIC_SetPriority+0x4c>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	0112      	lsls	r2, r2, #4
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f30:	e00a      	b.n	8001f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4908      	ldr	r1, [pc, #32]	; (8001f58 <__NVIC_SetPriority+0x50>)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	3b04      	subs	r3, #4
 8001f40:	0112      	lsls	r2, r2, #4
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	440b      	add	r3, r1
 8001f46:	761a      	strb	r2, [r3, #24]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000e100 	.word	0xe000e100
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f1c3 0307 	rsb	r3, r3, #7
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	bf28      	it	cs
 8001f7a:	2304      	movcs	r3, #4
 8001f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3304      	adds	r3, #4
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d902      	bls.n	8001f8c <NVIC_EncodePriority+0x30>
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3b03      	subs	r3, #3
 8001f8a:	e000      	b.n	8001f8e <NVIC_EncodePriority+0x32>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	f04f 32ff 	mov.w	r2, #4294967295
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	43d9      	mvns	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	4313      	orrs	r3, r2
         );
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3724      	adds	r7, #36	; 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd0:	d301      	bcc.n	8001fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00f      	b.n	8001ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <SysTick_Config+0x40>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fde:	210f      	movs	r1, #15
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f7ff ff90 	bl	8001f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <SysTick_Config+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <SysTick_Config+0x40>)
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	e000e010 	.word	0xe000e010

08002004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff2d 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202c:	f7ff ff42 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8002030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f7ff ff90 	bl	8001f5c <NVIC_EncodePriority>
 800203c:	4602      	mov	r2, r0
 800203e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff5f 	bl	8001f08 <__NVIC_SetPriority>
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff35 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ffa2 	bl	8001fc0 <SysTick_Config>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002088:	b480      	push	{r7}
 800208a:	b08b      	sub	sp, #44	; 0x2c
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209a:	e127      	b.n	80022ec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800209c:	2201      	movs	r2, #1
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	f040 8116 	bne.w	80022e6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b12      	cmp	r3, #18
 80020c0:	d034      	beq.n	800212c <HAL_GPIO_Init+0xa4>
 80020c2:	2b12      	cmp	r3, #18
 80020c4:	d80d      	bhi.n	80020e2 <HAL_GPIO_Init+0x5a>
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d02b      	beq.n	8002122 <HAL_GPIO_Init+0x9a>
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d804      	bhi.n	80020d8 <HAL_GPIO_Init+0x50>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d031      	beq.n	8002136 <HAL_GPIO_Init+0xae>
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d01c      	beq.n	8002110 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020d6:	e048      	b.n	800216a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d043      	beq.n	8002164 <HAL_GPIO_Init+0xdc>
 80020dc:	2b11      	cmp	r3, #17
 80020de:	d01b      	beq.n	8002118 <HAL_GPIO_Init+0x90>
          break;
 80020e0:	e043      	b.n	800216a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020e2:	4a89      	ldr	r2, [pc, #548]	; (8002308 <HAL_GPIO_Init+0x280>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d026      	beq.n	8002136 <HAL_GPIO_Init+0xae>
 80020e8:	4a87      	ldr	r2, [pc, #540]	; (8002308 <HAL_GPIO_Init+0x280>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d806      	bhi.n	80020fc <HAL_GPIO_Init+0x74>
 80020ee:	4a87      	ldr	r2, [pc, #540]	; (800230c <HAL_GPIO_Init+0x284>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d020      	beq.n	8002136 <HAL_GPIO_Init+0xae>
 80020f4:	4a86      	ldr	r2, [pc, #536]	; (8002310 <HAL_GPIO_Init+0x288>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01d      	beq.n	8002136 <HAL_GPIO_Init+0xae>
          break;
 80020fa:	e036      	b.n	800216a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020fc:	4a85      	ldr	r2, [pc, #532]	; (8002314 <HAL_GPIO_Init+0x28c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d019      	beq.n	8002136 <HAL_GPIO_Init+0xae>
 8002102:	4a85      	ldr	r2, [pc, #532]	; (8002318 <HAL_GPIO_Init+0x290>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d016      	beq.n	8002136 <HAL_GPIO_Init+0xae>
 8002108:	4a84      	ldr	r2, [pc, #528]	; (800231c <HAL_GPIO_Init+0x294>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <HAL_GPIO_Init+0xae>
          break;
 800210e:	e02c      	b.n	800216a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	623b      	str	r3, [r7, #32]
          break;
 8002116:	e028      	b.n	800216a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	3304      	adds	r3, #4
 800211e:	623b      	str	r3, [r7, #32]
          break;
 8002120:	e023      	b.n	800216a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	3308      	adds	r3, #8
 8002128:	623b      	str	r3, [r7, #32]
          break;
 800212a:	e01e      	b.n	800216a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	330c      	adds	r3, #12
 8002132:	623b      	str	r3, [r7, #32]
          break;
 8002134:	e019      	b.n	800216a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800213e:	2304      	movs	r3, #4
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e012      	b.n	800216a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800214c:	2308      	movs	r3, #8
 800214e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	611a      	str	r2, [r3, #16]
          break;
 8002156:	e008      	b.n	800216a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002158:	2308      	movs	r3, #8
 800215a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	615a      	str	r2, [r3, #20]
          break;
 8002162:	e002      	b.n	800216a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
          break;
 8002168:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2bff      	cmp	r3, #255	; 0xff
 800216e:	d801      	bhi.n	8002174 <HAL_GPIO_Init+0xec>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	e001      	b.n	8002178 <HAL_GPIO_Init+0xf0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3304      	adds	r3, #4
 8002178:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	2bff      	cmp	r3, #255	; 0xff
 800217e:	d802      	bhi.n	8002186 <HAL_GPIO_Init+0xfe>
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	e002      	b.n	800218c <HAL_GPIO_Init+0x104>
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	3b08      	subs	r3, #8
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	210f      	movs	r1, #15
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	401a      	ands	r2, r3
 800219e:	6a39      	ldr	r1, [r7, #32]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	431a      	orrs	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8096 	beq.w	80022e6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021ba:	4b59      	ldr	r3, [pc, #356]	; (8002320 <HAL_GPIO_Init+0x298>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	4a58      	ldr	r2, [pc, #352]	; (8002320 <HAL_GPIO_Init+0x298>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6193      	str	r3, [r2, #24]
 80021c6:	4b56      	ldr	r3, [pc, #344]	; (8002320 <HAL_GPIO_Init+0x298>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021d2:	4a54      	ldr	r2, [pc, #336]	; (8002324 <HAL_GPIO_Init+0x29c>)
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021de:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4b      	ldr	r2, [pc, #300]	; (8002328 <HAL_GPIO_Init+0x2a0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0x19e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4a      	ldr	r2, [pc, #296]	; (800232c <HAL_GPIO_Init+0x2a4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x19a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a49      	ldr	r2, [pc, #292]	; (8002330 <HAL_GPIO_Init+0x2a8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x196>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a48      	ldr	r2, [pc, #288]	; (8002334 <HAL_GPIO_Init+0x2ac>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x192>
 8002216:	2303      	movs	r3, #3
 8002218:	e006      	b.n	8002228 <HAL_GPIO_Init+0x1a0>
 800221a:	2304      	movs	r3, #4
 800221c:	e004      	b.n	8002228 <HAL_GPIO_Init+0x1a0>
 800221e:	2302      	movs	r3, #2
 8002220:	e002      	b.n	8002228 <HAL_GPIO_Init+0x1a0>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x1a0>
 8002226:	2300      	movs	r3, #0
 8002228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222a:	f002 0203 	and.w	r2, r2, #3
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	4093      	lsls	r3, r2
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002238:	493a      	ldr	r1, [pc, #232]	; (8002324 <HAL_GPIO_Init+0x29c>)
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3302      	adds	r3, #2
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d006      	beq.n	8002260 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002252:	4b39      	ldr	r3, [pc, #228]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4938      	ldr	r1, [pc, #224]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
 800225e:	e006      	b.n	800226e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002260:	4b35      	ldr	r3, [pc, #212]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	43db      	mvns	r3, r3
 8002268:	4933      	ldr	r1, [pc, #204]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 800226a:	4013      	ands	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800227a:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	492e      	ldr	r1, [pc, #184]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
 8002286:	e006      	b.n	8002296 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	43db      	mvns	r3, r3
 8002290:	4929      	ldr	r1, [pc, #164]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 8002292:	4013      	ands	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022a2:	4b25      	ldr	r3, [pc, #148]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4924      	ldr	r1, [pc, #144]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
 80022ae:	e006      	b.n	80022be <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	491f      	ldr	r1, [pc, #124]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	491a      	ldr	r1, [pc, #104]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60cb      	str	r3, [r1, #12]
 80022d6:	e006      	b.n	80022e6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022d8:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	43db      	mvns	r3, r3
 80022e0:	4915      	ldr	r1, [pc, #84]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	3301      	adds	r3, #1
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	fa22 f303 	lsr.w	r3, r2, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f47f aed0 	bne.w	800209c <HAL_GPIO_Init+0x14>
  }
}
 80022fc:	bf00      	nop
 80022fe:	372c      	adds	r7, #44	; 0x2c
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	10210000 	.word	0x10210000
 800230c:	10110000 	.word	0x10110000
 8002310:	10120000 	.word	0x10120000
 8002314:	10310000 	.word	0x10310000
 8002318:	10320000 	.word	0x10320000
 800231c:	10220000 	.word	0x10220000
 8002320:	40021000 	.word	0x40021000
 8002324:	40010000 	.word	0x40010000
 8002328:	40010800 	.word	0x40010800
 800232c:	40010c00 	.word	0x40010c00
 8002330:	40011000 	.word	0x40011000
 8002334:	40011400 	.word	0x40011400
 8002338:	40010400 	.word	0x40010400

0800233c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
 8002348:	4613      	mov	r3, r2
 800234a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800234c:	787b      	ldrb	r3, [r7, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002358:	e003      	b.n	8002362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	041a      	lsls	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	611a      	str	r2, [r3, #16]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002382:	4a05      	ldr	r2, [pc, #20]	; (8002398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fa2c 	bl	80017e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40010400 	.word	0x40010400

0800239c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e26c      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8087 	beq.w	80024ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023bc:	4b92      	ldr	r3, [pc, #584]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d00c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c8:	4b8f      	ldr	r3, [pc, #572]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d112      	bne.n	80023fa <HAL_RCC_OscConfig+0x5e>
 80023d4:	4b8c      	ldr	r3, [pc, #560]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d10b      	bne.n	80023fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e2:	4b89      	ldr	r3, [pc, #548]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d06c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x12c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d168      	bne.n	80024c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e246      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x76>
 8002404:	4b80      	ldr	r3, [pc, #512]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a7f      	ldr	r2, [pc, #508]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	e02e      	b.n	8002470 <HAL_RCC_OscConfig+0xd4>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x98>
 800241a:	4b7b      	ldr	r3, [pc, #492]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7a      	ldr	r2, [pc, #488]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b78      	ldr	r3, [pc, #480]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a77      	ldr	r2, [pc, #476]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800242c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e01d      	b.n	8002470 <HAL_RCC_OscConfig+0xd4>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0xbc>
 800243e:	4b72      	ldr	r3, [pc, #456]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a71      	ldr	r2, [pc, #452]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0xd4>
 8002458:	4b6b      	ldr	r3, [pc, #428]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a6a      	ldr	r2, [pc, #424]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800245e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b68      	ldr	r3, [pc, #416]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a67      	ldr	r2, [pc, #412]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800246a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff fccc 	bl	8001e14 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7ff fcc8 	bl	8001e14 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e1fa      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	4b5d      	ldr	r3, [pc, #372]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0xe4>
 800249e:	e014      	b.n	80024ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff fcb8 	bl	8001e14 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff fcb4 	bl	8001e14 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1e6      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	4b53      	ldr	r3, [pc, #332]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x10c>
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d063      	beq.n	800259e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024d6:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024e2:	4b49      	ldr	r3, [pc, #292]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d11c      	bne.n	8002528 <HAL_RCC_OscConfig+0x18c>
 80024ee:	4b46      	ldr	r3, [pc, #280]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d116      	bne.n	8002528 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	4b43      	ldr	r3, [pc, #268]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_RCC_OscConfig+0x176>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1ba      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4939      	ldr	r1, [pc, #228]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	e03a      	b.n	800259e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <HAL_RCC_OscConfig+0x270>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7ff fc6d 	bl	8001e14 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253e:	f7ff fc69 	bl	8001e14 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e19b      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4927      	ldr	r1, [pc, #156]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
 8002570:	e015      	b.n	800259e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <HAL_RCC_OscConfig+0x270>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fc4c 	bl	8001e14 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002580:	f7ff fc48 	bl	8001e14 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e17a      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d03a      	beq.n	8002620 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d019      	beq.n	80025e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b2:	4b17      	ldr	r3, [pc, #92]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b8:	f7ff fc2c 	bl	8001e14 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c0:	f7ff fc28 	bl	8001e14 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e15a      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025de:	2001      	movs	r0, #1
 80025e0:	f000 fada 	bl	8002b98 <RCC_Delay>
 80025e4:	e01c      	b.n	8002620 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ec:	f7ff fc12 	bl	8001e14 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f2:	e00f      	b.n	8002614 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f4:	f7ff fc0e 	bl	8001e14 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d908      	bls.n	8002614 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e140      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	42420000 	.word	0x42420000
 8002610:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	4b9e      	ldr	r3, [pc, #632]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e9      	bne.n	80025f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80a6 	beq.w	800277a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b97      	ldr	r3, [pc, #604]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	4b94      	ldr	r3, [pc, #592]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a93      	ldr	r2, [pc, #588]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002648:	61d3      	str	r3, [r2, #28]
 800264a:	4b91      	ldr	r3, [pc, #580]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002656:	2301      	movs	r3, #1
 8002658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265a:	4b8e      	ldr	r3, [pc, #568]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d118      	bne.n	8002698 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002666:	4b8b      	ldr	r3, [pc, #556]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a8a      	ldr	r2, [pc, #552]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002672:	f7ff fbcf 	bl	8001e14 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267a:	f7ff fbcb 	bl	8001e14 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b64      	cmp	r3, #100	; 0x64
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e0fd      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268c:	4b81      	ldr	r3, [pc, #516]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x312>
 80026a0:	4b7b      	ldr	r3, [pc, #492]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4a7a      	ldr	r2, [pc, #488]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6213      	str	r3, [r2, #32]
 80026ac:	e02d      	b.n	800270a <HAL_RCC_OscConfig+0x36e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x334>
 80026b6:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a75      	ldr	r2, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6213      	str	r3, [r2, #32]
 80026c2:	4b73      	ldr	r3, [pc, #460]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a72      	ldr	r2, [pc, #456]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	6213      	str	r3, [r2, #32]
 80026ce:	e01c      	b.n	800270a <HAL_RCC_OscConfig+0x36e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d10c      	bne.n	80026f2 <HAL_RCC_OscConfig+0x356>
 80026d8:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4a6c      	ldr	r2, [pc, #432]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4a69      	ldr	r2, [pc, #420]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6213      	str	r3, [r2, #32]
 80026f0:	e00b      	b.n	800270a <HAL_RCC_OscConfig+0x36e>
 80026f2:	4b67      	ldr	r3, [pc, #412]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4a66      	ldr	r2, [pc, #408]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6213      	str	r3, [r2, #32]
 80026fe:	4b64      	ldr	r3, [pc, #400]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a63      	ldr	r2, [pc, #396]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d015      	beq.n	800273e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002712:	f7ff fb7f 	bl	8001e14 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7ff fb7b 	bl	8001e14 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f241 3288 	movw	r2, #5000	; 0x1388
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0ab      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002730:	4b57      	ldr	r3, [pc, #348]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ee      	beq.n	800271a <HAL_RCC_OscConfig+0x37e>
 800273c:	e014      	b.n	8002768 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7ff fb69 	bl	8001e14 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7ff fb65 	bl	8001e14 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e095      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275c:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ee      	bne.n	8002746 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d105      	bne.n	800277a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276e:	4b48      	ldr	r3, [pc, #288]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	4a47      	ldr	r2, [pc, #284]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002778:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8081 	beq.w	8002886 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002784:	4b42      	ldr	r3, [pc, #264]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b08      	cmp	r3, #8
 800278e:	d061      	beq.n	8002854 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d146      	bne.n	8002826 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002798:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <HAL_RCC_OscConfig+0x4fc>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7ff fb39 	bl	8001e14 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a6:	f7ff fb35 	bl	8001e14 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e067      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b8:	4b35      	ldr	r3, [pc, #212]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027cc:	d108      	bne.n	80027e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ce:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	492d      	ldr	r1, [pc, #180]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e0:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a19      	ldr	r1, [r3, #32]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	430b      	orrs	r3, r1
 80027f2:	4927      	ldr	r1, [pc, #156]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_OscConfig+0x4fc>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7ff fb09 	bl	8001e14 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002806:	f7ff fb05 	bl	8001e14 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e037      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002818:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x46a>
 8002824:	e02f      	b.n	8002886 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <HAL_RCC_OscConfig+0x4fc>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7ff faf2 	bl	8001e14 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7ff faee 	bl	8001e14 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e020      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x498>
 8002852:	e018      	b.n	8002886 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e013      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	429a      	cmp	r2, r3
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	40007000 	.word	0x40007000
 8002898:	42420060 	.word	0x42420060

0800289c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0d0      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d910      	bls.n	80028e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 0207 	bic.w	r2, r3, #7
 80028c6:	4965      	ldr	r1, [pc, #404]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b63      	ldr	r3, [pc, #396]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0b8      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d020      	beq.n	800292e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f8:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a58      	ldr	r2, [pc, #352]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002902:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002910:	4b53      	ldr	r3, [pc, #332]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a52      	ldr	r2, [pc, #328]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800291a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291c:	4b50      	ldr	r3, [pc, #320]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	494d      	ldr	r1, [pc, #308]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d040      	beq.n	80029bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002942:	4b47      	ldr	r3, [pc, #284]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d115      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e07f      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295a:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e073      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296a:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e06b      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297a:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f023 0203 	bic.w	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4936      	ldr	r1, [pc, #216]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800298c:	f7ff fa42 	bl	8001e14 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	e00a      	b.n	80029aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002994:	f7ff fa3e 	bl	8001e14 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e053      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 020c 	and.w	r2, r3, #12
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d1eb      	bne.n	8002994 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029bc:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d210      	bcs.n	80029ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 0207 	bic.w	r2, r3, #7
 80029d2:	4922      	ldr	r1, [pc, #136]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e032      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f8:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4916      	ldr	r1, [pc, #88]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	490e      	ldr	r1, [pc, #56]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a2a:	f000 f821 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8002a2e:	4601      	mov	r1, r0
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3c:	5cd3      	ldrb	r3, [r2, r3]
 8002a3e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a42:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <HAL_RCC_ClockConfig+0x1cc>)
 8002a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_RCC_ClockConfig+0x1d0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f9a0 	bl	8001d90 <HAL_InitTick>

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08004460 	.word	0x08004460
 8002a68:	20000004 	.word	0x20000004
 8002a6c:	20000008 	.word	0x20000008

08002a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	b490      	push	{r4, r7}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a76:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a78:	1d3c      	adds	r4, r7, #4
 8002a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a80:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a9a:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d002      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x46>
 8002aae:	e02d      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ab2:	623b      	str	r3, [r7, #32]
      break;
 8002ab4:	e02d      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	0c9b      	lsrs	r3, r3, #18
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ac8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0c5b      	lsrs	r3, r3, #17
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ae8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aee:	fb02 f203 	mul.w	r2, r2, r3
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	e004      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	4a0c      	ldr	r2, [pc, #48]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b00:	fb02 f303 	mul.w	r3, r2, r3
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	623b      	str	r3, [r7, #32]
      break;
 8002b0a:	e002      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b0e:	623b      	str	r3, [r7, #32]
      break;
 8002b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b12:	6a3b      	ldr	r3, [r7, #32]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3728      	adds	r7, #40	; 0x28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc90      	pop	{r4, r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	0800444c 	.word	0x0800444c
 8002b24:	0800445c 	.word	0x0800445c
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	007a1200 	.word	0x007a1200
 8002b30:	003d0900 	.word	0x003d0900

08002b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b38:	4b02      	ldr	r3, [pc, #8]	; (8002b44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	20000004 	.word	0x20000004

08002b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b4c:	f7ff fff2 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b50:	4601      	mov	r1, r0
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	4a03      	ldr	r2, [pc, #12]	; (8002b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b5e:	5cd3      	ldrb	r3, [r2, r3]
 8002b60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	08004470 	.word	0x08004470

08002b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b74:	f7ff ffde 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b78:	4601      	mov	r1, r0
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	0adb      	lsrs	r3, r3, #11
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	4a03      	ldr	r2, [pc, #12]	; (8002b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b86:	5cd3      	ldrb	r3, [r2, r3]
 8002b88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000
 8002b94:	08004470 	.word	0x08004470

08002b98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <RCC_Delay+0x34>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <RCC_Delay+0x38>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	0a5b      	lsrs	r3, r3, #9
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bb4:	bf00      	nop
  }
  while (Delay --);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1e5a      	subs	r2, r3, #1
 8002bba:	60fa      	str	r2, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f9      	bne.n	8002bb4 <RCC_Delay+0x1c>
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000004 	.word	0x20000004
 8002bd0:	10624dd3 	.word	0x10624dd3

08002bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e053      	b.n	8002c8e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7fe ff25 	bl	8001a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	ea42 0103 	orr.w	r1, r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	0c1a      	lsrs	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f002 0204 	and.w	r2, r2, #4
 8002c6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69da      	ldr	r2, [r3, #28]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b088      	sub	sp, #32
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_SPI_Transmit+0x22>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e11e      	b.n	8002ef6 <HAL_SPI_Transmit+0x260>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cc0:	f7ff f8a8 	bl	8001e14 <HAL_GetTick>
 8002cc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d002      	beq.n	8002cdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cda:	e103      	b.n	8002ee4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_SPI_Transmit+0x52>
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cec:	e0fa      	b.n	8002ee4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	88fa      	ldrh	r2, [r7, #6]
 8002d06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d34:	d107      	bne.n	8002d46 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	d007      	beq.n	8002d64 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6c:	d14b      	bne.n	8002e06 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_SPI_Transmit+0xe6>
 8002d76:	8afb      	ldrh	r3, [r7, #22]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d13e      	bne.n	8002dfa <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	881a      	ldrh	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	1c9a      	adds	r2, r3, #2
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002da0:	e02b      	b.n	8002dfa <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d112      	bne.n	8002dd6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	881a      	ldrh	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	1c9a      	adds	r2, r3, #2
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dd4:	e011      	b.n	8002dfa <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dd6:	f7ff f81d 	bl	8001e14 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d803      	bhi.n	8002dee <HAL_SPI_Transmit+0x158>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d102      	bne.n	8002df4 <HAL_SPI_Transmit+0x15e>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002df8:	e074      	b.n	8002ee4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ce      	bne.n	8002da2 <HAL_SPI_Transmit+0x10c>
 8002e04:	e04c      	b.n	8002ea0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_SPI_Transmit+0x17e>
 8002e0e:	8afb      	ldrh	r3, [r7, #22]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d140      	bne.n	8002e96 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	330c      	adds	r3, #12
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e3a:	e02c      	b.n	8002e96 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d113      	bne.n	8002e72 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	7812      	ldrb	r2, [r2, #0]
 8002e56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e70:	e011      	b.n	8002e96 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e72:	f7fe ffcf 	bl	8001e14 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d803      	bhi.n	8002e8a <HAL_SPI_Transmit+0x1f4>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d102      	bne.n	8002e90 <HAL_SPI_Transmit+0x1fa>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e94:	e026      	b.n	8002ee4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1cd      	bne.n	8002e3c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	6839      	ldr	r1, [r7, #0]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fb91 	bl	80035cc <SPI_EndRxTxTransaction>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	e000      	b.n	8002ee4 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002ee2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b088      	sub	sp, #32
 8002f02:	af02      	add	r7, sp, #8
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f1a:	d112      	bne.n	8002f42 <HAL_SPI_Receive+0x44>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10e      	bne.n	8002f42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2204      	movs	r2, #4
 8002f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f2c:	88fa      	ldrh	r2, [r7, #6]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	4613      	mov	r3, r2
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f8e9 	bl	8003110 <HAL_SPI_TransmitReceive>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	e0e2      	b.n	8003108 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_SPI_Receive+0x52>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e0db      	b.n	8003108 <HAL_SPI_Receive+0x20a>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f58:	f7fe ff5c 	bl	8001e14 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d002      	beq.n	8002f70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f6e:	e0c2      	b.n	80030f6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_SPI_Receive+0x7e>
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f80:	e0b9      	b.n	80030f6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2204      	movs	r2, #4
 8002f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	88fa      	ldrh	r2, [r7, #6]
 8002f9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	88fa      	ldrh	r2, [r7, #6]
 8002fa0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc8:	d107      	bne.n	8002fda <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d007      	beq.n	8002ff8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d162      	bne.n	80030c6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003000:	e02e      	b.n	8003060 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d115      	bne.n	800303c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f103 020c 	add.w	r2, r3, #12
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	7812      	ldrb	r2, [r2, #0]
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	87da      	strh	r2, [r3, #62]	; 0x3e
 800303a:	e011      	b.n	8003060 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800303c:	f7fe feea 	bl	8001e14 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d803      	bhi.n	8003054 <HAL_SPI_Receive+0x156>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d102      	bne.n	800305a <HAL_SPI_Receive+0x15c>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d102      	bne.n	8003060 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800305e:	e04a      	b.n	80030f6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1cb      	bne.n	8003002 <HAL_SPI_Receive+0x104>
 800306a:	e031      	b.n	80030d0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d113      	bne.n	80030a2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	b292      	uxth	r2, r2
 8003086:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	1c9a      	adds	r2, r3, #2
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030a0:	e011      	b.n	80030c6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030a2:	f7fe feb7 	bl	8001e14 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d803      	bhi.n	80030ba <HAL_SPI_Receive+0x1bc>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d102      	bne.n	80030c0 <HAL_SPI_Receive+0x1c2>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030c4:	e017      	b.n	80030f6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1cd      	bne.n	800306c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	6839      	ldr	r1, [r7, #0]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fa27 	bl	8003528 <SPI_EndRxTransaction>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	75fb      	strb	r3, [r7, #23]
 80030f2:	e000      	b.n	80030f6 <HAL_SPI_Receive+0x1f8>
  }

error :
 80030f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003106:	7dfb      	ldrb	r3, [r7, #23]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08c      	sub	sp, #48	; 0x30
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800311e:	2301      	movs	r3, #1
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_SPI_TransmitReceive+0x26>
 8003132:	2302      	movs	r3, #2
 8003134:	e18a      	b.n	800344c <HAL_SPI_TransmitReceive+0x33c>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800313e:	f7fe fe69 	bl	8001e14 <HAL_GetTick>
 8003142:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800314a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800315c:	2b01      	cmp	r3, #1
 800315e:	d00f      	beq.n	8003180 <HAL_SPI_TransmitReceive+0x70>
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003166:	d107      	bne.n	8003178 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d103      	bne.n	8003178 <HAL_SPI_TransmitReceive+0x68>
 8003170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003174:	2b04      	cmp	r3, #4
 8003176:	d003      	beq.n	8003180 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003178:	2302      	movs	r3, #2
 800317a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800317e:	e15b      	b.n	8003438 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_SPI_TransmitReceive+0x82>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_SPI_TransmitReceive+0x82>
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d103      	bne.n	800319a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003198:	e14e      	b.n	8003438 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d003      	beq.n	80031ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2205      	movs	r2, #5
 80031aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	887a      	ldrh	r2, [r7, #2]
 80031be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	887a      	ldrh	r2, [r7, #2]
 80031d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	887a      	ldrh	r2, [r7, #2]
 80031d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d007      	beq.n	8003202 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800320a:	d178      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <HAL_SPI_TransmitReceive+0x10a>
 8003214:	8b7b      	ldrh	r3, [r7, #26]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d166      	bne.n	80032e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	881a      	ldrh	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	1c9a      	adds	r2, r3, #2
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800323e:	e053      	b.n	80032e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b02      	cmp	r3, #2
 800324c:	d11b      	bne.n	8003286 <HAL_SPI_TransmitReceive+0x176>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d016      	beq.n	8003286 <HAL_SPI_TransmitReceive+0x176>
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d113      	bne.n	8003286 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	881a      	ldrh	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	1c9a      	adds	r2, r3, #2
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d119      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x1b8>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d014      	beq.n	80032c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	b292      	uxth	r2, r2
 80032aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b0:	1c9a      	adds	r2, r3, #2
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032c4:	2301      	movs	r3, #1
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032c8:	f7fe fda4 	bl	8001e14 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d807      	bhi.n	80032e8 <HAL_SPI_TransmitReceive+0x1d8>
 80032d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032de:	d003      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032e6:	e0a7      	b.n	8003438 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1a6      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x130>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1a1      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x130>
 80032fc:	e07c      	b.n	80033f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_SPI_TransmitReceive+0x1fc>
 8003306:	8b7b      	ldrh	r3, [r7, #26]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d16b      	bne.n	80033e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003332:	e057      	b.n	80033e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d11c      	bne.n	800337c <HAL_SPI_TransmitReceive+0x26c>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d017      	beq.n	800337c <HAL_SPI_TransmitReceive+0x26c>
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	2b01      	cmp	r3, #1
 8003350:	d114      	bne.n	800337c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	330c      	adds	r3, #12
 800335c:	7812      	ldrb	r2, [r2, #0]
 800335e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d119      	bne.n	80033be <HAL_SPI_TransmitReceive+0x2ae>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d014      	beq.n	80033be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033ba:	2301      	movs	r3, #1
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033be:	f7fe fd29 	bl	8001e14 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d803      	bhi.n	80033d6 <HAL_SPI_TransmitReceive+0x2c6>
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d102      	bne.n	80033dc <HAL_SPI_TransmitReceive+0x2cc>
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d103      	bne.n	80033e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033e2:	e029      	b.n	8003438 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1a2      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x224>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d19d      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f8e5 	bl	80035cc <SPI_EndRxTxTransaction>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d006      	beq.n	8003416 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003414:	e010      	b.n	8003438 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10b      	bne.n	8003436 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	e000      	b.n	8003438 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003436:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003448:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800344c:	4618      	mov	r0, r3
 800344e:	3730      	adds	r7, #48	; 0x30
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003464:	e04c      	b.n	8003500 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d048      	beq.n	8003500 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800346e:	f7fe fcd1 	bl	8001e14 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d902      	bls.n	8003484 <SPI_WaitFlagStateUntilTimeout+0x30>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d13d      	bne.n	8003500 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003492:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800349c:	d111      	bne.n	80034c2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a6:	d004      	beq.n	80034b2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b0:	d107      	bne.n	80034c2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ca:	d10f      	bne.n	80034ec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e00f      	b.n	8003520 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	429a      	cmp	r2, r3
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	429a      	cmp	r2, r3
 800351c:	d1a3      	bne.n	8003466 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800353c:	d111      	bne.n	8003562 <SPI_EndRxTransaction+0x3a>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003546:	d004      	beq.n	8003552 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003550:	d107      	bne.n	8003562 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003560:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356a:	d117      	bne.n	800359c <SPI_EndRxTransaction+0x74>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003574:	d112      	bne.n	800359c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2200      	movs	r2, #0
 800357e:	2101      	movs	r1, #1
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7ff ff67 	bl	8003454 <SPI_WaitFlagStateUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01a      	beq.n	80035c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	f043 0220 	orr.w	r2, r3, #32
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e013      	b.n	80035c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff54 	bl	8003454 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e000      	b.n	80035c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2200      	movs	r2, #0
 80035e0:	2180      	movs	r1, #128	; 0x80
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f7ff ff36 	bl	8003454 <SPI_WaitFlagStateUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	f043 0220 	orr.w	r2, r3, #32
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e000      	b.n	8003600 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e03f      	b.n	800369a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe fa94 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2224      	movs	r2, #36	; 0x24
 8003638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800364a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f90b 	bl	8003868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b088      	sub	sp, #32
 80036a6:	af02      	add	r7, sp, #8
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b20      	cmp	r3, #32
 80036c0:	f040 8083 	bne.w	80037ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_UART_Transmit+0x2e>
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e07b      	b.n	80037cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Transmit+0x40>
 80036de:	2302      	movs	r3, #2
 80036e0:	e074      	b.n	80037cc <HAL_UART_Transmit+0x12a>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2221      	movs	r2, #33	; 0x21
 80036f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036f8:	f7fe fb8c 	bl	8001e14 <HAL_GetTick>
 80036fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	88fa      	ldrh	r2, [r7, #6]
 8003702:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	88fa      	ldrh	r2, [r7, #6]
 8003708:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800370a:	e042      	b.n	8003792 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003722:	d122      	bne.n	800376a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2200      	movs	r2, #0
 800372c:	2180      	movs	r1, #128	; 0x80
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f850 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e046      	b.n	80037cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003750:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3302      	adds	r3, #2
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	e017      	b.n	8003792 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3301      	adds	r3, #1
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	e013      	b.n	8003792 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2200      	movs	r2, #0
 8003772:	2180      	movs	r1, #128	; 0x80
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f82d 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e023      	b.n	80037cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	60ba      	str	r2, [r7, #8]
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1b7      	bne.n	800370c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2200      	movs	r2, #0
 80037a4:	2140      	movs	r1, #64	; 0x40
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f814 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e00a      	b.n	80037cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
  }
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e4:	e02c      	b.n	8003840 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d028      	beq.n	8003840 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <UART_WaitOnFlagUntilTimeout+0x30>
 80037f4:	f7fe fb0e 	bl	8001e14 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	429a      	cmp	r2, r3
 8003802:	d21d      	bcs.n	8003840 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003812:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e00f      	b.n	8003860 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4013      	ands	r3, r2
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	429a      	cmp	r2, r3
 800384e:	bf0c      	ite	eq
 8003850:	2301      	moveq	r3, #1
 8003852:	2300      	movne	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	429a      	cmp	r2, r3
 800385c:	d0c3      	beq.n	80037e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038a2:	f023 030c 	bic.w	r3, r3, #12
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	68f9      	ldr	r1, [r7, #12]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a52      	ldr	r2, [pc, #328]	; (8003a14 <UART_SetConfig+0x1ac>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d14e      	bne.n	800396e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038d0:	f7ff f94e 	bl	8002b70 <HAL_RCC_GetPCLK2Freq>
 80038d4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009a      	lsls	r2, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	4a4a      	ldr	r2, [pc, #296]	; (8003a18 <UART_SetConfig+0x1b0>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	0119      	lsls	r1, r3, #4
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009a      	lsls	r2, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	fbb2 f2f3 	udiv	r2, r2, r3
 800390c:	4b42      	ldr	r3, [pc, #264]	; (8003a18 <UART_SetConfig+0x1b0>)
 800390e:	fba3 0302 	umull	r0, r3, r3, r2
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2064      	movs	r0, #100	; 0x64
 8003916:	fb00 f303 	mul.w	r3, r0, r3
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	3332      	adds	r3, #50	; 0x32
 8003920:	4a3d      	ldr	r2, [pc, #244]	; (8003a18 <UART_SetConfig+0x1b0>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800392c:	4419      	add	r1, r3
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009a      	lsls	r2, r3, #2
 8003938:	441a      	add	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	fbb2 f2f3 	udiv	r2, r2, r3
 8003944:	4b34      	ldr	r3, [pc, #208]	; (8003a18 <UART_SetConfig+0x1b0>)
 8003946:	fba3 0302 	umull	r0, r3, r3, r2
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2064      	movs	r0, #100	; 0x64
 800394e:	fb00 f303 	mul.w	r3, r0, r3
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	3332      	adds	r3, #50	; 0x32
 8003958:	4a2f      	ldr	r2, [pc, #188]	; (8003a18 <UART_SetConfig+0x1b0>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	f003 020f 	and.w	r2, r3, #15
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	440a      	add	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800396c:	e04d      	b.n	8003a0a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800396e:	f7ff f8eb 	bl	8002b48 <HAL_RCC_GetPCLK1Freq>
 8003972:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	009a      	lsls	r2, r3, #2
 800397e:	441a      	add	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	fbb2 f3f3 	udiv	r3, r2, r3
 800398a:	4a23      	ldr	r2, [pc, #140]	; (8003a18 <UART_SetConfig+0x1b0>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	0119      	lsls	r1, r3, #4
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009a      	lsls	r2, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <UART_SetConfig+0x1b0>)
 80039ac:	fba3 0302 	umull	r0, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	2064      	movs	r0, #100	; 0x64
 80039b4:	fb00 f303 	mul.w	r3, r0, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	3332      	adds	r3, #50	; 0x32
 80039be:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <UART_SetConfig+0x1b0>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ca:	4419      	add	r1, r3
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009a      	lsls	r2, r3, #2
 80039d6:	441a      	add	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e2:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <UART_SetConfig+0x1b0>)
 80039e4:	fba3 0302 	umull	r0, r3, r3, r2
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	2064      	movs	r0, #100	; 0x64
 80039ec:	fb00 f303 	mul.w	r3, r0, r3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	3332      	adds	r3, #50	; 0x32
 80039f6:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <UART_SetConfig+0x1b0>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	f003 020f 	and.w	r2, r3, #15
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	440a      	add	r2, r1
 8003a08:	609a      	str	r2, [r3, #8]
}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40013800 	.word	0x40013800
 8003a18:	51eb851f 	.word	0x51eb851f

08003a1c <__errno>:
 8003a1c:	4b01      	ldr	r3, [pc, #4]	; (8003a24 <__errno+0x8>)
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000010 	.word	0x20000010

08003a28 <__libc_init_array>:
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	2500      	movs	r5, #0
 8003a2c:	4e0c      	ldr	r6, [pc, #48]	; (8003a60 <__libc_init_array+0x38>)
 8003a2e:	4c0d      	ldr	r4, [pc, #52]	; (8003a64 <__libc_init_array+0x3c>)
 8003a30:	1ba4      	subs	r4, r4, r6
 8003a32:	10a4      	asrs	r4, r4, #2
 8003a34:	42a5      	cmp	r5, r4
 8003a36:	d109      	bne.n	8003a4c <__libc_init_array+0x24>
 8003a38:	f000 fcd2 	bl	80043e0 <_init>
 8003a3c:	2500      	movs	r5, #0
 8003a3e:	4e0a      	ldr	r6, [pc, #40]	; (8003a68 <__libc_init_array+0x40>)
 8003a40:	4c0a      	ldr	r4, [pc, #40]	; (8003a6c <__libc_init_array+0x44>)
 8003a42:	1ba4      	subs	r4, r4, r6
 8003a44:	10a4      	asrs	r4, r4, #2
 8003a46:	42a5      	cmp	r5, r4
 8003a48:	d105      	bne.n	8003a56 <__libc_init_array+0x2e>
 8003a4a:	bd70      	pop	{r4, r5, r6, pc}
 8003a4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a50:	4798      	blx	r3
 8003a52:	3501      	adds	r5, #1
 8003a54:	e7ee      	b.n	8003a34 <__libc_init_array+0xc>
 8003a56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a5a:	4798      	blx	r3
 8003a5c:	3501      	adds	r5, #1
 8003a5e:	e7f2      	b.n	8003a46 <__libc_init_array+0x1e>
 8003a60:	080044ac 	.word	0x080044ac
 8003a64:	080044ac 	.word	0x080044ac
 8003a68:	080044ac 	.word	0x080044ac
 8003a6c:	080044b0 	.word	0x080044b0

08003a70 <memcpy>:
 8003a70:	b510      	push	{r4, lr}
 8003a72:	1e43      	subs	r3, r0, #1
 8003a74:	440a      	add	r2, r1
 8003a76:	4291      	cmp	r1, r2
 8003a78:	d100      	bne.n	8003a7c <memcpy+0xc>
 8003a7a:	bd10      	pop	{r4, pc}
 8003a7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a84:	e7f7      	b.n	8003a76 <memcpy+0x6>

08003a86 <memset>:
 8003a86:	4603      	mov	r3, r0
 8003a88:	4402      	add	r2, r0
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d100      	bne.n	8003a90 <memset+0xa>
 8003a8e:	4770      	bx	lr
 8003a90:	f803 1b01 	strb.w	r1, [r3], #1
 8003a94:	e7f9      	b.n	8003a8a <memset+0x4>
	...

08003a98 <siprintf>:
 8003a98:	b40e      	push	{r1, r2, r3}
 8003a9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a9e:	b500      	push	{lr}
 8003aa0:	b09c      	sub	sp, #112	; 0x70
 8003aa2:	ab1d      	add	r3, sp, #116	; 0x74
 8003aa4:	9002      	str	r0, [sp, #8]
 8003aa6:	9006      	str	r0, [sp, #24]
 8003aa8:	9107      	str	r1, [sp, #28]
 8003aaa:	9104      	str	r1, [sp, #16]
 8003aac:	4808      	ldr	r0, [pc, #32]	; (8003ad0 <siprintf+0x38>)
 8003aae:	4909      	ldr	r1, [pc, #36]	; (8003ad4 <siprintf+0x3c>)
 8003ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ab4:	9105      	str	r1, [sp, #20]
 8003ab6:	6800      	ldr	r0, [r0, #0]
 8003ab8:	a902      	add	r1, sp, #8
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	f000 f882 	bl	8003bc4 <_svfiprintf_r>
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	9b02      	ldr	r3, [sp, #8]
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	b01c      	add	sp, #112	; 0x70
 8003ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003acc:	b003      	add	sp, #12
 8003ace:	4770      	bx	lr
 8003ad0:	20000010 	.word	0x20000010
 8003ad4:	ffff0208 	.word	0xffff0208

08003ad8 <strcat>:
 8003ad8:	4603      	mov	r3, r0
 8003ada:	b510      	push	{r4, lr}
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	1c5c      	adds	r4, r3, #1
 8003ae0:	b93a      	cbnz	r2, 8003af2 <strcat+0x1a>
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ae8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003aec:	2a00      	cmp	r2, #0
 8003aee:	d1f9      	bne.n	8003ae4 <strcat+0xc>
 8003af0:	bd10      	pop	{r4, pc}
 8003af2:	4623      	mov	r3, r4
 8003af4:	e7f2      	b.n	8003adc <strcat+0x4>

08003af6 <strchr>:
 8003af6:	b2c9      	uxtb	r1, r1
 8003af8:	4603      	mov	r3, r0
 8003afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003afe:	b11a      	cbz	r2, 8003b08 <strchr+0x12>
 8003b00:	428a      	cmp	r2, r1
 8003b02:	d1f9      	bne.n	8003af8 <strchr+0x2>
 8003b04:	4618      	mov	r0, r3
 8003b06:	4770      	bx	lr
 8003b08:	2900      	cmp	r1, #0
 8003b0a:	bf18      	it	ne
 8003b0c:	2300      	movne	r3, #0
 8003b0e:	e7f9      	b.n	8003b04 <strchr+0xe>

08003b10 <__ssputs_r>:
 8003b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b14:	688e      	ldr	r6, [r1, #8]
 8003b16:	4682      	mov	sl, r0
 8003b18:	429e      	cmp	r6, r3
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	4690      	mov	r8, r2
 8003b1e:	4699      	mov	r9, r3
 8003b20:	d837      	bhi.n	8003b92 <__ssputs_r+0x82>
 8003b22:	898a      	ldrh	r2, [r1, #12]
 8003b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b28:	d031      	beq.n	8003b8e <__ssputs_r+0x7e>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	6825      	ldr	r5, [r4, #0]
 8003b2e:	6909      	ldr	r1, [r1, #16]
 8003b30:	1a6f      	subs	r7, r5, r1
 8003b32:	6965      	ldr	r5, [r4, #20]
 8003b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b38:	fb95 f5f3 	sdiv	r5, r5, r3
 8003b3c:	f109 0301 	add.w	r3, r9, #1
 8003b40:	443b      	add	r3, r7
 8003b42:	429d      	cmp	r5, r3
 8003b44:	bf38      	it	cc
 8003b46:	461d      	movcc	r5, r3
 8003b48:	0553      	lsls	r3, r2, #21
 8003b4a:	d530      	bpl.n	8003bae <__ssputs_r+0x9e>
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	f000 fb2d 	bl	80041ac <_malloc_r>
 8003b52:	4606      	mov	r6, r0
 8003b54:	b950      	cbnz	r0, 8003b6c <__ssputs_r+0x5c>
 8003b56:	230c      	movs	r3, #12
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	f8ca 3000 	str.w	r3, [sl]
 8003b60:	89a3      	ldrh	r3, [r4, #12]
 8003b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b66:	81a3      	strh	r3, [r4, #12]
 8003b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b6c:	463a      	mov	r2, r7
 8003b6e:	6921      	ldr	r1, [r4, #16]
 8003b70:	f7ff ff7e 	bl	8003a70 <memcpy>
 8003b74:	89a3      	ldrh	r3, [r4, #12]
 8003b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b7e:	81a3      	strh	r3, [r4, #12]
 8003b80:	6126      	str	r6, [r4, #16]
 8003b82:	443e      	add	r6, r7
 8003b84:	6026      	str	r6, [r4, #0]
 8003b86:	464e      	mov	r6, r9
 8003b88:	6165      	str	r5, [r4, #20]
 8003b8a:	1bed      	subs	r5, r5, r7
 8003b8c:	60a5      	str	r5, [r4, #8]
 8003b8e:	454e      	cmp	r6, r9
 8003b90:	d900      	bls.n	8003b94 <__ssputs_r+0x84>
 8003b92:	464e      	mov	r6, r9
 8003b94:	4632      	mov	r2, r6
 8003b96:	4641      	mov	r1, r8
 8003b98:	6820      	ldr	r0, [r4, #0]
 8003b9a:	f000 faa1 	bl	80040e0 <memmove>
 8003b9e:	68a3      	ldr	r3, [r4, #8]
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	1b9b      	subs	r3, r3, r6
 8003ba4:	60a3      	str	r3, [r4, #8]
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	441e      	add	r6, r3
 8003baa:	6026      	str	r6, [r4, #0]
 8003bac:	e7dc      	b.n	8003b68 <__ssputs_r+0x58>
 8003bae:	462a      	mov	r2, r5
 8003bb0:	f000 fb56 	bl	8004260 <_realloc_r>
 8003bb4:	4606      	mov	r6, r0
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	d1e2      	bne.n	8003b80 <__ssputs_r+0x70>
 8003bba:	6921      	ldr	r1, [r4, #16]
 8003bbc:	4650      	mov	r0, sl
 8003bbe:	f000 faa9 	bl	8004114 <_free_r>
 8003bc2:	e7c8      	b.n	8003b56 <__ssputs_r+0x46>

08003bc4 <_svfiprintf_r>:
 8003bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc8:	461d      	mov	r5, r3
 8003bca:	898b      	ldrh	r3, [r1, #12]
 8003bcc:	b09d      	sub	sp, #116	; 0x74
 8003bce:	061f      	lsls	r7, r3, #24
 8003bd0:	4680      	mov	r8, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	4616      	mov	r6, r2
 8003bd6:	d50f      	bpl.n	8003bf8 <_svfiprintf_r+0x34>
 8003bd8:	690b      	ldr	r3, [r1, #16]
 8003bda:	b96b      	cbnz	r3, 8003bf8 <_svfiprintf_r+0x34>
 8003bdc:	2140      	movs	r1, #64	; 0x40
 8003bde:	f000 fae5 	bl	80041ac <_malloc_r>
 8003be2:	6020      	str	r0, [r4, #0]
 8003be4:	6120      	str	r0, [r4, #16]
 8003be6:	b928      	cbnz	r0, 8003bf4 <_svfiprintf_r+0x30>
 8003be8:	230c      	movs	r3, #12
 8003bea:	f8c8 3000 	str.w	r3, [r8]
 8003bee:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf2:	e0c8      	b.n	8003d86 <_svfiprintf_r+0x1c2>
 8003bf4:	2340      	movs	r3, #64	; 0x40
 8003bf6:	6163      	str	r3, [r4, #20]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c02:	2330      	movs	r3, #48	; 0x30
 8003c04:	f04f 0b01 	mov.w	fp, #1
 8003c08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c0c:	9503      	str	r5, [sp, #12]
 8003c0e:	4637      	mov	r7, r6
 8003c10:	463d      	mov	r5, r7
 8003c12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c16:	b10b      	cbz	r3, 8003c1c <_svfiprintf_r+0x58>
 8003c18:	2b25      	cmp	r3, #37	; 0x25
 8003c1a:	d13e      	bne.n	8003c9a <_svfiprintf_r+0xd6>
 8003c1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003c20:	d00b      	beq.n	8003c3a <_svfiprintf_r+0x76>
 8003c22:	4653      	mov	r3, sl
 8003c24:	4632      	mov	r2, r6
 8003c26:	4621      	mov	r1, r4
 8003c28:	4640      	mov	r0, r8
 8003c2a:	f7ff ff71 	bl	8003b10 <__ssputs_r>
 8003c2e:	3001      	adds	r0, #1
 8003c30:	f000 80a4 	beq.w	8003d7c <_svfiprintf_r+0x1b8>
 8003c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c36:	4453      	add	r3, sl
 8003c38:	9309      	str	r3, [sp, #36]	; 0x24
 8003c3a:	783b      	ldrb	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 809d 	beq.w	8003d7c <_svfiprintf_r+0x1b8>
 8003c42:	2300      	movs	r3, #0
 8003c44:	f04f 32ff 	mov.w	r2, #4294967295
 8003c48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c4c:	9304      	str	r3, [sp, #16]
 8003c4e:	9307      	str	r3, [sp, #28]
 8003c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c54:	931a      	str	r3, [sp, #104]	; 0x68
 8003c56:	462f      	mov	r7, r5
 8003c58:	2205      	movs	r2, #5
 8003c5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003c5e:	4850      	ldr	r0, [pc, #320]	; (8003da0 <_svfiprintf_r+0x1dc>)
 8003c60:	f000 fa30 	bl	80040c4 <memchr>
 8003c64:	9b04      	ldr	r3, [sp, #16]
 8003c66:	b9d0      	cbnz	r0, 8003c9e <_svfiprintf_r+0xda>
 8003c68:	06d9      	lsls	r1, r3, #27
 8003c6a:	bf44      	itt	mi
 8003c6c:	2220      	movmi	r2, #32
 8003c6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c72:	071a      	lsls	r2, r3, #28
 8003c74:	bf44      	itt	mi
 8003c76:	222b      	movmi	r2, #43	; 0x2b
 8003c78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c7c:	782a      	ldrb	r2, [r5, #0]
 8003c7e:	2a2a      	cmp	r2, #42	; 0x2a
 8003c80:	d015      	beq.n	8003cae <_svfiprintf_r+0xea>
 8003c82:	462f      	mov	r7, r5
 8003c84:	2000      	movs	r0, #0
 8003c86:	250a      	movs	r5, #10
 8003c88:	9a07      	ldr	r2, [sp, #28]
 8003c8a:	4639      	mov	r1, r7
 8003c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c90:	3b30      	subs	r3, #48	; 0x30
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	d94d      	bls.n	8003d32 <_svfiprintf_r+0x16e>
 8003c96:	b1b8      	cbz	r0, 8003cc8 <_svfiprintf_r+0x104>
 8003c98:	e00f      	b.n	8003cba <_svfiprintf_r+0xf6>
 8003c9a:	462f      	mov	r7, r5
 8003c9c:	e7b8      	b.n	8003c10 <_svfiprintf_r+0x4c>
 8003c9e:	4a40      	ldr	r2, [pc, #256]	; (8003da0 <_svfiprintf_r+0x1dc>)
 8003ca0:	463d      	mov	r5, r7
 8003ca2:	1a80      	subs	r0, r0, r2
 8003ca4:	fa0b f000 	lsl.w	r0, fp, r0
 8003ca8:	4318      	orrs	r0, r3
 8003caa:	9004      	str	r0, [sp, #16]
 8003cac:	e7d3      	b.n	8003c56 <_svfiprintf_r+0x92>
 8003cae:	9a03      	ldr	r2, [sp, #12]
 8003cb0:	1d11      	adds	r1, r2, #4
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	9103      	str	r1, [sp, #12]
 8003cb6:	2a00      	cmp	r2, #0
 8003cb8:	db01      	blt.n	8003cbe <_svfiprintf_r+0xfa>
 8003cba:	9207      	str	r2, [sp, #28]
 8003cbc:	e004      	b.n	8003cc8 <_svfiprintf_r+0x104>
 8003cbe:	4252      	negs	r2, r2
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	9207      	str	r2, [sp, #28]
 8003cc6:	9304      	str	r3, [sp, #16]
 8003cc8:	783b      	ldrb	r3, [r7, #0]
 8003cca:	2b2e      	cmp	r3, #46	; 0x2e
 8003ccc:	d10c      	bne.n	8003ce8 <_svfiprintf_r+0x124>
 8003cce:	787b      	ldrb	r3, [r7, #1]
 8003cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8003cd2:	d133      	bne.n	8003d3c <_svfiprintf_r+0x178>
 8003cd4:	9b03      	ldr	r3, [sp, #12]
 8003cd6:	3702      	adds	r7, #2
 8003cd8:	1d1a      	adds	r2, r3, #4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	9203      	str	r2, [sp, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bfb8      	it	lt
 8003ce2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ce6:	9305      	str	r3, [sp, #20]
 8003ce8:	4d2e      	ldr	r5, [pc, #184]	; (8003da4 <_svfiprintf_r+0x1e0>)
 8003cea:	2203      	movs	r2, #3
 8003cec:	7839      	ldrb	r1, [r7, #0]
 8003cee:	4628      	mov	r0, r5
 8003cf0:	f000 f9e8 	bl	80040c4 <memchr>
 8003cf4:	b138      	cbz	r0, 8003d06 <_svfiprintf_r+0x142>
 8003cf6:	2340      	movs	r3, #64	; 0x40
 8003cf8:	1b40      	subs	r0, r0, r5
 8003cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8003cfe:	9b04      	ldr	r3, [sp, #16]
 8003d00:	3701      	adds	r7, #1
 8003d02:	4303      	orrs	r3, r0
 8003d04:	9304      	str	r3, [sp, #16]
 8003d06:	7839      	ldrb	r1, [r7, #0]
 8003d08:	2206      	movs	r2, #6
 8003d0a:	4827      	ldr	r0, [pc, #156]	; (8003da8 <_svfiprintf_r+0x1e4>)
 8003d0c:	1c7e      	adds	r6, r7, #1
 8003d0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d12:	f000 f9d7 	bl	80040c4 <memchr>
 8003d16:	2800      	cmp	r0, #0
 8003d18:	d038      	beq.n	8003d8c <_svfiprintf_r+0x1c8>
 8003d1a:	4b24      	ldr	r3, [pc, #144]	; (8003dac <_svfiprintf_r+0x1e8>)
 8003d1c:	bb13      	cbnz	r3, 8003d64 <_svfiprintf_r+0x1a0>
 8003d1e:	9b03      	ldr	r3, [sp, #12]
 8003d20:	3307      	adds	r3, #7
 8003d22:	f023 0307 	bic.w	r3, r3, #7
 8003d26:	3308      	adds	r3, #8
 8003d28:	9303      	str	r3, [sp, #12]
 8003d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d2c:	444b      	add	r3, r9
 8003d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d30:	e76d      	b.n	8003c0e <_svfiprintf_r+0x4a>
 8003d32:	fb05 3202 	mla	r2, r5, r2, r3
 8003d36:	2001      	movs	r0, #1
 8003d38:	460f      	mov	r7, r1
 8003d3a:	e7a6      	b.n	8003c8a <_svfiprintf_r+0xc6>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	250a      	movs	r5, #10
 8003d40:	4619      	mov	r1, r3
 8003d42:	3701      	adds	r7, #1
 8003d44:	9305      	str	r3, [sp, #20]
 8003d46:	4638      	mov	r0, r7
 8003d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d4c:	3a30      	subs	r2, #48	; 0x30
 8003d4e:	2a09      	cmp	r2, #9
 8003d50:	d903      	bls.n	8003d5a <_svfiprintf_r+0x196>
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0c8      	beq.n	8003ce8 <_svfiprintf_r+0x124>
 8003d56:	9105      	str	r1, [sp, #20]
 8003d58:	e7c6      	b.n	8003ce8 <_svfiprintf_r+0x124>
 8003d5a:	fb05 2101 	mla	r1, r5, r1, r2
 8003d5e:	2301      	movs	r3, #1
 8003d60:	4607      	mov	r7, r0
 8003d62:	e7f0      	b.n	8003d46 <_svfiprintf_r+0x182>
 8003d64:	ab03      	add	r3, sp, #12
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4622      	mov	r2, r4
 8003d6a:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <_svfiprintf_r+0x1ec>)
 8003d6c:	a904      	add	r1, sp, #16
 8003d6e:	4640      	mov	r0, r8
 8003d70:	f3af 8000 	nop.w
 8003d74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d78:	4681      	mov	r9, r0
 8003d7a:	d1d6      	bne.n	8003d2a <_svfiprintf_r+0x166>
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	065b      	lsls	r3, r3, #25
 8003d80:	f53f af35 	bmi.w	8003bee <_svfiprintf_r+0x2a>
 8003d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d86:	b01d      	add	sp, #116	; 0x74
 8003d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8c:	ab03      	add	r3, sp, #12
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	4622      	mov	r2, r4
 8003d92:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <_svfiprintf_r+0x1ec>)
 8003d94:	a904      	add	r1, sp, #16
 8003d96:	4640      	mov	r0, r8
 8003d98:	f000 f882 	bl	8003ea0 <_printf_i>
 8003d9c:	e7ea      	b.n	8003d74 <_svfiprintf_r+0x1b0>
 8003d9e:	bf00      	nop
 8003da0:	08004478 	.word	0x08004478
 8003da4:	0800447e 	.word	0x0800447e
 8003da8:	08004482 	.word	0x08004482
 8003dac:	00000000 	.word	0x00000000
 8003db0:	08003b11 	.word	0x08003b11

08003db4 <_printf_common>:
 8003db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db8:	4691      	mov	r9, r2
 8003dba:	461f      	mov	r7, r3
 8003dbc:	688a      	ldr	r2, [r1, #8]
 8003dbe:	690b      	ldr	r3, [r1, #16]
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	bfb8      	it	lt
 8003dc6:	4613      	movlt	r3, r2
 8003dc8:	f8c9 3000 	str.w	r3, [r9]
 8003dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dd6:	b112      	cbz	r2, 8003dde <_printf_common+0x2a>
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f8c9 3000 	str.w	r3, [r9]
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	0699      	lsls	r1, r3, #26
 8003de2:	bf42      	ittt	mi
 8003de4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003de8:	3302      	addmi	r3, #2
 8003dea:	f8c9 3000 	strmi.w	r3, [r9]
 8003dee:	6825      	ldr	r5, [r4, #0]
 8003df0:	f015 0506 	ands.w	r5, r5, #6
 8003df4:	d107      	bne.n	8003e06 <_printf_common+0x52>
 8003df6:	f104 0a19 	add.w	sl, r4, #25
 8003dfa:	68e3      	ldr	r3, [r4, #12]
 8003dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	42ab      	cmp	r3, r5
 8003e04:	dc29      	bgt.n	8003e5a <_printf_common+0xa6>
 8003e06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e0a:	6822      	ldr	r2, [r4, #0]
 8003e0c:	3300      	adds	r3, #0
 8003e0e:	bf18      	it	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	0692      	lsls	r2, r2, #26
 8003e14:	d42e      	bmi.n	8003e74 <_printf_common+0xc0>
 8003e16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e1a:	4639      	mov	r1, r7
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	47c0      	blx	r8
 8003e20:	3001      	adds	r0, #1
 8003e22:	d021      	beq.n	8003e68 <_printf_common+0xb4>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	68e5      	ldr	r5, [r4, #12]
 8003e28:	f003 0306 	and.w	r3, r3, #6
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	bf18      	it	ne
 8003e30:	2500      	movne	r5, #0
 8003e32:	f8d9 2000 	ldr.w	r2, [r9]
 8003e36:	f04f 0900 	mov.w	r9, #0
 8003e3a:	bf08      	it	eq
 8003e3c:	1aad      	subeq	r5, r5, r2
 8003e3e:	68a3      	ldr	r3, [r4, #8]
 8003e40:	6922      	ldr	r2, [r4, #16]
 8003e42:	bf08      	it	eq
 8003e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	bfc4      	itt	gt
 8003e4c:	1a9b      	subgt	r3, r3, r2
 8003e4e:	18ed      	addgt	r5, r5, r3
 8003e50:	341a      	adds	r4, #26
 8003e52:	454d      	cmp	r5, r9
 8003e54:	d11a      	bne.n	8003e8c <_printf_common+0xd8>
 8003e56:	2000      	movs	r0, #0
 8003e58:	e008      	b.n	8003e6c <_printf_common+0xb8>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4652      	mov	r2, sl
 8003e5e:	4639      	mov	r1, r7
 8003e60:	4630      	mov	r0, r6
 8003e62:	47c0      	blx	r8
 8003e64:	3001      	adds	r0, #1
 8003e66:	d103      	bne.n	8003e70 <_printf_common+0xbc>
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e70:	3501      	adds	r5, #1
 8003e72:	e7c2      	b.n	8003dfa <_printf_common+0x46>
 8003e74:	2030      	movs	r0, #48	; 0x30
 8003e76:	18e1      	adds	r1, r4, r3
 8003e78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e82:	4422      	add	r2, r4
 8003e84:	3302      	adds	r3, #2
 8003e86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e8a:	e7c4      	b.n	8003e16 <_printf_common+0x62>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	4622      	mov	r2, r4
 8003e90:	4639      	mov	r1, r7
 8003e92:	4630      	mov	r0, r6
 8003e94:	47c0      	blx	r8
 8003e96:	3001      	adds	r0, #1
 8003e98:	d0e6      	beq.n	8003e68 <_printf_common+0xb4>
 8003e9a:	f109 0901 	add.w	r9, r9, #1
 8003e9e:	e7d8      	b.n	8003e52 <_printf_common+0x9e>

08003ea0 <_printf_i>:
 8003ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ea4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	7e09      	ldrb	r1, [r1, #24]
 8003eac:	b085      	sub	sp, #20
 8003eae:	296e      	cmp	r1, #110	; 0x6e
 8003eb0:	4617      	mov	r7, r2
 8003eb2:	4606      	mov	r6, r0
 8003eb4:	4698      	mov	r8, r3
 8003eb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003eb8:	f000 80b3 	beq.w	8004022 <_printf_i+0x182>
 8003ebc:	d822      	bhi.n	8003f04 <_printf_i+0x64>
 8003ebe:	2963      	cmp	r1, #99	; 0x63
 8003ec0:	d036      	beq.n	8003f30 <_printf_i+0x90>
 8003ec2:	d80a      	bhi.n	8003eda <_printf_i+0x3a>
 8003ec4:	2900      	cmp	r1, #0
 8003ec6:	f000 80b9 	beq.w	800403c <_printf_i+0x19c>
 8003eca:	2958      	cmp	r1, #88	; 0x58
 8003ecc:	f000 8083 	beq.w	8003fd6 <_printf_i+0x136>
 8003ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ed4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ed8:	e032      	b.n	8003f40 <_printf_i+0xa0>
 8003eda:	2964      	cmp	r1, #100	; 0x64
 8003edc:	d001      	beq.n	8003ee2 <_printf_i+0x42>
 8003ede:	2969      	cmp	r1, #105	; 0x69
 8003ee0:	d1f6      	bne.n	8003ed0 <_printf_i+0x30>
 8003ee2:	6820      	ldr	r0, [r4, #0]
 8003ee4:	6813      	ldr	r3, [r2, #0]
 8003ee6:	0605      	lsls	r5, r0, #24
 8003ee8:	f103 0104 	add.w	r1, r3, #4
 8003eec:	d52a      	bpl.n	8003f44 <_printf_i+0xa4>
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6011      	str	r1, [r2, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	da03      	bge.n	8003efe <_printf_i+0x5e>
 8003ef6:	222d      	movs	r2, #45	; 0x2d
 8003ef8:	425b      	negs	r3, r3
 8003efa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003efe:	486f      	ldr	r0, [pc, #444]	; (80040bc <_printf_i+0x21c>)
 8003f00:	220a      	movs	r2, #10
 8003f02:	e039      	b.n	8003f78 <_printf_i+0xd8>
 8003f04:	2973      	cmp	r1, #115	; 0x73
 8003f06:	f000 809d 	beq.w	8004044 <_printf_i+0x1a4>
 8003f0a:	d808      	bhi.n	8003f1e <_printf_i+0x7e>
 8003f0c:	296f      	cmp	r1, #111	; 0x6f
 8003f0e:	d020      	beq.n	8003f52 <_printf_i+0xb2>
 8003f10:	2970      	cmp	r1, #112	; 0x70
 8003f12:	d1dd      	bne.n	8003ed0 <_printf_i+0x30>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	f043 0320 	orr.w	r3, r3, #32
 8003f1a:	6023      	str	r3, [r4, #0]
 8003f1c:	e003      	b.n	8003f26 <_printf_i+0x86>
 8003f1e:	2975      	cmp	r1, #117	; 0x75
 8003f20:	d017      	beq.n	8003f52 <_printf_i+0xb2>
 8003f22:	2978      	cmp	r1, #120	; 0x78
 8003f24:	d1d4      	bne.n	8003ed0 <_printf_i+0x30>
 8003f26:	2378      	movs	r3, #120	; 0x78
 8003f28:	4865      	ldr	r0, [pc, #404]	; (80040c0 <_printf_i+0x220>)
 8003f2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f2e:	e055      	b.n	8003fdc <_printf_i+0x13c>
 8003f30:	6813      	ldr	r3, [r2, #0]
 8003f32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f36:	1d19      	adds	r1, r3, #4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6011      	str	r1, [r2, #0]
 8003f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f40:	2301      	movs	r3, #1
 8003f42:	e08c      	b.n	800405e <_printf_i+0x1be>
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f4a:	6011      	str	r1, [r2, #0]
 8003f4c:	bf18      	it	ne
 8003f4e:	b21b      	sxthne	r3, r3
 8003f50:	e7cf      	b.n	8003ef2 <_printf_i+0x52>
 8003f52:	6813      	ldr	r3, [r2, #0]
 8003f54:	6825      	ldr	r5, [r4, #0]
 8003f56:	1d18      	adds	r0, r3, #4
 8003f58:	6010      	str	r0, [r2, #0]
 8003f5a:	0628      	lsls	r0, r5, #24
 8003f5c:	d501      	bpl.n	8003f62 <_printf_i+0xc2>
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	e002      	b.n	8003f68 <_printf_i+0xc8>
 8003f62:	0668      	lsls	r0, r5, #25
 8003f64:	d5fb      	bpl.n	8003f5e <_printf_i+0xbe>
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	296f      	cmp	r1, #111	; 0x6f
 8003f6a:	bf14      	ite	ne
 8003f6c:	220a      	movne	r2, #10
 8003f6e:	2208      	moveq	r2, #8
 8003f70:	4852      	ldr	r0, [pc, #328]	; (80040bc <_printf_i+0x21c>)
 8003f72:	2100      	movs	r1, #0
 8003f74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f78:	6865      	ldr	r5, [r4, #4]
 8003f7a:	2d00      	cmp	r5, #0
 8003f7c:	60a5      	str	r5, [r4, #8]
 8003f7e:	f2c0 8095 	blt.w	80040ac <_printf_i+0x20c>
 8003f82:	6821      	ldr	r1, [r4, #0]
 8003f84:	f021 0104 	bic.w	r1, r1, #4
 8003f88:	6021      	str	r1, [r4, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d13d      	bne.n	800400a <_printf_i+0x16a>
 8003f8e:	2d00      	cmp	r5, #0
 8003f90:	f040 808e 	bne.w	80040b0 <_printf_i+0x210>
 8003f94:	4665      	mov	r5, ip
 8003f96:	2a08      	cmp	r2, #8
 8003f98:	d10b      	bne.n	8003fb2 <_printf_i+0x112>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	07db      	lsls	r3, r3, #31
 8003f9e:	d508      	bpl.n	8003fb2 <_printf_i+0x112>
 8003fa0:	6923      	ldr	r3, [r4, #16]
 8003fa2:	6862      	ldr	r2, [r4, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	bfde      	ittt	le
 8003fa8:	2330      	movle	r3, #48	; 0x30
 8003faa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fb2:	ebac 0305 	sub.w	r3, ip, r5
 8003fb6:	6123      	str	r3, [r4, #16]
 8003fb8:	f8cd 8000 	str.w	r8, [sp]
 8003fbc:	463b      	mov	r3, r7
 8003fbe:	aa03      	add	r2, sp, #12
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f7ff fef6 	bl	8003db4 <_printf_common>
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d14d      	bne.n	8004068 <_printf_i+0x1c8>
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd0:	b005      	add	sp, #20
 8003fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fd6:	4839      	ldr	r0, [pc, #228]	; (80040bc <_printf_i+0x21c>)
 8003fd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003fdc:	6813      	ldr	r3, [r2, #0]
 8003fde:	6821      	ldr	r1, [r4, #0]
 8003fe0:	1d1d      	adds	r5, r3, #4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6015      	str	r5, [r2, #0]
 8003fe6:	060a      	lsls	r2, r1, #24
 8003fe8:	d50b      	bpl.n	8004002 <_printf_i+0x162>
 8003fea:	07ca      	lsls	r2, r1, #31
 8003fec:	bf44      	itt	mi
 8003fee:	f041 0120 	orrmi.w	r1, r1, #32
 8003ff2:	6021      	strmi	r1, [r4, #0]
 8003ff4:	b91b      	cbnz	r3, 8003ffe <_printf_i+0x15e>
 8003ff6:	6822      	ldr	r2, [r4, #0]
 8003ff8:	f022 0220 	bic.w	r2, r2, #32
 8003ffc:	6022      	str	r2, [r4, #0]
 8003ffe:	2210      	movs	r2, #16
 8004000:	e7b7      	b.n	8003f72 <_printf_i+0xd2>
 8004002:	064d      	lsls	r5, r1, #25
 8004004:	bf48      	it	mi
 8004006:	b29b      	uxthmi	r3, r3
 8004008:	e7ef      	b.n	8003fea <_printf_i+0x14a>
 800400a:	4665      	mov	r5, ip
 800400c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004010:	fb02 3311 	mls	r3, r2, r1, r3
 8004014:	5cc3      	ldrb	r3, [r0, r3]
 8004016:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800401a:	460b      	mov	r3, r1
 800401c:	2900      	cmp	r1, #0
 800401e:	d1f5      	bne.n	800400c <_printf_i+0x16c>
 8004020:	e7b9      	b.n	8003f96 <_printf_i+0xf6>
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	6825      	ldr	r5, [r4, #0]
 8004026:	1d18      	adds	r0, r3, #4
 8004028:	6961      	ldr	r1, [r4, #20]
 800402a:	6010      	str	r0, [r2, #0]
 800402c:	0628      	lsls	r0, r5, #24
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	d501      	bpl.n	8004036 <_printf_i+0x196>
 8004032:	6019      	str	r1, [r3, #0]
 8004034:	e002      	b.n	800403c <_printf_i+0x19c>
 8004036:	066a      	lsls	r2, r5, #25
 8004038:	d5fb      	bpl.n	8004032 <_printf_i+0x192>
 800403a:	8019      	strh	r1, [r3, #0]
 800403c:	2300      	movs	r3, #0
 800403e:	4665      	mov	r5, ip
 8004040:	6123      	str	r3, [r4, #16]
 8004042:	e7b9      	b.n	8003fb8 <_printf_i+0x118>
 8004044:	6813      	ldr	r3, [r2, #0]
 8004046:	1d19      	adds	r1, r3, #4
 8004048:	6011      	str	r1, [r2, #0]
 800404a:	681d      	ldr	r5, [r3, #0]
 800404c:	6862      	ldr	r2, [r4, #4]
 800404e:	2100      	movs	r1, #0
 8004050:	4628      	mov	r0, r5
 8004052:	f000 f837 	bl	80040c4 <memchr>
 8004056:	b108      	cbz	r0, 800405c <_printf_i+0x1bc>
 8004058:	1b40      	subs	r0, r0, r5
 800405a:	6060      	str	r0, [r4, #4]
 800405c:	6863      	ldr	r3, [r4, #4]
 800405e:	6123      	str	r3, [r4, #16]
 8004060:	2300      	movs	r3, #0
 8004062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004066:	e7a7      	b.n	8003fb8 <_printf_i+0x118>
 8004068:	6923      	ldr	r3, [r4, #16]
 800406a:	462a      	mov	r2, r5
 800406c:	4639      	mov	r1, r7
 800406e:	4630      	mov	r0, r6
 8004070:	47c0      	blx	r8
 8004072:	3001      	adds	r0, #1
 8004074:	d0aa      	beq.n	8003fcc <_printf_i+0x12c>
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	079b      	lsls	r3, r3, #30
 800407a:	d413      	bmi.n	80040a4 <_printf_i+0x204>
 800407c:	68e0      	ldr	r0, [r4, #12]
 800407e:	9b03      	ldr	r3, [sp, #12]
 8004080:	4298      	cmp	r0, r3
 8004082:	bfb8      	it	lt
 8004084:	4618      	movlt	r0, r3
 8004086:	e7a3      	b.n	8003fd0 <_printf_i+0x130>
 8004088:	2301      	movs	r3, #1
 800408a:	464a      	mov	r2, r9
 800408c:	4639      	mov	r1, r7
 800408e:	4630      	mov	r0, r6
 8004090:	47c0      	blx	r8
 8004092:	3001      	adds	r0, #1
 8004094:	d09a      	beq.n	8003fcc <_printf_i+0x12c>
 8004096:	3501      	adds	r5, #1
 8004098:	68e3      	ldr	r3, [r4, #12]
 800409a:	9a03      	ldr	r2, [sp, #12]
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	42ab      	cmp	r3, r5
 80040a0:	dcf2      	bgt.n	8004088 <_printf_i+0x1e8>
 80040a2:	e7eb      	b.n	800407c <_printf_i+0x1dc>
 80040a4:	2500      	movs	r5, #0
 80040a6:	f104 0919 	add.w	r9, r4, #25
 80040aa:	e7f5      	b.n	8004098 <_printf_i+0x1f8>
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ac      	bne.n	800400a <_printf_i+0x16a>
 80040b0:	7803      	ldrb	r3, [r0, #0]
 80040b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040ba:	e76c      	b.n	8003f96 <_printf_i+0xf6>
 80040bc:	08004489 	.word	0x08004489
 80040c0:	0800449a 	.word	0x0800449a

080040c4 <memchr>:
 80040c4:	b510      	push	{r4, lr}
 80040c6:	b2c9      	uxtb	r1, r1
 80040c8:	4402      	add	r2, r0
 80040ca:	4290      	cmp	r0, r2
 80040cc:	4603      	mov	r3, r0
 80040ce:	d101      	bne.n	80040d4 <memchr+0x10>
 80040d0:	2300      	movs	r3, #0
 80040d2:	e003      	b.n	80040dc <memchr+0x18>
 80040d4:	781c      	ldrb	r4, [r3, #0]
 80040d6:	3001      	adds	r0, #1
 80040d8:	428c      	cmp	r4, r1
 80040da:	d1f6      	bne.n	80040ca <memchr+0x6>
 80040dc:	4618      	mov	r0, r3
 80040de:	bd10      	pop	{r4, pc}

080040e0 <memmove>:
 80040e0:	4288      	cmp	r0, r1
 80040e2:	b510      	push	{r4, lr}
 80040e4:	eb01 0302 	add.w	r3, r1, r2
 80040e8:	d807      	bhi.n	80040fa <memmove+0x1a>
 80040ea:	1e42      	subs	r2, r0, #1
 80040ec:	4299      	cmp	r1, r3
 80040ee:	d00a      	beq.n	8004106 <memmove+0x26>
 80040f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80040f8:	e7f8      	b.n	80040ec <memmove+0xc>
 80040fa:	4283      	cmp	r3, r0
 80040fc:	d9f5      	bls.n	80040ea <memmove+0xa>
 80040fe:	1881      	adds	r1, r0, r2
 8004100:	1ad2      	subs	r2, r2, r3
 8004102:	42d3      	cmn	r3, r2
 8004104:	d100      	bne.n	8004108 <memmove+0x28>
 8004106:	bd10      	pop	{r4, pc}
 8004108:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800410c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004110:	e7f7      	b.n	8004102 <memmove+0x22>
	...

08004114 <_free_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	4605      	mov	r5, r0
 8004118:	2900      	cmp	r1, #0
 800411a:	d043      	beq.n	80041a4 <_free_r+0x90>
 800411c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004120:	1f0c      	subs	r4, r1, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	bfb8      	it	lt
 8004126:	18e4      	addlt	r4, r4, r3
 8004128:	f000 f8d0 	bl	80042cc <__malloc_lock>
 800412c:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <_free_r+0x94>)
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	4610      	mov	r0, r2
 8004132:	b933      	cbnz	r3, 8004142 <_free_r+0x2e>
 8004134:	6063      	str	r3, [r4, #4]
 8004136:	6014      	str	r4, [r2, #0]
 8004138:	4628      	mov	r0, r5
 800413a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800413e:	f000 b8c6 	b.w	80042ce <__malloc_unlock>
 8004142:	42a3      	cmp	r3, r4
 8004144:	d90b      	bls.n	800415e <_free_r+0x4a>
 8004146:	6821      	ldr	r1, [r4, #0]
 8004148:	1862      	adds	r2, r4, r1
 800414a:	4293      	cmp	r3, r2
 800414c:	bf01      	itttt	eq
 800414e:	681a      	ldreq	r2, [r3, #0]
 8004150:	685b      	ldreq	r3, [r3, #4]
 8004152:	1852      	addeq	r2, r2, r1
 8004154:	6022      	streq	r2, [r4, #0]
 8004156:	6063      	str	r3, [r4, #4]
 8004158:	6004      	str	r4, [r0, #0]
 800415a:	e7ed      	b.n	8004138 <_free_r+0x24>
 800415c:	4613      	mov	r3, r2
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	b10a      	cbz	r2, 8004166 <_free_r+0x52>
 8004162:	42a2      	cmp	r2, r4
 8004164:	d9fa      	bls.n	800415c <_free_r+0x48>
 8004166:	6819      	ldr	r1, [r3, #0]
 8004168:	1858      	adds	r0, r3, r1
 800416a:	42a0      	cmp	r0, r4
 800416c:	d10b      	bne.n	8004186 <_free_r+0x72>
 800416e:	6820      	ldr	r0, [r4, #0]
 8004170:	4401      	add	r1, r0
 8004172:	1858      	adds	r0, r3, r1
 8004174:	4282      	cmp	r2, r0
 8004176:	6019      	str	r1, [r3, #0]
 8004178:	d1de      	bne.n	8004138 <_free_r+0x24>
 800417a:	6810      	ldr	r0, [r2, #0]
 800417c:	6852      	ldr	r2, [r2, #4]
 800417e:	4401      	add	r1, r0
 8004180:	6019      	str	r1, [r3, #0]
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	e7d8      	b.n	8004138 <_free_r+0x24>
 8004186:	d902      	bls.n	800418e <_free_r+0x7a>
 8004188:	230c      	movs	r3, #12
 800418a:	602b      	str	r3, [r5, #0]
 800418c:	e7d4      	b.n	8004138 <_free_r+0x24>
 800418e:	6820      	ldr	r0, [r4, #0]
 8004190:	1821      	adds	r1, r4, r0
 8004192:	428a      	cmp	r2, r1
 8004194:	bf01      	itttt	eq
 8004196:	6811      	ldreq	r1, [r2, #0]
 8004198:	6852      	ldreq	r2, [r2, #4]
 800419a:	1809      	addeq	r1, r1, r0
 800419c:	6021      	streq	r1, [r4, #0]
 800419e:	6062      	str	r2, [r4, #4]
 80041a0:	605c      	str	r4, [r3, #4]
 80041a2:	e7c9      	b.n	8004138 <_free_r+0x24>
 80041a4:	bd38      	pop	{r3, r4, r5, pc}
 80041a6:	bf00      	nop
 80041a8:	2000029c 	.word	0x2000029c

080041ac <_malloc_r>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	1ccd      	adds	r5, r1, #3
 80041b0:	f025 0503 	bic.w	r5, r5, #3
 80041b4:	3508      	adds	r5, #8
 80041b6:	2d0c      	cmp	r5, #12
 80041b8:	bf38      	it	cc
 80041ba:	250c      	movcc	r5, #12
 80041bc:	2d00      	cmp	r5, #0
 80041be:	4606      	mov	r6, r0
 80041c0:	db01      	blt.n	80041c6 <_malloc_r+0x1a>
 80041c2:	42a9      	cmp	r1, r5
 80041c4:	d903      	bls.n	80041ce <_malloc_r+0x22>
 80041c6:	230c      	movs	r3, #12
 80041c8:	6033      	str	r3, [r6, #0]
 80041ca:	2000      	movs	r0, #0
 80041cc:	bd70      	pop	{r4, r5, r6, pc}
 80041ce:	f000 f87d 	bl	80042cc <__malloc_lock>
 80041d2:	4a21      	ldr	r2, [pc, #132]	; (8004258 <_malloc_r+0xac>)
 80041d4:	6814      	ldr	r4, [r2, #0]
 80041d6:	4621      	mov	r1, r4
 80041d8:	b991      	cbnz	r1, 8004200 <_malloc_r+0x54>
 80041da:	4c20      	ldr	r4, [pc, #128]	; (800425c <_malloc_r+0xb0>)
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	b91b      	cbnz	r3, 80041e8 <_malloc_r+0x3c>
 80041e0:	4630      	mov	r0, r6
 80041e2:	f000 f863 	bl	80042ac <_sbrk_r>
 80041e6:	6020      	str	r0, [r4, #0]
 80041e8:	4629      	mov	r1, r5
 80041ea:	4630      	mov	r0, r6
 80041ec:	f000 f85e 	bl	80042ac <_sbrk_r>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	d124      	bne.n	800423e <_malloc_r+0x92>
 80041f4:	230c      	movs	r3, #12
 80041f6:	4630      	mov	r0, r6
 80041f8:	6033      	str	r3, [r6, #0]
 80041fa:	f000 f868 	bl	80042ce <__malloc_unlock>
 80041fe:	e7e4      	b.n	80041ca <_malloc_r+0x1e>
 8004200:	680b      	ldr	r3, [r1, #0]
 8004202:	1b5b      	subs	r3, r3, r5
 8004204:	d418      	bmi.n	8004238 <_malloc_r+0x8c>
 8004206:	2b0b      	cmp	r3, #11
 8004208:	d90f      	bls.n	800422a <_malloc_r+0x7e>
 800420a:	600b      	str	r3, [r1, #0]
 800420c:	18cc      	adds	r4, r1, r3
 800420e:	50cd      	str	r5, [r1, r3]
 8004210:	4630      	mov	r0, r6
 8004212:	f000 f85c 	bl	80042ce <__malloc_unlock>
 8004216:	f104 000b 	add.w	r0, r4, #11
 800421a:	1d23      	adds	r3, r4, #4
 800421c:	f020 0007 	bic.w	r0, r0, #7
 8004220:	1ac3      	subs	r3, r0, r3
 8004222:	d0d3      	beq.n	80041cc <_malloc_r+0x20>
 8004224:	425a      	negs	r2, r3
 8004226:	50e2      	str	r2, [r4, r3]
 8004228:	e7d0      	b.n	80041cc <_malloc_r+0x20>
 800422a:	684b      	ldr	r3, [r1, #4]
 800422c:	428c      	cmp	r4, r1
 800422e:	bf16      	itet	ne
 8004230:	6063      	strne	r3, [r4, #4]
 8004232:	6013      	streq	r3, [r2, #0]
 8004234:	460c      	movne	r4, r1
 8004236:	e7eb      	b.n	8004210 <_malloc_r+0x64>
 8004238:	460c      	mov	r4, r1
 800423a:	6849      	ldr	r1, [r1, #4]
 800423c:	e7cc      	b.n	80041d8 <_malloc_r+0x2c>
 800423e:	1cc4      	adds	r4, r0, #3
 8004240:	f024 0403 	bic.w	r4, r4, #3
 8004244:	42a0      	cmp	r0, r4
 8004246:	d005      	beq.n	8004254 <_malloc_r+0xa8>
 8004248:	1a21      	subs	r1, r4, r0
 800424a:	4630      	mov	r0, r6
 800424c:	f000 f82e 	bl	80042ac <_sbrk_r>
 8004250:	3001      	adds	r0, #1
 8004252:	d0cf      	beq.n	80041f4 <_malloc_r+0x48>
 8004254:	6025      	str	r5, [r4, #0]
 8004256:	e7db      	b.n	8004210 <_malloc_r+0x64>
 8004258:	2000029c 	.word	0x2000029c
 800425c:	200002a0 	.word	0x200002a0

08004260 <_realloc_r>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	4607      	mov	r7, r0
 8004264:	4614      	mov	r4, r2
 8004266:	460e      	mov	r6, r1
 8004268:	b921      	cbnz	r1, 8004274 <_realloc_r+0x14>
 800426a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800426e:	4611      	mov	r1, r2
 8004270:	f7ff bf9c 	b.w	80041ac <_malloc_r>
 8004274:	b922      	cbnz	r2, 8004280 <_realloc_r+0x20>
 8004276:	f7ff ff4d 	bl	8004114 <_free_r>
 800427a:	4625      	mov	r5, r4
 800427c:	4628      	mov	r0, r5
 800427e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004280:	f000 f826 	bl	80042d0 <_malloc_usable_size_r>
 8004284:	42a0      	cmp	r0, r4
 8004286:	d20f      	bcs.n	80042a8 <_realloc_r+0x48>
 8004288:	4621      	mov	r1, r4
 800428a:	4638      	mov	r0, r7
 800428c:	f7ff ff8e 	bl	80041ac <_malloc_r>
 8004290:	4605      	mov	r5, r0
 8004292:	2800      	cmp	r0, #0
 8004294:	d0f2      	beq.n	800427c <_realloc_r+0x1c>
 8004296:	4631      	mov	r1, r6
 8004298:	4622      	mov	r2, r4
 800429a:	f7ff fbe9 	bl	8003a70 <memcpy>
 800429e:	4631      	mov	r1, r6
 80042a0:	4638      	mov	r0, r7
 80042a2:	f7ff ff37 	bl	8004114 <_free_r>
 80042a6:	e7e9      	b.n	800427c <_realloc_r+0x1c>
 80042a8:	4635      	mov	r5, r6
 80042aa:	e7e7      	b.n	800427c <_realloc_r+0x1c>

080042ac <_sbrk_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	2300      	movs	r3, #0
 80042b0:	4c05      	ldr	r4, [pc, #20]	; (80042c8 <_sbrk_r+0x1c>)
 80042b2:	4605      	mov	r5, r0
 80042b4:	4608      	mov	r0, r1
 80042b6:	6023      	str	r3, [r4, #0]
 80042b8:	f7fd fcce 	bl	8001c58 <_sbrk>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_sbrk_r+0x1a>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_sbrk_r+0x1a>
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	20000398 	.word	0x20000398

080042cc <__malloc_lock>:
 80042cc:	4770      	bx	lr

080042ce <__malloc_unlock>:
 80042ce:	4770      	bx	lr

080042d0 <_malloc_usable_size_r>:
 80042d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042d4:	1f18      	subs	r0, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	bfbc      	itt	lt
 80042da:	580b      	ldrlt	r3, [r1, r0]
 80042dc:	18c0      	addlt	r0, r0, r3
 80042de:	4770      	bx	lr

080042e0 <ceil>:
 80042e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80042e8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80042ec:	2e13      	cmp	r6, #19
 80042ee:	4607      	mov	r7, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	460c      	mov	r4, r1
 80042f4:	4605      	mov	r5, r0
 80042f6:	dc31      	bgt.n	800435c <ceil+0x7c>
 80042f8:	2e00      	cmp	r6, #0
 80042fa:	da12      	bge.n	8004322 <ceil+0x42>
 80042fc:	a334      	add	r3, pc, #208	; (adr r3, 80043d0 <ceil+0xf0>)
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	f7fb ff33 	bl	800016c <__adddf3>
 8004306:	2200      	movs	r2, #0
 8004308:	2300      	movs	r3, #0
 800430a:	f7fc fb75 	bl	80009f8 <__aeabi_dcmpgt>
 800430e:	b128      	cbz	r0, 800431c <ceil+0x3c>
 8004310:	2c00      	cmp	r4, #0
 8004312:	db57      	blt.n	80043c4 <ceil+0xe4>
 8004314:	433c      	orrs	r4, r7
 8004316:	d059      	beq.n	80043cc <ceil+0xec>
 8004318:	2500      	movs	r5, #0
 800431a:	4c2f      	ldr	r4, [pc, #188]	; (80043d8 <ceil+0xf8>)
 800431c:	4623      	mov	r3, r4
 800431e:	462f      	mov	r7, r5
 8004320:	e026      	b.n	8004370 <ceil+0x90>
 8004322:	4a2e      	ldr	r2, [pc, #184]	; (80043dc <ceil+0xfc>)
 8004324:	fa42 f806 	asr.w	r8, r2, r6
 8004328:	ea01 0208 	and.w	r2, r1, r8
 800432c:	4302      	orrs	r2, r0
 800432e:	d01f      	beq.n	8004370 <ceil+0x90>
 8004330:	a327      	add	r3, pc, #156	; (adr r3, 80043d0 <ceil+0xf0>)
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	f7fb ff19 	bl	800016c <__adddf3>
 800433a:	2200      	movs	r2, #0
 800433c:	2300      	movs	r3, #0
 800433e:	f7fc fb5b 	bl	80009f8 <__aeabi_dcmpgt>
 8004342:	2800      	cmp	r0, #0
 8004344:	d0ea      	beq.n	800431c <ceil+0x3c>
 8004346:	2c00      	cmp	r4, #0
 8004348:	bfc2      	ittt	gt
 800434a:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800434e:	fa43 f606 	asrgt.w	r6, r3, r6
 8004352:	19a4      	addgt	r4, r4, r6
 8004354:	ea24 0408 	bic.w	r4, r4, r8
 8004358:	2500      	movs	r5, #0
 800435a:	e7df      	b.n	800431c <ceil+0x3c>
 800435c:	2e33      	cmp	r6, #51	; 0x33
 800435e:	dd0b      	ble.n	8004378 <ceil+0x98>
 8004360:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004364:	d104      	bne.n	8004370 <ceil+0x90>
 8004366:	4602      	mov	r2, r0
 8004368:	f7fb ff00 	bl	800016c <__adddf3>
 800436c:	4607      	mov	r7, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4638      	mov	r0, r7
 8004372:	4619      	mov	r1, r3
 8004374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004378:	f04f 32ff 	mov.w	r2, #4294967295
 800437c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004380:	fa22 f808 	lsr.w	r8, r2, r8
 8004384:	ea18 0f00 	tst.w	r8, r0
 8004388:	d0f2      	beq.n	8004370 <ceil+0x90>
 800438a:	a311      	add	r3, pc, #68	; (adr r3, 80043d0 <ceil+0xf0>)
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	f7fb feec 	bl	800016c <__adddf3>
 8004394:	2200      	movs	r2, #0
 8004396:	2300      	movs	r3, #0
 8004398:	f7fc fb2e 	bl	80009f8 <__aeabi_dcmpgt>
 800439c:	2800      	cmp	r0, #0
 800439e:	d0bd      	beq.n	800431c <ceil+0x3c>
 80043a0:	2c00      	cmp	r4, #0
 80043a2:	dd02      	ble.n	80043aa <ceil+0xca>
 80043a4:	2e14      	cmp	r6, #20
 80043a6:	d103      	bne.n	80043b0 <ceil+0xd0>
 80043a8:	3401      	adds	r4, #1
 80043aa:	ea25 0508 	bic.w	r5, r5, r8
 80043ae:	e7b5      	b.n	800431c <ceil+0x3c>
 80043b0:	2301      	movs	r3, #1
 80043b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80043b6:	fa03 f606 	lsl.w	r6, r3, r6
 80043ba:	4435      	add	r5, r6
 80043bc:	42bd      	cmp	r5, r7
 80043be:	bf38      	it	cc
 80043c0:	18e4      	addcc	r4, r4, r3
 80043c2:	e7f2      	b.n	80043aa <ceil+0xca>
 80043c4:	2500      	movs	r5, #0
 80043c6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80043ca:	e7a7      	b.n	800431c <ceil+0x3c>
 80043cc:	4625      	mov	r5, r4
 80043ce:	e7a5      	b.n	800431c <ceil+0x3c>
 80043d0:	8800759c 	.word	0x8800759c
 80043d4:	7e37e43c 	.word	0x7e37e43c
 80043d8:	3ff00000 	.word	0x3ff00000
 80043dc:	000fffff 	.word	0x000fffff

080043e0 <_init>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	bf00      	nop
 80043e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e6:	bc08      	pop	{r3}
 80043e8:	469e      	mov	lr, r3
 80043ea:	4770      	bx	lr

080043ec <_fini>:
 80043ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ee:	bf00      	nop
 80043f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f2:	bc08      	pop	{r3}
 80043f4:	469e      	mov	lr, r3
 80043f6:	4770      	bx	lr
