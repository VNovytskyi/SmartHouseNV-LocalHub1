
LocalHub1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e50  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004ff8  08004ff8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ff8  08004ff8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000074  08005074  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08005074  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cad3  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ffa  00000000  00000000  0002cb70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e18  00000000  00000000  0002eb70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  0002f988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014fd1  00000000  00000000  00030688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a466  00000000  00000000  00045659  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000749c2  00000000  00000000  0004fabf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4481  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f64  00000000  00000000  000c44fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f48 	.word	0x08004f48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004f48 	.word	0x08004f48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a41      	ldr	r2, [pc, #260]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0310 	and.w	r3, r3, #16
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a78:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a3b      	ldr	r2, [pc, #236]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a7e:	f043 0320 	orr.w	r3, r3, #32
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b39      	ldr	r3, [pc, #228]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0320 	and.w	r3, r3, #32
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b36      	ldr	r3, [pc, #216]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a35      	ldr	r2, [pc, #212]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BuildInLed_GPIO_Port, BuildInLed_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac6:	482a      	ldr	r0, [pc, #168]	; (8000b70 <MX_GPIO_Init+0x124>)
 8000ac8:	f001 fdfc 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CSN_Pin|SPI1_CE_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2118      	movs	r1, #24
 8000ad0:	4828      	ldr	r0, [pc, #160]	; (8000b74 <MX_GPIO_Init+0x128>)
 8000ad2:	f001 fdf7 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000adc:	4826      	ldr	r0, [pc, #152]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000ade:	f001 fdf1 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BuildInLed_Pin;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BuildInLed_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4619      	mov	r1, r3
 8000afa:	481d      	ldr	r0, [pc, #116]	; (8000b70 <MX_GPIO_Init+0x124>)
 8000afc:	f001 fc88 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 8000b00:	2304      	movs	r3, #4
 8000b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <MX_GPIO_Init+0x130>)
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4619      	mov	r1, r3
 8000b12:	4818      	ldr	r0, [pc, #96]	; (8000b74 <MX_GPIO_Init+0x128>)
 8000b14:	f001 fc7c 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|SPI1_CE_Pin;
 8000b18:	2318      	movs	r3, #24
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4811      	ldr	r0, [pc, #68]	; (8000b74 <MX_GPIO_Init+0x128>)
 8000b30:	f001 fc6e 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480a      	ldr	r0, [pc, #40]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000b4e:	f001 fc5f 	bl	8002410 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2008      	movs	r0, #8
 8000b58:	f001 fc23 	bl	80023a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b5c:	2008      	movs	r0, #8
 8000b5e:	f001 fc3c 	bl	80023da <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40011000 	.word	0x40011000
 8000b74:	40010800 	.word	0x40010800
 8000b78:	40010c00 	.word	0x40010c00
 8000b7c:	10210000 	.word	0x10210000

08000b80 <NRF_SetDefaultSettings>:
bool NRF_AvailableMessage = false;

uint8_t NRF_MessageBuff[NRF_MessageBuffSize] = {0};

void NRF_SetDefaultSettings(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
	NRF_CE_LOW;
 8000b86:	2200      	movs	r2, #0
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4834      	ldr	r0, [pc, #208]	; (8000c5c <NRF_SetDefaultSettings+0xdc>)
 8000b8c:	f001 fd9a 	bl	80026c4 <HAL_GPIO_WritePin>
	NRF_Delay(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f001 fb0d 	bl	80021b0 <HAL_Delay>
	NRF_WriteReg(NRF_REG_CONFIG, 0x02);
 8000b96:	2102      	movs	r1, #2
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 f89d 	bl	8000cd8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_EN_AA, 0x3f); //Enable auto Acknowledgment pipe1 0x3f
 8000b9e:	213f      	movs	r1, #63	; 0x3f
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 f899 	bl	8000cd8 <NRF_WriteReg>
  NRF_WriteReg(NRF_REG_EN_RXADDR, 0x03); // Enable rx address pipe1
 8000ba6:	2103      	movs	r1, #3
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f000 f895 	bl	8000cd8 <NRF_WriteReg>
  NRF_WriteReg(NRF_REG_SETUP_AW, 0x03); // Address width 5 bytes
 8000bae:	2103      	movs	r1, #3
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f891 	bl	8000cd8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_SETUP_RETR, 0x5F); // 1500us, 15 retrans
 8000bb6:	215f      	movs	r1, #95	; 0x5f
 8000bb8:	2004      	movs	r0, #4
 8000bba:	f000 f88d 	bl	8000cd8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_RF_CH, 0x60); // Set 96 channel
 8000bbe:	2160      	movs	r1, #96	; 0x60
 8000bc0:	2005      	movs	r0, #5
 8000bc2:	f000 f889 	bl	8000cd8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_RF_SETUP, 0x27); //0dBm, 250kbps
 8000bc6:	2127      	movs	r1, #39	; 0x27
 8000bc8:	2006      	movs	r0, #6
 8000bca:	f000 f885 	bl	8000cd8 <NRF_WriteReg>
	NRF_ToggleFeatures();
 8000bce:	f000 f8b1 	bl	8000d34 <NRF_ToggleFeatures>
	NRF_WriteReg(NRF_REG_FEATURE, 0x06);
 8000bd2:	2106      	movs	r1, #6
 8000bd4:	201d      	movs	r0, #29
 8000bd6:	f000 f87f 	bl	8000cd8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_DYNPD, 0x3F); //Enable dynamic payloads on all pipes
 8000bda:	213f      	movs	r1, #63	; 0x3f
 8000bdc:	201c      	movs	r0, #28
 8000bde:	f000 f87b 	bl	8000cd8 <NRF_WriteReg>

	//uint8_t NRF_TX_Addr[] = {16, 'N', 'o', 'd', 'e'};
	//NRF_WriteMBReg(NRF_REG_TX_ADDR, NRF_TX_Addr, 5);

	uint8_t NRF_TX_Addr[] = {0, 'N', 'o', 'd', 'e'};
 8000be2:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <NRF_SetDefaultSettings+0xe0>)
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bec:	6018      	str	r0, [r3, #0]
 8000bee:	3304      	adds	r3, #4
 8000bf0:	7019      	strb	r1, [r3, #0]
	NRF_WriteMBReg(NRF_REG_TX_ADDR, NRF_TX_Addr, 5);
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	2205      	movs	r2, #5
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2010      	movs	r0, #16
 8000bfc:	f000 f8c4 	bl	8000d88 <NRF_WriteMBReg>

	uint8_t NRF_RX0_Addr[] = {1, 'N', 'o', 'd', 'e'};
 8000c00:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <NRF_SetDefaultSettings+0xe4>)
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c0a:	6018      	str	r0, [r3, #0]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	7019      	strb	r1, [r3, #0]
	NRF_WriteMBReg(NRF_REG_RX_ADDR_P0, NRF_RX0_Addr, 5);
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	2205      	movs	r2, #5
 8000c16:	4619      	mov	r1, r3
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f000 f8b5 	bl	8000d88 <NRF_WriteMBReg>

	uint8_t NRF_RX1_Addr[] = {1, 'N', 'o', 'd', 'e'};
 8000c1e:	4a11      	ldr	r2, [pc, #68]	; (8000c64 <NRF_SetDefaultSettings+0xe4>)
 8000c20:	463b      	mov	r3, r7
 8000c22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c26:	6018      	str	r0, [r3, #0]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	7019      	strb	r1, [r3, #0]
	NRF_WriteMBReg(NRF_REG_RX_ADDR_P1, NRF_RX1_Addr, 5);
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2205      	movs	r2, #5
 8000c30:	4619      	mov	r1, r3
 8000c32:	200b      	movs	r0, #11
 8000c34:	f000 f8a8 	bl	8000d88 <NRF_WriteMBReg>

	NRF_FlushRX();
 8000c38:	f000 f8d8 	bl	8000dec <NRF_FlushRX>
	NRF_FlushTX();
 8000c3c:	f000 f8f8 	bl	8000e30 <NRF_FlushTX>

	NRF_AvailablePacket = false;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <NRF_SetDefaultSettings+0xe8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
	NRF_AvailableMessage = false;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <NRF_SetDefaultSettings+0xec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]

	NRF_ClearMessageBuff();
 8000c4c:	f000 faf0 	bl	8001230 <NRF_ClearMessageBuff>
  NRF_RX_Mode();
 8000c50:	f000 f910 	bl	8000e74 <NRF_RX_Mode>
}
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40010800 	.word	0x40010800
 8000c60:	08004f60 	.word	0x08004f60
 8000c64:	08004f68 	.word	0x08004f68
 8000c68:	20000090 	.word	0x20000090
 8000c6c:	20000091 	.word	0x20000091

08000c70 <NRF_ReadReg>:

uint8_t NRF_ReadReg(uint8_t regAddr)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	uint8_t regValue = 0x00;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]

	NRF_CSN_LOW;
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2108      	movs	r1, #8
 8000c82:	4812      	ldr	r0, [pc, #72]	; (8000ccc <NRF_ReadReg+0x5c>)
 8000c84:	f001 fd1e 	bl	80026c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &regAddr, &regValue, 1, 1000);
 8000c88:	f107 020f 	add.w	r2, r7, #15
 8000c8c:	1df9      	adds	r1, r7, #7
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2301      	movs	r3, #1
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <NRF_ReadReg+0x60>)
 8000c98:	f002 fb17 	bl	80032ca <HAL_SPI_TransmitReceive>

	if(regAddr != NRF_REG_STATUS)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b07      	cmp	r3, #7
 8000ca0:	d009      	beq.n	8000cb6 <NRF_ReadReg+0x46>
	{
		HAL_SPI_TransmitReceive(&hspi1, &NRF_CMD_NOP, &regValue,1,1000);
 8000ca2:	f107 020f 	add.w	r2, r7, #15
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2301      	movs	r3, #1
 8000cae:	4909      	ldr	r1, [pc, #36]	; (8000cd4 <NRF_ReadReg+0x64>)
 8000cb0:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <NRF_ReadReg+0x60>)
 8000cb2:	f002 fb0a 	bl	80032ca <HAL_SPI_TransmitReceive>
	}
	NRF_CSN_HIGH;
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2108      	movs	r1, #8
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <NRF_ReadReg+0x5c>)
 8000cbc:	f001 fd02 	bl	80026c4 <HAL_GPIO_WritePin>

	return regValue;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	200002fc 	.word	0x200002fc
 8000cd4:	20000000 	.word	0x20000000

08000cd8 <NRF_WriteReg>:

void NRF_WriteReg(uint8_t regAddr, uint8_t regValue)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = regAddr | W_REGISTER;
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f043 0320 	orr.w	r3, r3, #32
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	73fb      	strb	r3, [r7, #15]
	NRF_CSN_LOW;
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <NRF_WriteReg+0x54>)
 8000cf8:	f001 fce4 	bl	80026c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 1000);
 8000cfc:	f107 010f 	add.w	r1, r7, #15
 8000d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d04:	2201      	movs	r2, #1
 8000d06:	480a      	ldr	r0, [pc, #40]	; (8000d30 <NRF_WriteReg+0x58>)
 8000d08:	f002 f9ab 	bl	8003062 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &regValue, 1, 1000);
 8000d0c:	1db9      	adds	r1, r7, #6
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	2201      	movs	r2, #1
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <NRF_WriteReg+0x58>)
 8000d16:	f002 f9a4 	bl	8003062 <HAL_SPI_Transmit>
	NRF_CSN_HIGH;
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	4803      	ldr	r0, [pc, #12]	; (8000d2c <NRF_WriteReg+0x54>)
 8000d20:	f001 fcd0 	bl	80026c4 <HAL_GPIO_WritePin>
}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40010800 	.word	0x40010800
 8000d30:	200002fc 	.word	0x200002fc

08000d34 <NRF_ToggleFeatures>:

void NRF_ToggleFeatures(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 8000d3a:	2350      	movs	r3, #80	; 0x50
 8000d3c:	713b      	strb	r3, [r7, #4]

  NRF_CSN_LOW;
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2108      	movs	r1, #8
 8000d42:	480f      	ldr	r0, [pc, #60]	; (8000d80 <NRF_ToggleFeatures+0x4c>)
 8000d44:	f001 fcbe 	bl	80026c4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, dt, 1,1000);
 8000d48:	1d39      	adds	r1, r7, #4
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	2201      	movs	r2, #1
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <NRF_ToggleFeatures+0x50>)
 8000d52:	f002 f986 	bl	8003062 <HAL_SPI_Transmit>
  NRF_Delay(1);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f001 fa2a 	bl	80021b0 <HAL_Delay>
  dt[0] = 0x73;
 8000d5c:	2373      	movs	r3, #115	; 0x73
 8000d5e:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1, dt, 1,1000);
 8000d60:	1d39      	adds	r1, r7, #4
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	2201      	movs	r2, #1
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <NRF_ToggleFeatures+0x50>)
 8000d6a:	f002 f97a 	bl	8003062 <HAL_SPI_Transmit>

  NRF_CSN_HIGH;
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2108      	movs	r1, #8
 8000d72:	4803      	ldr	r0, [pc, #12]	; (8000d80 <NRF_ToggleFeatures+0x4c>)
 8000d74:	f001 fca6 	bl	80026c4 <HAL_GPIO_WritePin>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40010800 	.word	0x40010800
 8000d84:	200002fc 	.word	0x200002fc

08000d88 <NRF_WriteMBReg>:
	HAL_SPI_Receive(&hspi1, pBuf, countBytes, 1000);
	NRF_CSN_HIGH;
}

void NRF_WriteMBReg(uint8_t regAddr, uint8_t *pBuf, uint8_t countBytes)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	4613      	mov	r3, r2
 8000d96:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = regAddr | W_REGISTER;
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f043 0320 	orr.w	r3, r3, #32
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	73fb      	strb	r3, [r7, #15]

	NRF_CSN_LOW;
 8000da2:	2200      	movs	r2, #0
 8000da4:	2108      	movs	r1, #8
 8000da6:	480f      	ldr	r0, [pc, #60]	; (8000de4 <NRF_WriteMBReg+0x5c>)
 8000da8:	f001 fc8c 	bl	80026c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 1000);
 8000dac:	f107 010f 	add.w	r1, r7, #15
 8000db0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db4:	2201      	movs	r2, #1
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <NRF_WriteMBReg+0x60>)
 8000db8:	f002 f953 	bl	8003062 <HAL_SPI_Transmit>
	NRF_Delay(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f001 f9f7 	bl	80021b0 <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, pBuf, countBytes, 1000);
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dca:	6839      	ldr	r1, [r7, #0]
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <NRF_WriteMBReg+0x60>)
 8000dce:	f002 f948 	bl	8003062 <HAL_SPI_Transmit>
	NRF_CSN_HIGH;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	4803      	ldr	r0, [pc, #12]	; (8000de4 <NRF_WriteMBReg+0x5c>)
 8000dd8:	f001 fc74 	bl	80026c4 <HAL_GPIO_WritePin>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40010800 	.word	0x40010800
 8000de8:	200002fc 	.word	0x200002fc

08000dec <NRF_FlushRX>:

void NRF_FlushRX(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000df2:	23e2      	movs	r3, #226	; 0xe2
 8000df4:	713b      	strb	r3, [r7, #4]

  NRF_CSN_LOW;
 8000df6:	2200      	movs	r2, #0
 8000df8:	2108      	movs	r1, #8
 8000dfa:	480b      	ldr	r0, [pc, #44]	; (8000e28 <NRF_FlushRX+0x3c>)
 8000dfc:	f001 fc62 	bl	80026c4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000e00:	1d39      	adds	r1, r7, #4
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	2201      	movs	r2, #1
 8000e08:	4808      	ldr	r0, [pc, #32]	; (8000e2c <NRF_FlushRX+0x40>)
 8000e0a:	f002 f92a 	bl	8003062 <HAL_SPI_Transmit>
  NRF_Delay(1);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f001 f9ce 	bl	80021b0 <HAL_Delay>

  NRF_CSN_HIGH;
 8000e14:	2201      	movs	r2, #1
 8000e16:	2108      	movs	r1, #8
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <NRF_FlushRX+0x3c>)
 8000e1a:	f001 fc53 	bl	80026c4 <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	200002fc 	.word	0x200002fc

08000e30 <NRF_FlushTX>:

void NRF_FlushTX(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 8000e36:	23e1      	movs	r3, #225	; 0xe1
 8000e38:	713b      	strb	r3, [r7, #4]

  NRF_CSN_LOW;
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2108      	movs	r1, #8
 8000e3e:	480b      	ldr	r0, [pc, #44]	; (8000e6c <NRF_FlushTX+0x3c>)
 8000e40:	f001 fc40 	bl	80026c4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000e44:	1d39      	adds	r1, r7, #4
 8000e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4808      	ldr	r0, [pc, #32]	; (8000e70 <NRF_FlushTX+0x40>)
 8000e4e:	f002 f908 	bl	8003062 <HAL_SPI_Transmit>
  NRF_Delay(1);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f001 f9ac 	bl	80021b0 <HAL_Delay>

  NRF_CSN_HIGH;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2108      	movs	r1, #8
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <NRF_FlushTX+0x3c>)
 8000e5e:	f001 fc31 	bl	80026c4 <HAL_GPIO_WritePin>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	200002fc 	.word	0x200002fc

08000e74 <NRF_RX_Mode>:

void NRF_RX_Mode(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
  uint8_t regval = 0x00;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  regval = NRF_ReadReg(NRF_REG_CONFIG);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff fef6 	bl	8000c70 <NRF_ReadReg>
 8000e84:	4603      	mov	r3, r0
 8000e86:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f043 0303 	orr.w	r3, r3, #3
 8000e8e:	71fb      	strb	r3, [r7, #7]

  NRF_WriteReg(NRF_REG_CONFIG, regval);
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	4619      	mov	r1, r3
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff ff1f 	bl	8000cd8 <NRF_WriteReg>

  if(!(regval & _BV(PWR_UP)))
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <NRF_RX_Mode+0x36>
  	HAL_Delay(5);
 8000ea4:	2005      	movs	r0, #5
 8000ea6:	f001 f983 	bl	80021b0 <HAL_Delay>

  NRF_CE_HIGH;
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2110      	movs	r1, #16
 8000eae:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <NRF_RX_Mode+0x5c>)
 8000eb0:	f001 fc08 	bl	80026c4 <HAL_GPIO_WritePin>

  HAL_Delay(1);
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f001 f97b 	bl	80021b0 <HAL_Delay>

  NRF_FlushRX();
 8000eba:	f7ff ff97 	bl	8000dec <NRF_FlushRX>
  NRF_FlushTX();
 8000ebe:	f7ff ffb7 	bl	8000e30 <NRF_FlushTX>

  HAL_Delay(5);
 8000ec2:	2005      	movs	r0, #5
 8000ec4:	f001 f974 	bl	80021b0 <HAL_Delay>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40010800 	.word	0x40010800

08000ed4 <NRF_TX_Mode>:

void NRF_TX_Mode(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
	NRF_CE_LOW;
 8000eda:	2200      	movs	r2, #0
 8000edc:	2110      	movs	r1, #16
 8000ede:	481a      	ldr	r0, [pc, #104]	; (8000f48 <NRF_TX_Mode+0x74>)
 8000ee0:	f001 fbf0 	bl	80026c4 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8000ee4:	200f      	movs	r0, #15
 8000ee6:	f001 f963 	bl	80021b0 <HAL_Delay>

	uint8_t config = NRF_ReadReg(NRF_REG_CONFIG);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fec0 	bl	8000c70 <NRF_ReadReg>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]

	if(!(config & _BV(PWR_UP)))
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10b      	bne.n	8000f16 <NRF_TX_Mode+0x42>
	{
		config |= _BV(PWR_UP);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	71fb      	strb	r3, [r7, #7]
		NRF_WriteReg(NRF_REG_CONFIG, config);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff fee4 	bl	8000cd8 <NRF_WriteReg>
		HAL_Delay(5); //1.5ms
 8000f10:	2005      	movs	r0, #5
 8000f12:	f001 f94d 	bl	80021b0 <HAL_Delay>
	}

	config = NRF_ReadReg(NRF_REG_CONFIG);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff feaa 	bl	8000c70 <NRF_ReadReg>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
	config &= ~_BV(PRIM_RX);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f023 0301 	bic.w	r3, r3, #1
 8000f26:	71fb      	strb	r3, [r7, #7]
	NRF_WriteReg(NRF_REG_CONFIG, config);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff fed3 	bl	8000cd8 <NRF_WriteReg>

	NRF_FlushRX();
 8000f32:	f7ff ff5b 	bl	8000dec <NRF_FlushRX>
	NRF_FlushTX();
 8000f36:	f7ff ff7b 	bl	8000e30 <NRF_FlushTX>

	HAL_Delay(5);
 8000f3a:	2005      	movs	r0, #5
 8000f3c:	f001 f938 	bl	80021b0 <HAL_Delay>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40010800 	.word	0x40010800

08000f4c <NRF_GetPacket>:


void NRF_GetPacket(uint8_t *buf)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	6078      	str	r0, [r7, #4]
	uint8_t nop = 0xFF;
 8000f54:	23ff      	movs	r3, #255	; 0xff
 8000f56:	733b      	strb	r3, [r7, #12]
	uint8_t reg = R_RX_PAYLOAD;
 8000f58:	2361      	movs	r3, #97	; 0x61
 8000f5a:	72fb      	strb	r3, [r7, #11]
	uint8_t status = NRF_ReadReg(NRF_REG_STATUS);
 8000f5c:	2007      	movs	r0, #7
 8000f5e:	f7ff fe87 	bl	8000c70 <NRF_ReadReg>
 8000f62:	4603      	mov	r3, r0
 8000f64:	73fb      	strb	r3, [r7, #15]

	NRF_CSN_LOW;
 8000f66:	2200      	movs	r2, #0
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4826      	ldr	r0, [pc, #152]	; (8001004 <NRF_GetPacket+0xb8>)
 8000f6c:	f001 fbaa 	bl	80026c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8000f70:	f107 010b 	add.w	r1, r7, #11
 8000f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4823      	ldr	r0, [pc, #140]	; (8001008 <NRF_GetPacket+0xbc>)
 8000f7c:	f002 f871 	bl	8003062 <HAL_SPI_Transmit>

	uint8_t dataLength = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_TransmitReceive(&hspi1, &nop, &dataLength, 1, 1000);
 8000f84:	f107 020a 	add.w	r2, r7, #10
 8000f88:	f107 010c 	add.w	r1, r7, #12
 8000f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	481c      	ldr	r0, [pc, #112]	; (8001008 <NRF_GetPacket+0xbc>)
 8000f96:	f002 f998 	bl	80032ca <HAL_SPI_TransmitReceive>

	if(dataLength == 0xff)
 8000f9a:	7abb      	ldrb	r3, [r7, #10]
 8000f9c:	2bff      	cmp	r3, #255	; 0xff
 8000f9e:	d02c      	beq.n	8000ffa <NRF_GetPacket+0xae>
		return;


	HAL_SPI_TransmitReceive(&hspi1, &nop, buf, dataLength, 1000);
 8000fa0:	7abb      	ldrb	r3, [r7, #10]
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	f107 010c 	add.w	r1, r7, #12
 8000fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4815      	ldr	r0, [pc, #84]	; (8001008 <NRF_GetPacket+0xbc>)
 8000fb4:	f002 f989 	bl	80032ca <HAL_SPI_TransmitReceive>

	uint8_t en_dpl = NRF_ReadReg(NRF_REG_FEATURE) & (1<<(2));
 8000fb8:	201d      	movs	r0, #29
 8000fba:	f7ff fe59 	bl	8000c70 <NRF_ReadReg>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	73bb      	strb	r3, [r7, #14]
	if(en_dpl)
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00c      	beq.n	8000fe6 <NRF_GetPacket+0x9a>
	{
		uint8_t blank = 32 - dataLength;
 8000fcc:	7abb      	ldrb	r3, [r7, #10]
 8000fce:	f1c3 0320 	rsb	r3, r3, #32
 8000fd2:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&hspi1, &nop, blank, 1000);
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	f107 010c 	add.w	r1, r7, #12
 8000fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <NRF_GetPacket+0xbc>)
 8000fe2:	f002 f83e 	bl	8003062 <HAL_SPI_Transmit>
	}

	NRF_CSN_HIGH;
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2108      	movs	r1, #8
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <NRF_GetPacket+0xb8>)
 8000fec:	f001 fb6a 	bl	80026c4 <HAL_GPIO_WritePin>
	NRF_WriteReg(NRF_REG_STATUS, _BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS));
 8000ff0:	2170      	movs	r1, #112	; 0x70
 8000ff2:	2007      	movs	r0, #7
 8000ff4:	f7ff fe70 	bl	8000cd8 <NRF_WriteReg>
 8000ff8:	e000      	b.n	8000ffc <NRF_GetPacket+0xb0>
		return;
 8000ffa:	bf00      	nop
}
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40010800 	.word	0x40010800
 8001008:	200002fc 	.word	0x200002fc

0800100c <NRF_SendPacket>:

int8_t NRF_SendPacket(uint8_t *receiverAddress, uint8_t *buf, uint8_t writeType)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	4613      	mov	r3, r2
 8001018:	71fb      	strb	r3, [r7, #7]
	if(receiverAddress != NULL)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d004      	beq.n	800102a <NRF_SendPacket+0x1e>
		NRF_WriteMBReg(NRF_REG_TX_ADDR, receiverAddress, 5);
 8001020:	2205      	movs	r2, #5
 8001022:	68f9      	ldr	r1, [r7, #12]
 8001024:	2010      	movs	r0, #16
 8001026:	f7ff feaf 	bl	8000d88 <NRF_WriteMBReg>

	uint8_t dataLength = strlen(buf);
 800102a:	68b8      	ldr	r0, [r7, #8]
 800102c:	f7ff f890 	bl	8000150 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	b2db      	uxtb	r3, r3
 8001034:	753b      	strb	r3, [r7, #20]
	if(dataLength > 29)
 8001036:	7d3b      	ldrb	r3, [r7, #20]
 8001038:	2b1d      	cmp	r3, #29
 800103a:	d902      	bls.n	8001042 <NRF_SendPacket+0x36>
		return -2;
 800103c:	f06f 0301 	mvn.w	r3, #1
 8001040:	e069      	b.n	8001116 <NRF_SendPacket+0x10a>

	NRF_CSN_LOW;
 8001042:	2200      	movs	r2, #0
 8001044:	2108      	movs	r1, #8
 8001046:	4836      	ldr	r0, [pc, #216]	; (8001120 <NRF_SendPacket+0x114>)
 8001048:	f001 fb3c 	bl	80026c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &writeType, 1, 1000);
 800104c:	1df9      	adds	r1, r7, #7
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	2201      	movs	r2, #1
 8001054:	4833      	ldr	r0, [pc, #204]	; (8001124 <NRF_SendPacket+0x118>)
 8001056:	f002 f804 	bl	8003062 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &dataLength, 1, 1000);
 800105a:	f107 0114 	add.w	r1, r7, #20
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	2201      	movs	r2, #1
 8001064:	482f      	ldr	r0, [pc, #188]	; (8001124 <NRF_SendPacket+0x118>)
 8001066:	f001 fffc 	bl	8003062 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, dataLength, 1000);
 800106a:	7d3b      	ldrb	r3, [r7, #20]
 800106c:	b29a      	uxth	r2, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	482b      	ldr	r0, [pc, #172]	; (8001124 <NRF_SendPacket+0x118>)
 8001076:	f001 fff4 	bl	8003062 <HAL_SPI_Transmit>

	bool en_dpl = NRF_ReadReg(NRF_REG_FEATURE) & _BV(EN_DPL);
 800107a:	201d      	movs	r0, #29
 800107c:	f7ff fdf8 	bl	8000c70 <NRF_ReadReg>
 8001080:	4603      	mov	r3, r0
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	2b00      	cmp	r3, #0
 8001088:	bf14      	ite	ne
 800108a:	2301      	movne	r3, #1
 800108c:	2300      	moveq	r3, #0
 800108e:	75fb      	strb	r3, [r7, #23]
	if(!en_dpl)
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	f083 0301 	eor.w	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00b      	beq.n	80010b4 <NRF_SendPacket+0xa8>
	{
		uint8_t blank = 32 - dataLength;
 800109c:	7d3b      	ldrb	r3, [r7, #20]
 800109e:	f1c3 0320 	rsb	r3, r3, #32
 80010a2:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi1, &NRF_CMD_NOP, blank, 1000);
 80010a4:	7dbb      	ldrb	r3, [r7, #22]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ac:	491e      	ldr	r1, [pc, #120]	; (8001128 <NRF_SendPacket+0x11c>)
 80010ae:	481d      	ldr	r0, [pc, #116]	; (8001124 <NRF_SendPacket+0x118>)
 80010b0:	f001 ffd7 	bl	8003062 <HAL_SPI_Transmit>
	}
	NRF_CSN_HIGH;
 80010b4:	2201      	movs	r2, #1
 80010b6:	2108      	movs	r1, #8
 80010b8:	4819      	ldr	r0, [pc, #100]	; (8001120 <NRF_SendPacket+0x114>)
 80010ba:	f001 fb03 	bl	80026c4 <HAL_GPIO_WritePin>

	NRF_CE_HIGH;
 80010be:	2201      	movs	r2, #1
 80010c0:	2110      	movs	r1, #16
 80010c2:	4817      	ldr	r0, [pc, #92]	; (8001120 <NRF_SendPacket+0x114>)
 80010c4:	f001 fafe 	bl	80026c4 <HAL_GPIO_WritePin>
	DelayMicro(150);
 80010c8:	2096      	movs	r0, #150	; 0x96
 80010ca:	f000 f8cb 	bl	8001264 <DelayMicro>
	//NRF_Delay(10);
	NRF_CE_LOW;
 80010ce:	2200      	movs	r2, #0
 80010d0:	2110      	movs	r1, #16
 80010d2:	4813      	ldr	r0, [pc, #76]	; (8001120 <NRF_SendPacket+0x114>)
 80010d4:	f001 faf6 	bl	80026c4 <HAL_GPIO_WritePin>

	uint8_t status = NRF_ReadReg(NRF_REG_STATUS);
 80010d8:	2007      	movs	r0, #7
 80010da:	f7ff fdc9 	bl	8000c70 <NRF_ReadReg>
 80010de:	4603      	mov	r3, r0
 80010e0:	757b      	strb	r3, [r7, #21]

	if(status & _BV(TX_DS))
 80010e2:	7d7b      	ldrb	r3, [r7, #21]
 80010e4:	f003 0320 	and.w	r3, r3, #32
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <NRF_SendPacket+0xec>
	{
		NRF_WriteReg(NRF_REG_STATUS, 0x20);
 80010ec:	2120      	movs	r1, #32
 80010ee:	2007      	movs	r0, #7
 80010f0:	f7ff fdf2 	bl	8000cd8 <NRF_WriteReg>
		return 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e00e      	b.n	8001116 <NRF_SendPacket+0x10a>
	}

	if(status & _BV(MAX_RT))
 80010f8:	7d7b      	ldrb	r3, [r7, #21]
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d007      	beq.n	8001112 <NRF_SendPacket+0x106>
	{
		NRF_WriteReg(NRF_REG_STATUS, 0x10);
 8001102:	2110      	movs	r1, #16
 8001104:	2007      	movs	r0, #7
 8001106:	f7ff fde7 	bl	8000cd8 <NRF_WriteReg>
		NRF_FlushTX();
 800110a:	f7ff fe91 	bl	8000e30 <NRF_FlushTX>
		return 0;
 800110e:	2300      	movs	r3, #0
 8001110:	e001      	b.n	8001116 <NRF_SendPacket+0x10a>
	}

	return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40010800 	.word	0x40010800
 8001124:	200002fc 	.word	0x200002fc
 8001128:	20000000 	.word	0x20000000

0800112c <NRF_SendMessage>:

int8_t NRF_SendMessage(uint8_t *receiverAddress, uint8_t *buf)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b08d      	sub	sp, #52	; 0x34
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	NRF_WriteMBReg(NRF_REG_TX_ADDR, receiverAddress, 5);
 8001136:	2205      	movs	r2, #5
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	2010      	movs	r0, #16
 800113c:	f7ff fe24 	bl	8000d88 <NRF_WriteMBReg>

	uint16_t dataLength = strlen(buf);
 8001140:	6838      	ldr	r0, [r7, #0]
 8001142:	f7ff f805 	bl	8000150 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint8_t amountPackets = ceil((double)dataLength / 25.0);
 800114a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f949 	bl	80003e4 <__aeabi_ui2d>
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b2d      	ldr	r3, [pc, #180]	; (800120c <NRF_SendMessage+0xe0>)
 8001158:	f7ff fae8 	bl	800072c <__aeabi_ddiv>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	4618      	mov	r0, r3
 8001162:	4621      	mov	r1, r4
 8001164:	f003 fe70 	bl	8004e48 <ceil>
 8001168:	4603      	mov	r3, r0
 800116a:	460c      	mov	r4, r1
 800116c:	4618      	mov	r0, r3
 800116e:	4621      	mov	r1, r4
 8001170:	f7ff fc4c 	bl	8000a0c <__aeabi_d2uiz>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	NRF_TX_Mode();
 800117a:	f7ff feab 	bl	8000ed4 <NRF_TX_Mode>
	HAL_Delay(10);
 800117e:	200a      	movs	r0, #10
 8001180:	f001 f816 	bl	80021b0 <HAL_Delay>
	for(uint8_t i = 0; i < amountPackets; ++i)
 8001184:	2300      	movs	r3, #0
 8001186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800118a:	e02f      	b.n	80011ec <NRF_SendMessage+0xc0>
	{
		uint8_t currentData[30] = {0};
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	221e      	movs	r2, #30
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f003 fa44 	bl	8004622 <memset>
		memcpy(currentData, buf + (25 * i), 25);
 800119a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	009a      	lsls	r2, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	461a      	mov	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	1899      	adds	r1, r3, r2
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2219      	movs	r2, #25
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 fa29 	bl	800460c <memcpy>

		int8_t result = NRF_SendPacket(NULL, currentData, W_TX_PAYLOAD);
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	22a0      	movs	r2, #160	; 0xa0
 80011c0:	4619      	mov	r1, r3
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff ff22 	bl	800100c <NRF_SendPacket>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

		if(!result)
 80011ce:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <NRF_SendMessage+0xb0>
			return -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e013      	b.n	8001204 <NRF_SendMessage+0xd8>

		//TODO: Уменьшить значение
		HAL_Delay(50);
 80011dc:	2032      	movs	r0, #50	; 0x32
 80011de:	f000 ffe7 	bl	80021b0 <HAL_Delay>
	for(uint8_t i = 0; i < amountPackets; ++i)
 80011e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011e6:	3301      	adds	r3, #1
 80011e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80011f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3c9      	bcc.n	800118c <NRF_SendMessage+0x60>
	}
	HAL_Delay(10);
 80011f8:	200a      	movs	r0, #10
 80011fa:	f000 ffd9 	bl	80021b0 <HAL_Delay>
	NRF_RX_Mode();
 80011fe:	f7ff fe39 	bl	8000e74 <NRF_RX_Mode>

	return 1;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3734      	adds	r7, #52	; 0x34
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	40390000 	.word	0x40390000

08001210 <NRF_IsAvailablePacket>:

bool NRF_IsAvailablePacket(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	return !(NRF_ReadReg(NRF_REG_FIFO_STATUS) & _BV(RX_EMPTY));
 8001214:	2017      	movs	r0, #23
 8001216:	f7ff fd2b 	bl	8000c70 <NRF_ReadReg>
 800121a:	4603      	mov	r3, r0
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	bf0c      	ite	eq
 8001224:	2301      	moveq	r3, #1
 8001226:	2300      	movne	r3, #0
 8001228:	b2db      	uxtb	r3, r3
}
 800122a:	4618      	mov	r0, r3
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <NRF_ClearMessageBuff>:
{
	return NRF_AvailableMessage;
}

void NRF_ClearMessageBuff(void)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
	for(int i = 0; i < NRF_MessageBuffSize; ++i)
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	e007      	b.n	800124c <NRF_ClearMessageBuff+0x1c>
		NRF_MessageBuff[i] = 0;
 800123c:	4a08      	ldr	r2, [pc, #32]	; (8001260 <NRF_ClearMessageBuff+0x30>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NRF_MessageBuffSize; ++i)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3301      	adds	r3, #1
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001252:	dbf3      	blt.n	800123c <NRF_ClearMessageBuff+0xc>
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000094 	.word	0x20000094

08001264 <DelayMicro>:
*/

}

__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  micros *= (SystemCoreClock / 1000000) / 9;
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <DelayMicro+0x34>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <DelayMicro+0x38>)
 8001272:	fba2 2303 	umull	r2, r3, r2, r3
 8001276:	0ddb      	lsrs	r3, r3, #23
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	607b      	str	r3, [r7, #4]

  /* Wait till done */

  while (micros--) ;
 8001280:	bf00      	nop
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	1e5a      	subs	r2, r3, #1
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1fa      	bne.n	8001282 <DelayMicro+0x1e>

}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000004 	.word	0x20000004
 800129c:	ee9bfab5 	.word	0xee9bfab5

080012a0 <SR_Set>:
extern SPI_HandleTypeDef hspi2;

uint16_t shiftRegisterValue = 0x00;

inline void SR_Set(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012aa:	4802      	ldr	r0, [pc, #8]	; (80012b4 <SR_Set+0x14>)
 80012ac:	f001 fa0a 	bl	80026c4 <HAL_GPIO_WritePin>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40010c00 	.word	0x40010c00

080012b8 <SR_Reset>:

inline void SR_Reset(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c2:	4802      	ldr	r0, [pc, #8]	; (80012cc <SR_Reset+0x14>)
 80012c4:	f001 f9fe 	bl	80026c4 <HAL_GPIO_WritePin>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40010c00 	.word	0x40010c00

080012d0 <SR_SetValue>:

void SR_SetValue(uint16_t value)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
	uint8_t txBuff[2] = {0};
 80012da:	2300      	movs	r3, #0
 80012dc:	81bb      	strh	r3, [r7, #12]
	txBuff[0] = (uint8_t)(value >> 8);
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	733b      	strb	r3, [r7, #12]
	txBuff[1] = (uint8_t)value;
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi2, txBuff, 2, 5000);
 80012ee:	f107 010c 	add.w	r1, r7, #12
 80012f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80012f6:	2202      	movs	r2, #2
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <SR_SetValue+0x40>)
 80012fa:	f001 feb2 	bl	8003062 <HAL_SPI_Transmit>
	SR_Reset();
 80012fe:	f7ff ffdb 	bl	80012b8 <SR_Reset>
	SR_Set();
 8001302:	f7ff ffcd 	bl	80012a0 <SR_Set>
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200002a4 	.word	0x200002a4

08001314 <SR_SetPin>:

void SR_SetPin(uint16_t pin)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
	shiftRegisterValue |= 1 << pin;
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	2201      	movs	r2, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <SR_SetPin+0x38>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21b      	sxth	r3, r3
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SR_SetPin+0x38>)
 8001336:	801a      	strh	r2, [r3, #0]
	SR_SetValue(shiftRegisterValue);
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <SR_SetPin+0x38>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ffc7 	bl	80012d0 <SR_SetValue>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000294 	.word	0x20000294

08001350 <SR_ResetPin>:

void SR_ResetPin(uint16_t pin)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
	shiftRegisterValue &= ~(1 << pin);
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	2201      	movs	r2, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	b21b      	sxth	r3, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	b21a      	sxth	r2, r3
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <SR_ResetPin+0x3c>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	b21b      	sxth	r3, r3
 800136e:	4013      	ands	r3, r2
 8001370:	b21b      	sxth	r3, r3
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <SR_ResetPin+0x3c>)
 8001376:	801a      	strh	r2, [r3, #0]
	SR_SetValue(shiftRegisterValue);
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <SR_ResetPin+0x3c>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ffa7 	bl	80012d0 <SR_SetValue>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000294 	.word	0x20000294

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b0a7      	sub	sp, #156	; 0x9c
 8001394:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001396:	f000 fea9 	bl	80020ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139a:	f000 f871 	bl	8001480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139e:	f7ff fb55 	bl	8000a4c <MX_GPIO_Init>
  MX_SPI1_Init();
 80013a2:	f000 faa7 	bl	80018f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80013a6:	f000 fadb 	bl	8001960 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80013aa:	f000 fe03 	bl	8001fb4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013ae:	f000 fc65 	bl	8001c7c <MX_TIM2_Init>
  MX_TIM4_Init();
 80013b2:	f000 fce3 	bl	8001d7c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  NRF_SetDefaultSettings();
 80013b6:	f7ff fbe3 	bl	8000b80 <NRF_SetDefaultSettings>
  SR_SetValue(0x0000);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff ff88 	bl	80012d0 <SR_SetValue>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool sendAnswer = false;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  while (1)
  {
  	if(NRF_IsAvailablePacket())
 80013c6:	f7ff ff23 	bl	8001210 <NRF_IsAvailablePacket>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d010      	beq.n	80013f2 <main+0x62>
		{
			uint8_t readData[32] = {0};
 80013d0:	463b      	mov	r3, r7
 80013d2:	2220      	movs	r2, #32
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 f923 	bl	8004622 <memset>
			NRF_GetPacket(&readData);
 80013dc:	463b      	mov	r3, r7
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fdb4 	bl	8000f4c <NRF_GetPacket>

			InputMessageHandler(readData);
 80013e4:	463b      	mov	r3, r7
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f890 	bl	800150c <InputMessageHandler>
			sendAnswer = true;
 80013ec:	2301      	movs	r3, #1
 80013ee:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		}

		if(sendAnswer)
 80013f2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0e5      	beq.n	80013c6 <main+0x36>
		{
			sendAnswer = false;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			char buff[128] = {0};
 8001400:	463b      	mov	r3, r7
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f003 f90b 	bl	8004622 <memset>
			char *sendBuff = "Hello";
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <main+0xe0>)
 800140e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			uint8_t localHub1[] = {0, 'N', 'o', 'd', 'e'};
 8001412:	4a18      	ldr	r2, [pc, #96]	; (8001474 <main+0xe4>)
 8001414:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001418:	e892 0003 	ldmia.w	r2, {r0, r1}
 800141c:	6018      	str	r0, [r3, #0]
 800141e:	3304      	adds	r3, #4
 8001420:	7019      	strb	r1, [r3, #0]

			uint8_t sendMessage = NRF_SendMessage(localHub1, sendBuff);
 8001422:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001426:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fe7e 	bl	800112c <NRF_SendMessage>
 8001430:	4603      	mov	r3, r0
 8001432:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			sprintf(buff, "STM send message (%d) [%d]: %s",sendMessage, strlen(sendBuff), sendBuff);
 8001436:	f897 4087 	ldrb.w	r4, [r7, #135]	; 0x87
 800143a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800143e:	f7fe fe87 	bl	8000150 <strlen>
 8001442:	4602      	mov	r2, r0
 8001444:	4638      	mov	r0, r7
 8001446:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	4622      	mov	r2, r4
 8001450:	4909      	ldr	r1, [pc, #36]	; (8001478 <main+0xe8>)
 8001452:	f003 f8ef 	bl	8004634 <siprintf>
			HAL_UART_Transmit(&huart1, buff, strlen(buff), 1000);
 8001456:	463b      	mov	r3, r7
 8001458:	4618      	mov	r0, r3
 800145a:	f7fe fe79 	bl	8000150 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	4639      	mov	r1, r7
 8001464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <main+0xec>)
 800146a:	f002 fee8 	bl	800423e <HAL_UART_Transmit>
  	if(NRF_IsAvailablePacket())
 800146e:	e7aa      	b.n	80013c6 <main+0x36>
 8001470:	08004f70 	.word	0x08004f70
 8001474:	08004f60 	.word	0x08004f60
 8001478:	08004f78 	.word	0x08004f78
 800147c:	200003d4 	.word	0x200003d4

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b090      	sub	sp, #64	; 0x40
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 0318 	add.w	r3, r7, #24
 800148a:	2228      	movs	r2, #40	; 0x28
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f003 f8c7 	bl	8004622 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a2:	2301      	movs	r3, #1
 80014a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b0:	2301      	movs	r3, #1
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b4:	2302      	movs	r3, #2
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80014be:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c4:	f107 0318 	add.w	r3, r7, #24
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 f94d 	bl	8002768 <HAL_RCC_OscConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014d4:	f000 fa00 	bl	80018d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d8:	230f      	movs	r3, #15
 80014da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014dc:	2302      	movs	r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2102      	movs	r1, #2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 fbb8 	bl	8002c68 <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014fe:	f000 f9eb 	bl	80018d8 <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	3740      	adds	r7, #64	; 0x40
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <InputMessageHandler>:

/* USER CODE BEGIN 4 */
void InputMessageHandler(char *message)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	uint8_t cursorPosition = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]

	switch(message[cursorPosition])
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	2b3d      	cmp	r3, #61	; 0x3d
 8001524:	f200 81cc 	bhi.w	80018c0 <InputMessageHandler+0x3b4>
 8001528:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <InputMessageHandler+0x24>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001629 	.word	0x08001629
 8001534:	08001637 	.word	0x08001637
 8001538:	08001645 	.word	0x08001645
 800153c:	0800164d 	.word	0x0800164d
 8001540:	08001655 	.word	0x08001655
 8001544:	0800165d 	.word	0x0800165d
 8001548:	08001665 	.word	0x08001665
 800154c:	0800166d 	.word	0x0800166d
 8001550:	08001675 	.word	0x08001675
 8001554:	0800167d 	.word	0x0800167d
 8001558:	08001685 	.word	0x08001685
 800155c:	0800168d 	.word	0x0800168d
 8001560:	08001695 	.word	0x08001695
 8001564:	0800169d 	.word	0x0800169d
 8001568:	080016a5 	.word	0x080016a5
 800156c:	080016ad 	.word	0x080016ad
 8001570:	080016b5 	.word	0x080016b5
 8001574:	080016bd 	.word	0x080016bd
 8001578:	080016c5 	.word	0x080016c5
 800157c:	080016cd 	.word	0x080016cd
 8001580:	080016d5 	.word	0x080016d5
 8001584:	080016dd 	.word	0x080016dd
 8001588:	080016e5 	.word	0x080016e5
 800158c:	080016ed 	.word	0x080016ed
 8001590:	080016f5 	.word	0x080016f5
 8001594:	080016fd 	.word	0x080016fd
 8001598:	08001705 	.word	0x08001705
 800159c:	0800170d 	.word	0x0800170d
 80015a0:	08001715 	.word	0x08001715
 80015a4:	0800171d 	.word	0x0800171d
 80015a8:	08001725 	.word	0x08001725
 80015ac:	0800172d 	.word	0x0800172d
 80015b0:	08001735 	.word	0x08001735
 80015b4:	0800173d 	.word	0x0800173d
 80015b8:	08001745 	.word	0x08001745
 80015bc:	08001775 	.word	0x08001775
 80015c0:	08001787 	.word	0x08001787
 80015c4:	080017b7 	.word	0x080017b7
 80015c8:	080017c9 	.word	0x080017c9
 80015cc:	080017f7 	.word	0x080017f7
 80015d0:	08001807 	.word	0x08001807
 80015d4:	080018c1 	.word	0x080018c1
 80015d8:	080018c1 	.word	0x080018c1
 80015dc:	080018c1 	.word	0x080018c1
 80015e0:	080018c1 	.word	0x080018c1
 80015e4:	080018c1 	.word	0x080018c1
 80015e8:	080018c1 	.word	0x080018c1
 80015ec:	080018c1 	.word	0x080018c1
 80015f0:	080018c1 	.word	0x080018c1
 80015f4:	080018c1 	.word	0x080018c1
 80015f8:	080018c1 	.word	0x080018c1
 80015fc:	080018c1 	.word	0x080018c1
 8001600:	080018c1 	.word	0x080018c1
 8001604:	080018c1 	.word	0x080018c1
 8001608:	080018c1 	.word	0x080018c1
 800160c:	080018c1 	.word	0x080018c1
 8001610:	080018c1 	.word	0x080018c1
 8001614:	08001835 	.word	0x08001835
 8001618:	08001845 	.word	0x08001845
 800161c:	08001873 	.word	0x08001873
 8001620:	08001883 	.word	0x08001883
 8001624:	080018b1 	.word	0x080018b1
	{
		case 0x01: HAL_GPIO_WritePin(BuildInLed_GPIO_Port, BuildInLed_Pin, 0); break;
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162e:	48a6      	ldr	r0, [pc, #664]	; (80018c8 <InputMessageHandler+0x3bc>)
 8001630:	f001 f848 	bl	80026c4 <HAL_GPIO_WritePin>
 8001634:	e144      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x02: HAL_GPIO_WritePin(BuildInLed_GPIO_Port, BuildInLed_Pin, 1); break;
 8001636:	2201      	movs	r2, #1
 8001638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163c:	48a2      	ldr	r0, [pc, #648]	; (80018c8 <InputMessageHandler+0x3bc>)
 800163e:	f001 f841 	bl	80026c4 <HAL_GPIO_WritePin>
 8001642:	e13d      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x03: SR_SetPin(0); break;
 8001644:	2000      	movs	r0, #0
 8001646:	f7ff fe65 	bl	8001314 <SR_SetPin>
 800164a:	e139      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x04: SR_ResetPin(0); break;
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff fe7f 	bl	8001350 <SR_ResetPin>
 8001652:	e135      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x05: SR_SetPin(1); break;
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff fe5d 	bl	8001314 <SR_SetPin>
 800165a:	e131      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x06: SR_ResetPin(1); break;
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff fe77 	bl	8001350 <SR_ResetPin>
 8001662:	e12d      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x07: SR_SetPin(2); break;
 8001664:	2002      	movs	r0, #2
 8001666:	f7ff fe55 	bl	8001314 <SR_SetPin>
 800166a:	e129      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x08: SR_ResetPin(2); break;
 800166c:	2002      	movs	r0, #2
 800166e:	f7ff fe6f 	bl	8001350 <SR_ResetPin>
 8001672:	e125      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x09: SR_SetPin(3); break;
 8001674:	2003      	movs	r0, #3
 8001676:	f7ff fe4d 	bl	8001314 <SR_SetPin>
 800167a:	e121      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x0A: SR_ResetPin(3); break;
 800167c:	2003      	movs	r0, #3
 800167e:	f7ff fe67 	bl	8001350 <SR_ResetPin>
 8001682:	e11d      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x0B: SR_SetPin(4); break;
 8001684:	2004      	movs	r0, #4
 8001686:	f7ff fe45 	bl	8001314 <SR_SetPin>
 800168a:	e119      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x0C: SR_ResetPin(4); break;
 800168c:	2004      	movs	r0, #4
 800168e:	f7ff fe5f 	bl	8001350 <SR_ResetPin>
 8001692:	e115      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x0D: SR_SetPin(5); break;
 8001694:	2005      	movs	r0, #5
 8001696:	f7ff fe3d 	bl	8001314 <SR_SetPin>
 800169a:	e111      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x0E: SR_ResetPin(5); break;
 800169c:	2005      	movs	r0, #5
 800169e:	f7ff fe57 	bl	8001350 <SR_ResetPin>
 80016a2:	e10d      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x0F: SR_SetPin(6); break;
 80016a4:	2006      	movs	r0, #6
 80016a6:	f7ff fe35 	bl	8001314 <SR_SetPin>
 80016aa:	e109      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x10: SR_ResetPin(6); break;
 80016ac:	2006      	movs	r0, #6
 80016ae:	f7ff fe4f 	bl	8001350 <SR_ResetPin>
 80016b2:	e105      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x11: SR_SetPin(7); break;
 80016b4:	2007      	movs	r0, #7
 80016b6:	f7ff fe2d 	bl	8001314 <SR_SetPin>
 80016ba:	e101      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x12: SR_ResetPin(7); break;
 80016bc:	2007      	movs	r0, #7
 80016be:	f7ff fe47 	bl	8001350 <SR_ResetPin>
 80016c2:	e0fd      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x13: SR_SetPin(8); break;
 80016c4:	2008      	movs	r0, #8
 80016c6:	f7ff fe25 	bl	8001314 <SR_SetPin>
 80016ca:	e0f9      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x14: SR_ResetPin(8); break;
 80016cc:	2008      	movs	r0, #8
 80016ce:	f7ff fe3f 	bl	8001350 <SR_ResetPin>
 80016d2:	e0f5      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x15: SR_SetPin(9); break;
 80016d4:	2009      	movs	r0, #9
 80016d6:	f7ff fe1d 	bl	8001314 <SR_SetPin>
 80016da:	e0f1      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x16: SR_ResetPin(9); break;
 80016dc:	2009      	movs	r0, #9
 80016de:	f7ff fe37 	bl	8001350 <SR_ResetPin>
 80016e2:	e0ed      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x17: SR_SetPin(10); break;
 80016e4:	200a      	movs	r0, #10
 80016e6:	f7ff fe15 	bl	8001314 <SR_SetPin>
 80016ea:	e0e9      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x18: SR_ResetPin(10); break;
 80016ec:	200a      	movs	r0, #10
 80016ee:	f7ff fe2f 	bl	8001350 <SR_ResetPin>
 80016f2:	e0e5      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x19: SR_SetPin(11); break;
 80016f4:	200b      	movs	r0, #11
 80016f6:	f7ff fe0d 	bl	8001314 <SR_SetPin>
 80016fa:	e0e1      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x1A: SR_ResetPin(11); break;
 80016fc:	200b      	movs	r0, #11
 80016fe:	f7ff fe27 	bl	8001350 <SR_ResetPin>
 8001702:	e0dd      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x1B: SR_SetPin(12); break;
 8001704:	200c      	movs	r0, #12
 8001706:	f7ff fe05 	bl	8001314 <SR_SetPin>
 800170a:	e0d9      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x1C: SR_ResetPin(12); break;
 800170c:	200c      	movs	r0, #12
 800170e:	f7ff fe1f 	bl	8001350 <SR_ResetPin>
 8001712:	e0d5      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x1D: SR_SetPin(13); break;
 8001714:	200d      	movs	r0, #13
 8001716:	f7ff fdfd 	bl	8001314 <SR_SetPin>
 800171a:	e0d1      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x1E: SR_ResetPin(13); break;
 800171c:	200d      	movs	r0, #13
 800171e:	f7ff fe17 	bl	8001350 <SR_ResetPin>
 8001722:	e0cd      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x1F: SR_SetPin(14); break;
 8001724:	200e      	movs	r0, #14
 8001726:	f7ff fdf5 	bl	8001314 <SR_SetPin>
 800172a:	e0c9      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x20: SR_ResetPin(14); break;
 800172c:	200e      	movs	r0, #14
 800172e:	f7ff fe0f 	bl	8001350 <SR_ResetPin>
 8001732:	e0c5      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x21: SR_SetPin(15); break;
 8001734:	200f      	movs	r0, #15
 8001736:	f7ff fded 	bl	8001314 <SR_SetPin>
 800173a:	e0c1      	b.n	80018c0 <InputMessageHandler+0x3b4>
		case 0x22: SR_ResetPin(15); break;
 800173c:	200f      	movs	r0, #15
 800173e:	f7ff fe07 	bl	8001350 <SR_ResetPin>
 8001742:	e0bd      	b.n	80018c0 <InputMessageHandler+0x3b4>



		/* TIM2_CHANNEL_1 */
		case 0x23:
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001744:	2100      	movs	r1, #0
 8001746:	4861      	ldr	r0, [pc, #388]	; (80018cc <InputMessageHandler+0x3c0>)
 8001748:	f002 f848 	bl	80037dc <HAL_TIM_PWM_Start>
			TIM2->CCR1 = ((uint16_t)message[++cursorPosition] << 8) | message[++cursorPosition];
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	3301      	adds	r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	3201      	adds	r2, #1
 8001760:	73fa      	strb	r2, [r7, #15]
 8001762:	7bfa      	ldrb	r2, [r7, #15]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	440a      	add	r2, r1
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	431a      	orrs	r2, r3
 800176c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001770:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001772:	e0a5      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x24:
			TIM2->CCR1 = 0;
 8001774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001778:	2200      	movs	r2, #0
 800177a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800177c:	2100      	movs	r1, #0
 800177e:	4853      	ldr	r0, [pc, #332]	; (80018cc <InputMessageHandler+0x3c0>)
 8001780:	f002 f85e 	bl	8003840 <HAL_TIM_PWM_Stop>
			break;
 8001784:	e09c      	b.n	80018c0 <InputMessageHandler+0x3b4>

		/* TIM2_CHANNEL_2 */
		case 0x25:
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001786:	2104      	movs	r1, #4
 8001788:	4850      	ldr	r0, [pc, #320]	; (80018cc <InputMessageHandler+0x3c0>)
 800178a:	f002 f827 	bl	80037dc <HAL_TIM_PWM_Start>
			TIM2->CCR2 = ((uint16_t)message[++cursorPosition] << 8) | message[++cursorPosition];
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	3301      	adds	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	7bfa      	ldrb	r2, [r7, #15]
 80017a0:	3201      	adds	r2, #1
 80017a2:	73fa      	strb	r2, [r7, #15]
 80017a4:	7bfa      	ldrb	r2, [r7, #15]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	440a      	add	r2, r1
 80017aa:	7812      	ldrb	r2, [r2, #0]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017b2:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80017b4:	e084      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x26:
			TIM2->CCR2 = 0;
 80017b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ba:	2200      	movs	r2, #0
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80017be:	2104      	movs	r1, #4
 80017c0:	4842      	ldr	r0, [pc, #264]	; (80018cc <InputMessageHandler+0x3c0>)
 80017c2:	f002 f83d 	bl	8003840 <HAL_TIM_PWM_Stop>
			break;
 80017c6:	e07b      	b.n	80018c0 <InputMessageHandler+0x3b4>


		/* TIM4_CHANNEL_4 */
		case 0x27:
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80017c8:	210c      	movs	r1, #12
 80017ca:	4841      	ldr	r0, [pc, #260]	; (80018d0 <InputMessageHandler+0x3c4>)
 80017cc:	f002 f806 	bl	80037dc <HAL_TIM_PWM_Start>
			TIM4->CCR4 = ((uint16_t)message[++cursorPosition] << 8) | message[++cursorPosition];
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	3301      	adds	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	3201      	adds	r2, #1
 80017e4:	73fa      	strb	r2, [r7, #15]
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	440a      	add	r2, r1
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <InputMessageHandler+0x3c8>)
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80017f4:	e064      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x28:
			TIM4->CCR4 = 0;
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <InputMessageHandler+0x3c8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 80017fc:	210c      	movs	r1, #12
 80017fe:	4834      	ldr	r0, [pc, #208]	; (80018d0 <InputMessageHandler+0x3c4>)
 8001800:	f002 f81e 	bl	8003840 <HAL_TIM_PWM_Stop>
			break;
 8001804:	e05c      	b.n	80018c0 <InputMessageHandler+0x3b4>

		/* TIM4_CHANNEL_3 */
		case 0x29:
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001806:	2108      	movs	r1, #8
 8001808:	4831      	ldr	r0, [pc, #196]	; (80018d0 <InputMessageHandler+0x3c4>)
 800180a:	f001 ffe7 	bl	80037dc <HAL_TIM_PWM_Start>
			TIM4->CCR3 = ((uint16_t)message[++cursorPosition] << 8) | message[++cursorPosition];
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	3301      	adds	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	3201      	adds	r2, #1
 8001822:	73fa      	strb	r2, [r7, #15]
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	440a      	add	r2, r1
 800182a:	7812      	ldrb	r2, [r2, #0]
 800182c:	431a      	orrs	r2, r3
 800182e:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <InputMessageHandler+0x3c8>)
 8001830:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001832:	e045      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x3A:
			TIM4->CCR3 = 0;
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <InputMessageHandler+0x3c8>)
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800183a:	2108      	movs	r1, #8
 800183c:	4824      	ldr	r0, [pc, #144]	; (80018d0 <InputMessageHandler+0x3c4>)
 800183e:	f001 ffff 	bl	8003840 <HAL_TIM_PWM_Stop>
			break;
 8001842:	e03d      	b.n	80018c0 <InputMessageHandler+0x3b4>

		/* TIM4_CHANNEL_2 */
		case 0x3B:
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001844:	2104      	movs	r1, #4
 8001846:	4822      	ldr	r0, [pc, #136]	; (80018d0 <InputMessageHandler+0x3c4>)
 8001848:	f001 ffc8 	bl	80037dc <HAL_TIM_PWM_Start>
			TIM4->CCR2 = ((uint16_t)message[++cursorPosition] << 8) | message[++cursorPosition];
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	3301      	adds	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	3201      	adds	r2, #1
 8001860:	73fa      	strb	r2, [r7, #15]
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	440a      	add	r2, r1
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	431a      	orrs	r2, r3
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <InputMessageHandler+0x3c8>)
 800186e:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001870:	e026      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x3C:
			TIM4->CCR2 = 0;
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <InputMessageHandler+0x3c8>)
 8001874:	2200      	movs	r2, #0
 8001876:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001878:	2104      	movs	r1, #4
 800187a:	4815      	ldr	r0, [pc, #84]	; (80018d0 <InputMessageHandler+0x3c4>)
 800187c:	f001 ffe0 	bl	8003840 <HAL_TIM_PWM_Stop>
			break;
 8001880:	e01e      	b.n	80018c0 <InputMessageHandler+0x3b4>

		/* TIM4_CHANNEL_1 */
		case 0x3D:
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001882:	2100      	movs	r1, #0
 8001884:	4812      	ldr	r0, [pc, #72]	; (80018d0 <InputMessageHandler+0x3c4>)
 8001886:	f001 ffa9 	bl	80037dc <HAL_TIM_PWM_Start>
			TIM4->CCR1 = ((uint16_t)message[++cursorPosition] << 8) | message[++cursorPosition];
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	3301      	adds	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	3201      	adds	r2, #1
 800189e:	73fa      	strb	r2, [r7, #15]
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	440a      	add	r2, r1
 80018a6:	7812      	ldrb	r2, [r2, #0]
 80018a8:	431a      	orrs	r2, r3
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <InputMessageHandler+0x3c8>)
 80018ac:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80018ae:	e007      	b.n	80018c0 <InputMessageHandler+0x3b4>

		case 0x3E:
			TIM4->CCR1 = 0;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <InputMessageHandler+0x3c8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80018b6:	2108      	movs	r1, #8
 80018b8:	4805      	ldr	r0, [pc, #20]	; (80018d0 <InputMessageHandler+0x3c4>)
 80018ba:	f001 ffc1 	bl	8003840 <HAL_TIM_PWM_Stop>
			break;
 80018be:	bf00      	nop


		//TODO: Input

	}
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40011000 	.word	0x40011000
 80018cc:	20000394 	.word	0x20000394
 80018d0:	20000354 	.word	0x20000354
 80018d4:	40000800 	.word	0x40000800

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(true)
	{
		HAL_GPIO_TogglePin(BuildInLed_GPIO_Port, BuildInLed_Pin);
 80018dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e0:	4803      	ldr	r0, [pc, #12]	; (80018f0 <Error_Handler+0x18>)
 80018e2:	f000 ff07 	bl	80026f4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80018e6:	2064      	movs	r0, #100	; 0x64
 80018e8:	f000 fc62 	bl	80021b0 <HAL_Delay>
		HAL_GPIO_TogglePin(BuildInLed_GPIO_Port, BuildInLed_Pin);
 80018ec:	e7f6      	b.n	80018dc <Error_Handler+0x4>
 80018ee:	bf00      	nop
 80018f0:	40011000 	.word	0x40011000

080018f4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <MX_SPI1_Init+0x64>)
 80018fa:	4a18      	ldr	r2, [pc, #96]	; (800195c <MX_SPI1_Init+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <MX_SPI1_Init+0x64>)
 8001900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_SPI1_Init+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_SPI1_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MX_SPI1_Init+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_SPI1_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_SPI1_Init+0x64>)
 8001920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001924:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_SPI1_Init+0x64>)
 8001928:	2220      	movs	r2, #32
 800192a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <MX_SPI1_Init+0x64>)
 800192e:	2200      	movs	r2, #0
 8001930:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_SPI1_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <MX_SPI1_Init+0x64>)
 800193a:	2200      	movs	r2, #0
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_SPI1_Init+0x64>)
 8001940:	220a      	movs	r2, #10
 8001942:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001944:	4804      	ldr	r0, [pc, #16]	; (8001958 <MX_SPI1_Init+0x64>)
 8001946:	f001 fb2b 	bl	8002fa0 <HAL_SPI_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001950:	f7ff ffc2 	bl	80018d8 <Error_Handler>
  }

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200002fc 	.word	0x200002fc
 800195c:	40013000 	.word	0x40013000

08001960 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <MX_SPI2_Init+0x64>)
 8001966:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <MX_SPI2_Init+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_SPI2_Init+0x64>)
 800196c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001970:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_SPI2_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <MX_SPI2_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_SPI2_Init+0x64>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_SPI2_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_SPI2_Init+0x64>)
 800198c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001990:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_SPI2_Init+0x64>)
 8001994:	2200      	movs	r2, #0
 8001996:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <MX_SPI2_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_SPI2_Init+0x64>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <MX_SPI2_Init+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_SPI2_Init+0x64>)
 80019ac:	220a      	movs	r2, #10
 80019ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	; (80019c4 <MX_SPI2_Init+0x64>)
 80019b2:	f001 faf5 	bl	8002fa0 <HAL_SPI_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80019bc:	f7ff ff8c 	bl	80018d8 <Error_Handler>
  }

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200002a4 	.word	0x200002a4
 80019c8:	40003800 	.word	0x40003800

080019cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a37      	ldr	r2, [pc, #220]	; (8001ac4 <HAL_SPI_MspInit+0xf8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d130      	bne.n	8001a4e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ec:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <HAL_SPI_MspInit+0xfc>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a35      	ldr	r2, [pc, #212]	; (8001ac8 <HAL_SPI_MspInit+0xfc>)
 80019f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <HAL_SPI_MspInit+0xfc>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a2f      	ldr	r2, [pc, #188]	; (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a1c:	23a0      	movs	r3, #160	; 0xa0
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0318 	add.w	r3, r7, #24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4827      	ldr	r0, [pc, #156]	; (8001acc <HAL_SPI_MspInit+0x100>)
 8001a30:	f000 fcee 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a34:	2340      	movs	r3, #64	; 0x40
 8001a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 0318 	add.w	r3, r7, #24
 8001a44:	4619      	mov	r1, r3
 8001a46:	4821      	ldr	r0, [pc, #132]	; (8001acc <HAL_SPI_MspInit+0x100>)
 8001a48:	f000 fce2 	bl	8002410 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a4c:	e036      	b.n	8001abc <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_SPI_MspInit+0x104>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d131      	bne.n	8001abc <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	4a1a      	ldr	r2, [pc, #104]	; (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a62:	61d3      	str	r3, [r2, #28]
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a76:	f043 0308 	orr.w	r3, r3, #8
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001a88:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	f107 0318 	add.w	r3, r7, #24
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <HAL_SPI_MspInit+0x108>)
 8001a9e:	f000 fcb7 	bl	8002410 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001aa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0318 	add.w	r3, r7, #24
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <HAL_SPI_MspInit+0x108>)
 8001ab8:	f000 fcaa 	bl	8002410 <HAL_GPIO_Init>
}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40013000 	.word	0x40013000
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010800 	.word	0x40010800
 8001ad0:	40003800 	.word	0x40003800
 8001ad4:	40010c00 	.word	0x40010c00

08001ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_MspInit+0x6c>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <HAL_MspInit+0x6c>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6193      	str	r3, [r2, #24]
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_MspInit+0x6c>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_MspInit+0x6c>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <HAL_MspInit+0x6c>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	61d3      	str	r3, [r2, #28]
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_MspInit+0x6c>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2005      	movs	r0, #5
 8001b14:	f000 fc45 	bl	80023a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b18:	2005      	movs	r0, #5
 8001b1a:	f000 fc5e 	bl	80023da <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_MspInit+0x70>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <HAL_MspInit+0x70>)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000

08001b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <HardFault_Handler+0x4>

08001b5e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <MemManage_Handler+0x4>

08001b64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <BusFault_Handler+0x4>

08001b6a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <UsageFault_Handler+0x4>

08001b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b98:	f000 faee 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001bb0:	2004      	movs	r0, #4
 8001bb2:	f000 fdb7 	bl	8002724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <_sbrk+0x50>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x16>
		heap_end = &end;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <_sbrk+0x50>)
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <_sbrk+0x54>)
 8001bd0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <_sbrk+0x50>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <_sbrk+0x50>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	466a      	mov	r2, sp
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d907      	bls.n	8001bf6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001be6:	f002 fce7 	bl	80045b8 <__errno>
 8001bea:	4602      	mov	r2, r0
 8001bec:	230c      	movs	r3, #12
 8001bee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	e006      	b.n	8001c04 <_sbrk+0x48>
	}

	heap_end += incr;
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <_sbrk+0x50>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a03      	ldr	r2, [pc, #12]	; (8001c0c <_sbrk+0x50>)
 8001c00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000298 	.word	0x20000298
 8001c10:	20000420 	.word	0x20000420

08001c14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c18:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <SystemInit+0x5c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <SystemInit+0x5c>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <SystemInit+0x5c>)
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4911      	ldr	r1, [pc, #68]	; (8001c70 <SystemInit+0x5c>)
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <SystemInit+0x60>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <SystemInit+0x5c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <SystemInit+0x5c>)
 8001c36:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <SystemInit+0x5c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <SystemInit+0x5c>)
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <SystemInit+0x5c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <SystemInit+0x5c>)
 8001c52:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c56:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SystemInit+0x5c>)
 8001c5a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c5e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SystemInit+0x64>)
 8001c62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c66:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	40021000 	.word	0x40021000
 8001c74:	f8ff0000 	.word	0xf8ff0000
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08e      	sub	sp, #56	; 0x38
 8001c80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	f107 0320 	add.w	r3, r7, #32
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
 8001ca8:	615a      	str	r2, [r3, #20]
 8001caa:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001cac:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <MX_TIM2_Init+0xfc>)
 8001cae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cb4:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <MX_TIM2_Init+0xfc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cba:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <MX_TIM2_Init+0xfc>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <MX_TIM2_Init+0xfc>)
 8001cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <MX_TIM2_Init+0xfc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cce:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <MX_TIM2_Init+0xfc>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cd4:	4828      	ldr	r0, [pc, #160]	; (8001d78 <MX_TIM2_Init+0xfc>)
 8001cd6:	f001 fd22 	bl	800371e <HAL_TIM_Base_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ce0:	f7ff fdfa 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4821      	ldr	r0, [pc, #132]	; (8001d78 <MX_TIM2_Init+0xfc>)
 8001cf2:	f001 feb7 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001cfc:	f7ff fdec 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d00:	481d      	ldr	r0, [pc, #116]	; (8001d78 <MX_TIM2_Init+0xfc>)
 8001d02:	f001 fd37 	bl	8003774 <HAL_TIM_PWM_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d0c:	f7ff fde4 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4816      	ldr	r0, [pc, #88]	; (8001d78 <MX_TIM2_Init+0xfc>)
 8001d20:	f002 f9fc 	bl	800411c <HAL_TIMEx_MasterConfigSynchronization>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d2a:	f7ff fdd5 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d2e:	2360      	movs	r3, #96	; 0x60
 8001d30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	2200      	movs	r2, #0
 8001d42:	4619      	mov	r1, r3
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <MX_TIM2_Init+0xfc>)
 8001d46:	f001 fdc7 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d50:	f7ff fdc2 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2204      	movs	r2, #4
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4807      	ldr	r0, [pc, #28]	; (8001d78 <MX_TIM2_Init+0xfc>)
 8001d5c:	f001 fdbc 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001d66:	f7ff fdb7 	bl	80018d8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001d6a:	4803      	ldr	r0, [pc, #12]	; (8001d78 <MX_TIM2_Init+0xfc>)
 8001d6c:	f000 f8ce 	bl	8001f0c <HAL_TIM_MspPostInit>

}
 8001d70:	bf00      	nop
 8001d72:	3738      	adds	r7, #56	; 0x38
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000394 	.word	0x20000394

08001d7c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08e      	sub	sp, #56	; 0x38
 8001d80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d90:	f107 0320 	add.w	r3, r7, #32
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
 8001da8:	615a      	str	r2, [r3, #20]
 8001daa:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001dac:	4b3d      	ldr	r3, [pc, #244]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001dae:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <MX_TIM4_Init+0x12c>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001db2:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db8:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001dbe:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dc4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc6:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dcc:	4b35      	ldr	r3, [pc, #212]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dd2:	4834      	ldr	r0, [pc, #208]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001dd4:	f001 fca3 	bl	800371e <HAL_TIM_Base_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001dde:	f7ff fd7b 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001de8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dec:	4619      	mov	r1, r3
 8001dee:	482d      	ldr	r0, [pc, #180]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001df0:	f001 fe38 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001dfa:	f7ff fd6d 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dfe:	4829      	ldr	r0, [pc, #164]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001e00:	f001 fcb8 	bl	8003774 <HAL_TIM_PWM_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001e0a:	f7ff fd65 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e16:	f107 0320 	add.w	r3, r7, #32
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4821      	ldr	r0, [pc, #132]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001e1e:	f002 f97d 	bl	800411c <HAL_TIMEx_MasterConfigSynchronization>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001e28:	f7ff fd56 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e2c:	2360      	movs	r3, #96	; 0x60
 8001e2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	2200      	movs	r2, #0
 8001e40:	4619      	mov	r1, r3
 8001e42:	4818      	ldr	r0, [pc, #96]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001e44:	f001 fd48 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001e4e:	f7ff fd43 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	2204      	movs	r2, #4
 8001e56:	4619      	mov	r1, r3
 8001e58:	4812      	ldr	r0, [pc, #72]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001e5a:	f001 fd3d 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001e64:	f7ff fd38 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001e70:	f001 fd32 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001e7a:	f7ff fd2d 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	220c      	movs	r2, #12
 8001e82:	4619      	mov	r1, r3
 8001e84:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001e86:	f001 fd27 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001e90:	f7ff fd22 	bl	80018d8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <MX_TIM4_Init+0x128>)
 8001e96:	f000 f839 	bl	8001f0c <HAL_TIM_MspPostInit>

}
 8001e9a:	bf00      	nop
 8001e9c:	3738      	adds	r7, #56	; 0x38
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000354 	.word	0x20000354
 8001ea8:	40000800 	.word	0x40000800

08001eac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_TIM_Base_MspInit+0x58>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <HAL_TIM_Base_MspInit+0x58>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_TIM_Base_MspInit+0x58>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ed6:	e010      	b.n	8001efa <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_TIM_Base_MspInit+0x5c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10b      	bne.n	8001efa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_TIM_Base_MspInit+0x58>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_TIM_Base_MspInit+0x58>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	61d3      	str	r3, [r2, #28]
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_TIM_Base_MspInit+0x58>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40000800 	.word	0x40000800

08001f0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2a:	d118      	bne.n	8001f5e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_TIM_MspPostInit+0x98>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <HAL_TIM_MspPostInit+0x98>)
 8001f32:	f043 0304 	orr.w	r3, r3, #4
 8001f36:	6193      	str	r3, [r2, #24]
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_TIM_MspPostInit+0x98>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f44:	2303      	movs	r3, #3
 8001f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	4619      	mov	r1, r3
 8001f56:	4814      	ldr	r0, [pc, #80]	; (8001fa8 <HAL_TIM_MspPostInit+0x9c>)
 8001f58:	f000 fa5a 	bl	8002410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f5c:	e01d      	b.n	8001f9a <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <HAL_TIM_MspPostInit+0xa0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d118      	bne.n	8001f9a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_TIM_MspPostInit+0x98>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <HAL_TIM_MspPostInit+0x98>)
 8001f6e:	f043 0308 	orr.w	r3, r3, #8
 8001f72:	6193      	str	r3, [r2, #24]
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_TIM_MspPostInit+0x98>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001f80:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001f84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	4619      	mov	r1, r3
 8001f94:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <HAL_TIM_MspPostInit+0xa4>)
 8001f96:	f000 fa3b 	bl	8002410 <HAL_GPIO_Init>
}
 8001f9a:	bf00      	nop
 8001f9c:	3720      	adds	r7, #32
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010800 	.word	0x40010800
 8001fac:	40000800 	.word	0x40000800
 8001fb0:	40010c00 	.word	0x40010c00

08001fb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <MX_USART1_UART_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fec:	f002 f8da 	bl	80041a4 <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f7ff fc6f 	bl	80018d8 <Error_Handler>
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200003d4 	.word	0x200003d4
 8002004:	40013800 	.word	0x40013800

08002008 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_UART_MspInit+0x8c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d131      	bne.n	800208c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_UART_MspInit+0x90>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <HAL_UART_MspInit+0x90>)
 800202e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_UART_MspInit+0x90>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_UART_MspInit+0x90>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <HAL_UART_MspInit+0x90>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_UART_MspInit+0x90>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800205c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f107 0310 	add.w	r3, r7, #16
 800206a:	4619      	mov	r1, r3
 800206c:	480b      	ldr	r0, [pc, #44]	; (800209c <HAL_UART_MspInit+0x94>)
 800206e:	f000 f9cf 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	4619      	mov	r1, r3
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <HAL_UART_MspInit+0x94>)
 8002088:	f000 f9c2 	bl	8002410 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800208c:	bf00      	nop
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40013800 	.word	0x40013800
 8002098:	40021000 	.word	0x40021000
 800209c:	40010800 	.word	0x40010800

080020a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80020a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80020a2:	e003      	b.n	80020ac <LoopCopyDataInit>

080020a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80020a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80020a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80020aa:	3104      	adds	r1, #4

080020ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80020ac:	480a      	ldr	r0, [pc, #40]	; (80020d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80020b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80020b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80020b4:	d3f6      	bcc.n	80020a4 <CopyDataInit>
  ldr r2, =_sbss
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80020b8:	e002      	b.n	80020c0 <LoopFillZerobss>

080020ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80020bc:	f842 3b04 	str.w	r3, [r2], #4

080020c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80020c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80020c4:	d3f9      	bcc.n	80020ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020c6:	f7ff fda5 	bl	8001c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ca:	f002 fa7b 	bl	80045c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ce:	f7ff f95f 	bl	8001390 <main>
  bx lr
 80020d2:	4770      	bx	lr
  ldr r3, =_sidata
 80020d4:	08005000 	.word	0x08005000
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020dc:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80020e0:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80020e4:	2000041c 	.word	0x2000041c

080020e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020e8:	e7fe      	b.n	80020e8 <ADC1_2_IRQHandler>
	...

080020ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_Init+0x28>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_Init+0x28>)
 80020f6:	f043 0310 	orr.w	r3, r3, #16
 80020fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fc:	2003      	movs	r0, #3
 80020fe:	f000 f945 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002102:	2000      	movs	r0, #0
 8002104:	f000 f808 	bl	8002118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002108:	f7ff fce6 	bl	8001ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40022000 	.word	0x40022000

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_InitTick+0x54>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_InitTick+0x58>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f95d 	bl	80023f6 <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f000 f925 	bl	80023a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	; (8002174 <HAL_InitTick+0x5c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000004 	.word	0x20000004
 8002170:	2000000c 	.word	0x2000000c
 8002174:	20000008 	.word	0x20000008

08002178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_IncTick+0x1c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_IncTick+0x20>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a03      	ldr	r2, [pc, #12]	; (8002198 <HAL_IncTick+0x20>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	2000000c 	.word	0x2000000c
 8002198:	20000414 	.word	0x20000414

0800219c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b02      	ldr	r3, [pc, #8]	; (80021ac <HAL_GetTick+0x10>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	20000414 	.word	0x20000414

080021b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff fff0 	bl	800219c <HAL_GetTick>
 80021bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c8:	d005      	beq.n	80021d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_Delay+0x40>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4413      	add	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021d6:	bf00      	nop
 80021d8:	f7ff ffe0 	bl	800219c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d8f7      	bhi.n	80021d8 <HAL_Delay+0x28>
  {
  }
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2000000c 	.word	0x2000000c

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	; (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db0b      	blt.n	8002282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4906      	ldr	r1, [pc, #24]	; (800228c <__NVIC_EnableIRQ+0x34>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	; (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002358:	d301      	bcc.n	800235e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <SysTick_Config+0x40>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002366:	210f      	movs	r1, #15
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f7ff ff90 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <SysTick_Config+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002376:	4b04      	ldr	r3, [pc, #16]	; (8002388 <SysTick_Config+0x40>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000e010 	.word	0xe000e010

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff2d 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff42 	bl	800223c <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff90 	bl	80022e4 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5f 	bl	8002290 <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff35 	bl	8002258 <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa2 	bl	8002348 <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b08b      	sub	sp, #44	; 0x2c
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002422:	e127      	b.n	8002674 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002424:	2201      	movs	r2, #1
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 8116 	bne.w	800266e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b12      	cmp	r3, #18
 8002448:	d034      	beq.n	80024b4 <HAL_GPIO_Init+0xa4>
 800244a:	2b12      	cmp	r3, #18
 800244c:	d80d      	bhi.n	800246a <HAL_GPIO_Init+0x5a>
 800244e:	2b02      	cmp	r3, #2
 8002450:	d02b      	beq.n	80024aa <HAL_GPIO_Init+0x9a>
 8002452:	2b02      	cmp	r3, #2
 8002454:	d804      	bhi.n	8002460 <HAL_GPIO_Init+0x50>
 8002456:	2b00      	cmp	r3, #0
 8002458:	d031      	beq.n	80024be <HAL_GPIO_Init+0xae>
 800245a:	2b01      	cmp	r3, #1
 800245c:	d01c      	beq.n	8002498 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800245e:	e048      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002460:	2b03      	cmp	r3, #3
 8002462:	d043      	beq.n	80024ec <HAL_GPIO_Init+0xdc>
 8002464:	2b11      	cmp	r3, #17
 8002466:	d01b      	beq.n	80024a0 <HAL_GPIO_Init+0x90>
          break;
 8002468:	e043      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800246a:	4a89      	ldr	r2, [pc, #548]	; (8002690 <HAL_GPIO_Init+0x280>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d026      	beq.n	80024be <HAL_GPIO_Init+0xae>
 8002470:	4a87      	ldr	r2, [pc, #540]	; (8002690 <HAL_GPIO_Init+0x280>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d806      	bhi.n	8002484 <HAL_GPIO_Init+0x74>
 8002476:	4a87      	ldr	r2, [pc, #540]	; (8002694 <HAL_GPIO_Init+0x284>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d020      	beq.n	80024be <HAL_GPIO_Init+0xae>
 800247c:	4a86      	ldr	r2, [pc, #536]	; (8002698 <HAL_GPIO_Init+0x288>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d01d      	beq.n	80024be <HAL_GPIO_Init+0xae>
          break;
 8002482:	e036      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002484:	4a85      	ldr	r2, [pc, #532]	; (800269c <HAL_GPIO_Init+0x28c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d019      	beq.n	80024be <HAL_GPIO_Init+0xae>
 800248a:	4a85      	ldr	r2, [pc, #532]	; (80026a0 <HAL_GPIO_Init+0x290>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d016      	beq.n	80024be <HAL_GPIO_Init+0xae>
 8002490:	4a84      	ldr	r2, [pc, #528]	; (80026a4 <HAL_GPIO_Init+0x294>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0xae>
          break;
 8002496:	e02c      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	623b      	str	r3, [r7, #32]
          break;
 800249e:	e028      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	3304      	adds	r3, #4
 80024a6:	623b      	str	r3, [r7, #32]
          break;
 80024a8:	e023      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	3308      	adds	r3, #8
 80024b0:	623b      	str	r3, [r7, #32]
          break;
 80024b2:	e01e      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	330c      	adds	r3, #12
 80024ba:	623b      	str	r3, [r7, #32]
          break;
 80024bc:	e019      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024c6:	2304      	movs	r3, #4
 80024c8:	623b      	str	r3, [r7, #32]
          break;
 80024ca:	e012      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024d4:	2308      	movs	r3, #8
 80024d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	611a      	str	r2, [r3, #16]
          break;
 80024de:	e008      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024e0:	2308      	movs	r3, #8
 80024e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	615a      	str	r2, [r3, #20]
          break;
 80024ea:	e002      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024ec:	2300      	movs	r3, #0
 80024ee:	623b      	str	r3, [r7, #32]
          break;
 80024f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2bff      	cmp	r3, #255	; 0xff
 80024f6:	d801      	bhi.n	80024fc <HAL_GPIO_Init+0xec>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	e001      	b.n	8002500 <HAL_GPIO_Init+0xf0>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3304      	adds	r3, #4
 8002500:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2bff      	cmp	r3, #255	; 0xff
 8002506:	d802      	bhi.n	800250e <HAL_GPIO_Init+0xfe>
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x104>
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	3b08      	subs	r3, #8
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	210f      	movs	r1, #15
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	401a      	ands	r2, r3
 8002526:	6a39      	ldr	r1, [r7, #32]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	431a      	orrs	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8096 	beq.w	800266e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002542:	4b59      	ldr	r3, [pc, #356]	; (80026a8 <HAL_GPIO_Init+0x298>)
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <HAL_GPIO_Init+0x298>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6193      	str	r3, [r2, #24]
 800254e:	4b56      	ldr	r3, [pc, #344]	; (80026a8 <HAL_GPIO_Init+0x298>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800255a:	4a54      	ldr	r2, [pc, #336]	; (80026ac <HAL_GPIO_Init+0x29c>)
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	3302      	adds	r3, #2
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a4b      	ldr	r2, [pc, #300]	; (80026b0 <HAL_GPIO_Init+0x2a0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d013      	beq.n	80025ae <HAL_GPIO_Init+0x19e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4a      	ldr	r2, [pc, #296]	; (80026b4 <HAL_GPIO_Init+0x2a4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00d      	beq.n	80025aa <HAL_GPIO_Init+0x19a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a49      	ldr	r2, [pc, #292]	; (80026b8 <HAL_GPIO_Init+0x2a8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <HAL_GPIO_Init+0x196>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a48      	ldr	r2, [pc, #288]	; (80026bc <HAL_GPIO_Init+0x2ac>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_GPIO_Init+0x192>
 800259e:	2303      	movs	r3, #3
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x1a0>
 80025a2:	2304      	movs	r3, #4
 80025a4:	e004      	b.n	80025b0 <HAL_GPIO_Init+0x1a0>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e002      	b.n	80025b0 <HAL_GPIO_Init+0x1a0>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_GPIO_Init+0x1a0>
 80025ae:	2300      	movs	r3, #0
 80025b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b2:	f002 0203 	and.w	r2, r2, #3
 80025b6:	0092      	lsls	r2, r2, #2
 80025b8:	4093      	lsls	r3, r2
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025c0:	493a      	ldr	r1, [pc, #232]	; (80026ac <HAL_GPIO_Init+0x29c>)
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	3302      	adds	r3, #2
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025da:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4938      	ldr	r1, [pc, #224]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
 80025e6:	e006      	b.n	80025f6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025e8:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	4933      	ldr	r1, [pc, #204]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002602:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	492e      	ldr	r1, [pc, #184]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]
 800260e:	e006      	b.n	800261e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	43db      	mvns	r3, r3
 8002618:	4929      	ldr	r1, [pc, #164]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 800261a:	4013      	ands	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800262a:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	4924      	ldr	r1, [pc, #144]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
 8002636:	e006      	b.n	8002646 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	43db      	mvns	r3, r3
 8002640:	491f      	ldr	r1, [pc, #124]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 8002642:	4013      	ands	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d006      	beq.n	8002660 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	491a      	ldr	r1, [pc, #104]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	60cb      	str	r3, [r1, #12]
 800265e:	e006      	b.n	800266e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	43db      	mvns	r3, r3
 8002668:	4915      	ldr	r1, [pc, #84]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 800266a:	4013      	ands	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	3301      	adds	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	f47f aed0 	bne.w	8002424 <HAL_GPIO_Init+0x14>
  }
}
 8002684:	bf00      	nop
 8002686:	372c      	adds	r7, #44	; 0x2c
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	10210000 	.word	0x10210000
 8002694:	10110000 	.word	0x10110000
 8002698:	10120000 	.word	0x10120000
 800269c:	10310000 	.word	0x10310000
 80026a0:	10320000 	.word	0x10320000
 80026a4:	10220000 	.word	0x10220000
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40010000 	.word	0x40010000
 80026b0:	40010800 	.word	0x40010800
 80026b4:	40010c00 	.word	0x40010c00
 80026b8:	40011000 	.word	0x40011000
 80026bc:	40011400 	.word	0x40011400
 80026c0:	40010400 	.word	0x40010400

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026e0:	e003      	b.n	80026ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	041a      	lsls	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	611a      	str	r2, [r3, #16]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	887b      	ldrh	r3, [r7, #2]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800270c:	887a      	ldrh	r2, [r7, #2]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002712:	e002      	b.n	800271a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002714:	887a      	ldrh	r2, [r7, #2]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	611a      	str	r2, [r3, #16]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f806 	bl	8002754 <HAL_GPIO_EXTI_Callback>
  }
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40010400 	.word	0x40010400

08002754 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e26c      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8087 	beq.w	8002896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002788:	4b92      	ldr	r3, [pc, #584]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b04      	cmp	r3, #4
 8002792:	d00c      	beq.n	80027ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002794:	4b8f      	ldr	r3, [pc, #572]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d112      	bne.n	80027c6 <HAL_RCC_OscConfig+0x5e>
 80027a0:	4b8c      	ldr	r3, [pc, #560]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ac:	d10b      	bne.n	80027c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ae:	4b89      	ldr	r3, [pc, #548]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d06c      	beq.n	8002894 <HAL_RCC_OscConfig+0x12c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d168      	bne.n	8002894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e246      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x76>
 80027d0:	4b80      	ldr	r3, [pc, #512]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a7f      	ldr	r2, [pc, #508]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	e02e      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x98>
 80027e6:	4b7b      	ldr	r3, [pc, #492]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7a      	ldr	r2, [pc, #488]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b78      	ldr	r3, [pc, #480]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a77      	ldr	r2, [pc, #476]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0xbc>
 800280a:	4b72      	ldr	r3, [pc, #456]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a71      	ldr	r2, [pc, #452]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b6f      	ldr	r3, [pc, #444]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6e      	ldr	r2, [pc, #440]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 8002824:	4b6b      	ldr	r3, [pc, #428]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a6a      	ldr	r2, [pc, #424]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b68      	ldr	r3, [pc, #416]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a67      	ldr	r2, [pc, #412]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff fcaa 	bl	800219c <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff fca6 	bl	800219c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1fa      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b5d      	ldr	r3, [pc, #372]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xe4>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff fc96 	bl	800219c <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff fc92 	bl	800219c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1e6      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x10c>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028a2:	4b4c      	ldr	r3, [pc, #304]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028ae:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x18c>
 80028ba:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x176>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1ba      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4939      	ldr	r1, [pc, #228]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	e03a      	b.n	800296a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fc:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7ff fc4b 	bl	800219c <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800290a:	f7ff fc47 	bl	800219c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e19b      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4927      	ldr	r1, [pc, #156]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff fc2a 	bl	800219c <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294c:	f7ff fc26 	bl	800219c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e17a      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d03a      	beq.n	80029ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d019      	beq.n	80029b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_RCC_OscConfig+0x274>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7ff fc0a 	bl	800219c <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298c:	f7ff fc06 	bl	800219c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e15a      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029aa:	2001      	movs	r0, #1
 80029ac:	f000 fada 	bl	8002f64 <RCC_Delay>
 80029b0:	e01c      	b.n	80029ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_RCC_OscConfig+0x274>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b8:	f7ff fbf0 	bl	800219c <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029be:	e00f      	b.n	80029e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c0:	f7ff fbec 	bl	800219c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d908      	bls.n	80029e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e140      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	42420000 	.word	0x42420000
 80029dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	4b9e      	ldr	r3, [pc, #632]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e9      	bne.n	80029c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a6 	beq.w	8002b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fe:	4b97      	ldr	r3, [pc, #604]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10d      	bne.n	8002a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	4b94      	ldr	r3, [pc, #592]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4a93      	ldr	r2, [pc, #588]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a14:	61d3      	str	r3, [r2, #28]
 8002a16:	4b91      	ldr	r3, [pc, #580]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a22:	2301      	movs	r3, #1
 8002a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a26:	4b8e      	ldr	r3, [pc, #568]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d118      	bne.n	8002a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a32:	4b8b      	ldr	r3, [pc, #556]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a8a      	ldr	r2, [pc, #552]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3e:	f7ff fbad 	bl	800219c <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a46:	f7ff fba9 	bl	800219c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b64      	cmp	r3, #100	; 0x64
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0fd      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	4b81      	ldr	r3, [pc, #516]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x312>
 8002a6c:	4b7b      	ldr	r3, [pc, #492]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4a7a      	ldr	r2, [pc, #488]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6213      	str	r3, [r2, #32]
 8002a78:	e02d      	b.n	8002ad6 <HAL_RCC_OscConfig+0x36e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x334>
 8002a82:	4b76      	ldr	r3, [pc, #472]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	4a75      	ldr	r2, [pc, #468]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	6213      	str	r3, [r2, #32]
 8002a8e:	4b73      	ldr	r3, [pc, #460]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4a72      	ldr	r2, [pc, #456]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	f023 0304 	bic.w	r3, r3, #4
 8002a98:	6213      	str	r3, [r2, #32]
 8002a9a:	e01c      	b.n	8002ad6 <HAL_RCC_OscConfig+0x36e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCC_OscConfig+0x356>
 8002aa4:	4b6d      	ldr	r3, [pc, #436]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4a6c      	ldr	r2, [pc, #432]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	6213      	str	r3, [r2, #32]
 8002ab0:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4a69      	ldr	r2, [pc, #420]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6213      	str	r3, [r2, #32]
 8002abc:	e00b      	b.n	8002ad6 <HAL_RCC_OscConfig+0x36e>
 8002abe:	4b67      	ldr	r3, [pc, #412]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4a66      	ldr	r2, [pc, #408]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6213      	str	r3, [r2, #32]
 8002aca:	4b64      	ldr	r3, [pc, #400]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4a63      	ldr	r2, [pc, #396]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d015      	beq.n	8002b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7ff fb5d 	bl	800219c <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7ff fb59 	bl	800219c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e0ab      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	4b57      	ldr	r3, [pc, #348]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ee      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x37e>
 8002b08:	e014      	b.n	8002b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0a:	f7ff fb47 	bl	800219c <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7ff fb43 	bl	800219c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e095      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b28:	4b4c      	ldr	r3, [pc, #304]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ee      	bne.n	8002b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d105      	bne.n	8002b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3a:	4b48      	ldr	r3, [pc, #288]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4a47      	ldr	r2, [pc, #284]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8081 	beq.w	8002c52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b50:	4b42      	ldr	r3, [pc, #264]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d061      	beq.n	8002c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d146      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b64:	4b3f      	ldr	r3, [pc, #252]	; (8002c64 <HAL_RCC_OscConfig+0x4fc>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7ff fb17 	bl	800219c <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b72:	f7ff fb13 	bl	800219c <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e067      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b84:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b98:	d108      	bne.n	8002bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b9a:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	492d      	ldr	r1, [pc, #180]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bac:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a19      	ldr	r1, [r3, #32]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	4927      	ldr	r1, [pc, #156]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <HAL_RCC_OscConfig+0x4fc>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7ff fae7 	bl	800219c <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7ff fae3 	bl	800219c <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e037      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x46a>
 8002bf0:	e02f      	b.n	8002c52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b1c      	ldr	r3, [pc, #112]	; (8002c64 <HAL_RCC_OscConfig+0x4fc>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7ff fad0 	bl	800219c <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7ff facc 	bl	800219c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e020      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x498>
 8002c1e:	e018      	b.n	8002c52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e013      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_OscConfig+0x4f4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40007000 	.word	0x40007000
 8002c64:	42420060 	.word	0x42420060

08002c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0d0      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d910      	bls.n	8002cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b67      	ldr	r3, [pc, #412]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 0207 	bic.w	r2, r3, #7
 8002c92:	4965      	ldr	r1, [pc, #404]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b63      	ldr	r3, [pc, #396]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0b8      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d020      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc4:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4a58      	ldr	r2, [pc, #352]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cdc:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a52      	ldr	r2, [pc, #328]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ce6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce8:	4b50      	ldr	r3, [pc, #320]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	494d      	ldr	r1, [pc, #308]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d040      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d115      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e07f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d26:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e073      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d36:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e06b      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d46:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f023 0203 	bic.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4936      	ldr	r1, [pc, #216]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d58:	f7ff fa20 	bl	800219c <HAL_GetTick>
 8002d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d60:	f7ff fa1c 	bl	800219c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e053      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d76:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 020c 	and.w	r2, r3, #12
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d1eb      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d88:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d210      	bcs.n	8002db8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 0207 	bic.w	r2, r3, #7
 8002d9e:	4922      	ldr	r1, [pc, #136]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e032      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc4:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4916      	ldr	r1, [pc, #88]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	490e      	ldr	r1, [pc, #56]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002df6:	f000 f821 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002dfa:	4601      	mov	r1, r0
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <HAL_RCC_ClockConfig+0x1c8>)
 8002e08:	5cd3      	ldrb	r3, [r2, r3]
 8002e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e0e:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1cc>)
 8002e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_ClockConfig+0x1d0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff f97e 	bl	8002118 <HAL_InitTick>

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40022000 	.word	0x40022000
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	08004fac 	.word	0x08004fac
 8002e34:	20000004 	.word	0x20000004
 8002e38:	20000008 	.word	0x20000008

08002e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	b490      	push	{r4, r7}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e42:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e44:	1d3c      	adds	r4, r7, #4
 8002e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e4c:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e66:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d002      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x40>
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d003      	beq.n	8002e82 <HAL_RCC_GetSysClockFreq+0x46>
 8002e7a:	e02d      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e7e:	623b      	str	r3, [r7, #32]
      break;
 8002e80:	e02d      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	0c9b      	lsrs	r3, r3, #18
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e8e:	4413      	add	r3, r2
 8002e90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d013      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	0c5b      	lsrs	r3, r3, #17
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eae:	4413      	add	r3, r2
 8002eb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002eb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	4a0f      	ldr	r2, [pc, #60]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eba:	fb02 f203 	mul.w	r2, r2, r3
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec6:	e004      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ecc:	fb02 f303 	mul.w	r3, r2, r3
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	623b      	str	r3, [r7, #32]
      break;
 8002ed6:	e002      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ed8:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eda:	623b      	str	r3, [r7, #32]
      break;
 8002edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ede:	6a3b      	ldr	r3, [r7, #32]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3728      	adds	r7, #40	; 0x28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc90      	pop	{r4, r7}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	08004f98 	.word	0x08004f98
 8002ef0:	08004fa8 	.word	0x08004fa8
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	007a1200 	.word	0x007a1200
 8002efc:	003d0900 	.word	0x003d0900

08002f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f04:	4b02      	ldr	r3, [pc, #8]	; (8002f10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	20000004 	.word	0x20000004

08002f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f18:	f7ff fff2 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4601      	mov	r1, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4a03      	ldr	r2, [pc, #12]	; (8002f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2a:	5cd3      	ldrb	r3, [r2, r3]
 8002f2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000
 8002f38:	08004fbc 	.word	0x08004fbc

08002f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f40:	f7ff ffde 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f44:	4601      	mov	r1, r0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	0adb      	lsrs	r3, r3, #11
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f52:	5cd3      	ldrb	r3, [r2, r3]
 8002f54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	08004fbc 	.word	0x08004fbc

08002f64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <RCC_Delay+0x34>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <RCC_Delay+0x38>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0a5b      	lsrs	r3, r3, #9
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f80:	bf00      	nop
  }
  while (Delay --);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1e5a      	subs	r2, r3, #1
 8002f86:	60fa      	str	r2, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f9      	bne.n	8002f80 <RCC_Delay+0x1c>
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	20000004 	.word	0x20000004
 8002f9c:	10624dd3 	.word	0x10624dd3

08002fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e053      	b.n	800305a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d106      	bne.n	8002fd2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7fe fcfd 	bl	80019cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	ea42 0103 	orr.w	r1, r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	0c1a      	lsrs	r2, r3, #16
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f002 0204 	and.w	r2, r2, #4
 8003038:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003048:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b088      	sub	sp, #32
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_SPI_Transmit+0x22>
 8003080:	2302      	movs	r3, #2
 8003082:	e11e      	b.n	80032c2 <HAL_SPI_Transmit+0x260>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800308c:	f7ff f886 	bl	800219c <HAL_GetTick>
 8003090:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d002      	beq.n	80030a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
 80030a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030a6:	e103      	b.n	80032b0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_SPI_Transmit+0x52>
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030b8:	e0fa      	b.n	80032b0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2203      	movs	r2, #3
 80030be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	88fa      	ldrh	r2, [r7, #6]
 80030d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	88fa      	ldrh	r2, [r7, #6]
 80030d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003100:	d107      	bne.n	8003112 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003110:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d007      	beq.n	8003130 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003138:	d14b      	bne.n	80031d2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_SPI_Transmit+0xe6>
 8003142:	8afb      	ldrh	r3, [r7, #22]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d13e      	bne.n	80031c6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	1c9a      	adds	r2, r3, #2
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800316c:	e02b      	b.n	80031c6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d112      	bne.n	80031a2 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	881a      	ldrh	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	1c9a      	adds	r2, r3, #2
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	86da      	strh	r2, [r3, #54]	; 0x36
 80031a0:	e011      	b.n	80031c6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031a2:	f7fe fffb 	bl	800219c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d803      	bhi.n	80031ba <HAL_SPI_Transmit+0x158>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d102      	bne.n	80031c0 <HAL_SPI_Transmit+0x15e>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031c4:	e074      	b.n	80032b0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1ce      	bne.n	800316e <HAL_SPI_Transmit+0x10c>
 80031d0:	e04c      	b.n	800326c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_SPI_Transmit+0x17e>
 80031da:	8afb      	ldrh	r3, [r7, #22]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d140      	bne.n	8003262 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	330c      	adds	r3, #12
 80031ea:	7812      	ldrb	r2, [r2, #0]
 80031ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003206:	e02c      	b.n	8003262 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b02      	cmp	r3, #2
 8003214:	d113      	bne.n	800323e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	7812      	ldrb	r2, [r2, #0]
 8003222:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	86da      	strh	r2, [r3, #54]	; 0x36
 800323c:	e011      	b.n	8003262 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800323e:	f7fe ffad 	bl	800219c <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d803      	bhi.n	8003256 <HAL_SPI_Transmit+0x1f4>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d102      	bne.n	800325c <HAL_SPI_Transmit+0x1fa>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003260:	e026      	b.n	80032b0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1cd      	bne.n	8003208 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	6839      	ldr	r1, [r7, #0]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fa36 	bl	80036e2 <SPI_EndRxTxTransaction>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e000      	b.n	80032b0 <HAL_SPI_Transmit+0x24e>
  }

error:
 80032ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b08c      	sub	sp, #48	; 0x30
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032d8:	2301      	movs	r3, #1
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_SPI_TransmitReceive+0x26>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e18a      	b.n	8003606 <HAL_SPI_TransmitReceive+0x33c>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032f8:	f7fe ff50 	bl	800219c <HAL_GetTick>
 80032fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003316:	2b01      	cmp	r3, #1
 8003318:	d00f      	beq.n	800333a <HAL_SPI_TransmitReceive+0x70>
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003320:	d107      	bne.n	8003332 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <HAL_SPI_TransmitReceive+0x68>
 800332a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800332e:	2b04      	cmp	r3, #4
 8003330:	d003      	beq.n	800333a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003332:	2302      	movs	r3, #2
 8003334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003338:	e15b      	b.n	80035f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_SPI_TransmitReceive+0x82>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_SPI_TransmitReceive+0x82>
 8003346:	887b      	ldrh	r3, [r7, #2]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d103      	bne.n	8003354 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003352:	e14e      	b.n	80035f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b04      	cmp	r3, #4
 800335e:	d003      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2205      	movs	r2, #5
 8003364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	887a      	ldrh	r2, [r7, #2]
 8003378:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	887a      	ldrh	r2, [r7, #2]
 800337e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	887a      	ldrh	r2, [r7, #2]
 800338a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d007      	beq.n	80033bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c4:	d178      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x10a>
 80033ce:	8b7b      	ldrh	r3, [r7, #26]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d166      	bne.n	80034a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033f8:	e053      	b.n	80034a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d11b      	bne.n	8003440 <HAL_SPI_TransmitReceive+0x176>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d016      	beq.n	8003440 <HAL_SPI_TransmitReceive+0x176>
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d113      	bne.n	8003440 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	881a      	ldrh	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	1c9a      	adds	r2, r3, #2
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d119      	bne.n	8003482 <HAL_SPI_TransmitReceive+0x1b8>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d014      	beq.n	8003482 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	b292      	uxth	r2, r2
 8003464:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	1c9a      	adds	r2, r3, #2
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800347e:	2301      	movs	r3, #1
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003482:	f7fe fe8b 	bl	800219c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800348e:	429a      	cmp	r2, r3
 8003490:	d807      	bhi.n	80034a2 <HAL_SPI_TransmitReceive+0x1d8>
 8003492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d003      	beq.n	80034a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034a0:	e0a7      	b.n	80035f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1a6      	bne.n	80033fa <HAL_SPI_TransmitReceive+0x130>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1a1      	bne.n	80033fa <HAL_SPI_TransmitReceive+0x130>
 80034b6:	e07c      	b.n	80035b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_SPI_TransmitReceive+0x1fc>
 80034c0:	8b7b      	ldrh	r3, [r7, #26]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d16b      	bne.n	800359e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ec:	e057      	b.n	800359e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d11c      	bne.n	8003536 <HAL_SPI_TransmitReceive+0x26c>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d017      	beq.n	8003536 <HAL_SPI_TransmitReceive+0x26c>
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d114      	bne.n	8003536 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	330c      	adds	r3, #12
 8003516:	7812      	ldrb	r2, [r2, #0]
 8003518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d119      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x2ae>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d014      	beq.n	8003578 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003574:	2301      	movs	r3, #1
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003578:	f7fe fe10 	bl	800219c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003584:	429a      	cmp	r2, r3
 8003586:	d803      	bhi.n	8003590 <HAL_SPI_TransmitReceive+0x2c6>
 8003588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d102      	bne.n	8003596 <HAL_SPI_TransmitReceive+0x2cc>
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	2b00      	cmp	r3, #0
 8003594:	d103      	bne.n	800359e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800359c:	e029      	b.n	80035f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1a2      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x224>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d19d      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f893 	bl	80036e2 <SPI_EndRxTxTransaction>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035ce:	e010      	b.n	80035f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	e000      	b.n	80035f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80035f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003606:	4618      	mov	r0, r3
 8003608:	3730      	adds	r7, #48	; 0x30
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	4613      	mov	r3, r2
 800361c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800361e:	e04c      	b.n	80036ba <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003626:	d048      	beq.n	80036ba <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003628:	f7fe fdb8 	bl	800219c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d902      	bls.n	800363e <SPI_WaitFlagStateUntilTimeout+0x30>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d13d      	bne.n	80036ba <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800364c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003656:	d111      	bne.n	800367c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003660:	d004      	beq.n	800366c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366a:	d107      	bne.n	800367c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800367a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003684:	d10f      	bne.n	80036a6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e00f      	b.n	80036da <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4013      	ands	r3, r2
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	bf0c      	ite	eq
 80036ca:	2301      	moveq	r3, #1
 80036cc:	2300      	movne	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d1a3      	bne.n	8003620 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af02      	add	r7, sp, #8
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2180      	movs	r1, #128	; 0x80
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff ff88 	bl	800360e <SPI_WaitFlagStateUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e000      	b.n	8003716 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e01d      	b.n	800376c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d106      	bne.n	800374a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fe fbb1 	bl	8001eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	4619      	mov	r1, r3
 800375c:	4610      	mov	r0, r2
 800375e:	f000 fa39 	bl	8003bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e01d      	b.n	80037c2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f815 	bl	80037ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f000 fa0e 	bl	8003bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2201      	movs	r2, #1
 80037ec:	6839      	ldr	r1, [r7, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fc70 	bl	80040d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a10      	ldr	r2, [pc, #64]	; (800383c <HAL_TIM_PWM_Start+0x60>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d107      	bne.n	800380e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800380c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b06      	cmp	r3, #6
 800381e:	d007      	beq.n	8003830 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40012c00 	.word	0x40012c00

08003840 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	6839      	ldr	r1, [r7, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fc3e 	bl	80040d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <HAL_TIM_PWM_Stop+0x94>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d117      	bne.n	8003892 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6a1a      	ldr	r2, [r3, #32]
 8003868:	f241 1311 	movw	r3, #4369	; 0x1111
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10f      	bne.n	8003892 <HAL_TIM_PWM_Stop+0x52>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6a1a      	ldr	r2, [r3, #32]
 8003878:	f240 4344 	movw	r3, #1092	; 0x444
 800387c:	4013      	ands	r3, r2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d107      	bne.n	8003892 <HAL_TIM_PWM_Stop+0x52>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	f241 1311 	movw	r3, #4369	; 0x1111
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10f      	bne.n	80038c2 <HAL_TIM_PWM_Stop+0x82>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a1a      	ldr	r2, [r3, #32]
 80038a8:	f240 4344 	movw	r3, #1092	; 0x444
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d107      	bne.n	80038c2 <HAL_TIM_PWM_Stop+0x82>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40012c00 	.word	0x40012c00

080038d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e0b4      	b.n	8003a5c <HAL_TIM_PWM_ConfigChannel+0x184>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b0c      	cmp	r3, #12
 8003906:	f200 809f 	bhi.w	8003a48 <HAL_TIM_PWM_ConfigChannel+0x170>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003945 	.word	0x08003945
 8003914:	08003a49 	.word	0x08003a49
 8003918:	08003a49 	.word	0x08003a49
 800391c:	08003a49 	.word	0x08003a49
 8003920:	08003985 	.word	0x08003985
 8003924:	08003a49 	.word	0x08003a49
 8003928:	08003a49 	.word	0x08003a49
 800392c:	08003a49 	.word	0x08003a49
 8003930:	080039c7 	.word	0x080039c7
 8003934:	08003a49 	.word	0x08003a49
 8003938:	08003a49 	.word	0x08003a49
 800393c:	08003a49 	.word	0x08003a49
 8003940:	08003a07 	.word	0x08003a07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f9a4 	bl	8003c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0208 	orr.w	r2, r2, #8
 800395e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0204 	bic.w	r2, r2, #4
 800396e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6999      	ldr	r1, [r3, #24]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	619a      	str	r2, [r3, #24]
      break;
 8003982:	e062      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f9ea 	bl	8003d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800399e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6999      	ldr	r1, [r3, #24]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	021a      	lsls	r2, r3, #8
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	619a      	str	r2, [r3, #24]
      break;
 80039c4:	e041      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fa33 	bl	8003e38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0208 	orr.w	r2, r2, #8
 80039e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0204 	bic.w	r2, r2, #4
 80039f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69d9      	ldr	r1, [r3, #28]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	61da      	str	r2, [r3, #28]
      break;
 8003a04:	e021      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fa7d 	bl	8003f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69d9      	ldr	r1, [r3, #28]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	021a      	lsls	r2, r3, #8
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	61da      	str	r2, [r3, #28]
      break;
 8003a46:	e000      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003a48:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_TIM_ConfigClockSource+0x18>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e0a6      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x166>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d067      	beq.n	8003b84 <HAL_TIM_ConfigClockSource+0x120>
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d80b      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x6c>
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d073      	beq.n	8003ba4 <HAL_TIM_ConfigClockSource+0x140>
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	d802      	bhi.n	8003ac6 <HAL_TIM_ConfigClockSource+0x62>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d06f      	beq.n	8003ba4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ac4:	e078      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d06c      	beq.n	8003ba4 <HAL_TIM_ConfigClockSource+0x140>
 8003aca:	2b30      	cmp	r3, #48	; 0x30
 8003acc:	d06a      	beq.n	8003ba4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003ace:	e073      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ad0:	2b70      	cmp	r3, #112	; 0x70
 8003ad2:	d00d      	beq.n	8003af0 <HAL_TIM_ConfigClockSource+0x8c>
 8003ad4:	2b70      	cmp	r3, #112	; 0x70
 8003ad6:	d804      	bhi.n	8003ae2 <HAL_TIM_ConfigClockSource+0x7e>
 8003ad8:	2b50      	cmp	r3, #80	; 0x50
 8003ada:	d033      	beq.n	8003b44 <HAL_TIM_ConfigClockSource+0xe0>
 8003adc:	2b60      	cmp	r3, #96	; 0x60
 8003ade:	d041      	beq.n	8003b64 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ae0:	e06a      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae6:	d066      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x152>
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aec:	d017      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003aee:	e063      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	6899      	ldr	r1, [r3, #8]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f000 fac9 	bl	8004096 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	609a      	str	r2, [r3, #8]
      break;
 8003b1c:	e04c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6899      	ldr	r1, [r3, #8]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f000 fab2 	bl	8004096 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b40:	609a      	str	r2, [r3, #8]
      break;
 8003b42:	e039      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	6859      	ldr	r1, [r3, #4]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	461a      	mov	r2, r3
 8003b52:	f000 fa29 	bl	8003fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2150      	movs	r1, #80	; 0x50
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fa80 	bl	8004062 <TIM_ITRx_SetConfig>
      break;
 8003b62:	e029      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	461a      	mov	r2, r3
 8003b72:	f000 fa47 	bl	8004004 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2160      	movs	r1, #96	; 0x60
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fa70 	bl	8004062 <TIM_ITRx_SetConfig>
      break;
 8003b82:	e019      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	461a      	mov	r2, r3
 8003b92:	f000 fa09 	bl	8003fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2140      	movs	r1, #64	; 0x40
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fa60 	bl	8004062 <TIM_ITRx_SetConfig>
      break;
 8003ba2:	e009      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f000 fa57 	bl	8004062 <TIM_ITRx_SetConfig>
      break;
 8003bb4:	e000      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a29      	ldr	r2, [pc, #164]	; (8003c8c <TIM_Base_SetConfig+0xb8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00b      	beq.n	8003c04 <TIM_Base_SetConfig+0x30>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d007      	beq.n	8003c04 <TIM_Base_SetConfig+0x30>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <TIM_Base_SetConfig+0xbc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <TIM_Base_SetConfig+0x30>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a25      	ldr	r2, [pc, #148]	; (8003c94 <TIM_Base_SetConfig+0xc0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d108      	bne.n	8003c16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <TIM_Base_SetConfig+0xb8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00b      	beq.n	8003c36 <TIM_Base_SetConfig+0x62>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c24:	d007      	beq.n	8003c36 <TIM_Base_SetConfig+0x62>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a19      	ldr	r2, [pc, #100]	; (8003c90 <TIM_Base_SetConfig+0xbc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d003      	beq.n	8003c36 <TIM_Base_SetConfig+0x62>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <TIM_Base_SetConfig+0xc0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d108      	bne.n	8003c48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a07      	ldr	r2, [pc, #28]	; (8003c8c <TIM_Base_SetConfig+0xb8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d103      	bne.n	8003c7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	615a      	str	r2, [r3, #20]
}
 8003c82:	bf00      	nop
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800

08003c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f023 0201 	bic.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0303 	bic.w	r3, r3, #3
 8003cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f023 0302 	bic.w	r3, r3, #2
 8003ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <TIM_OC1_SetConfig+0xc8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d10c      	bne.n	8003d0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f023 0308 	bic.w	r3, r3, #8
 8003cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f023 0304 	bic.w	r3, r3, #4
 8003d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <TIM_OC1_SetConfig+0xc8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d111      	bne.n	8003d3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40012c00 	.word	0x40012c00

08003d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f023 0210 	bic.w	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 0320 	bic.w	r3, r3, #32
 8003dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <TIM_OC2_SetConfig+0xd0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d10d      	bne.n	8003de0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a14      	ldr	r2, [pc, #80]	; (8003e34 <TIM_OC2_SetConfig+0xd0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d113      	bne.n	8003e10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr
 8003e34:	40012c00 	.word	0x40012c00

08003e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0303 	bic.w	r3, r3, #3
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <TIM_OC3_SetConfig+0xd0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d10d      	bne.n	8003eb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <TIM_OC3_SetConfig+0xd0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d113      	bne.n	8003ee2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	621a      	str	r2, [r3, #32]
}
 8003efc:	bf00      	nop
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40012c00 	.word	0x40012c00

08003f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	021b      	lsls	r3, r3, #8
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	031b      	lsls	r3, r3, #12
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a0f      	ldr	r2, [pc, #60]	; (8003fa4 <TIM_OC4_SetConfig+0x98>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d109      	bne.n	8003f80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	019b      	lsls	r3, r3, #6
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	621a      	str	r2, [r3, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	40012c00 	.word	0x40012c00

08003fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f023 0201 	bic.w	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 030a 	bic.w	r3, r3, #10
 8003fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f023 0210 	bic.w	r2, r3, #16
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800402e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	031b      	lsls	r3, r3, #12
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004040:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	621a      	str	r2, [r3, #32]
}
 8004058:	bf00      	nop
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	f043 0307 	orr.w	r3, r3, #7
 8004084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	609a      	str	r2, [r3, #8]
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr

08004096 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004096:	b480      	push	{r7}
 8004098:	b087      	sub	sp, #28
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
 80040a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	021a      	lsls	r2, r3, #8
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4313      	orrs	r3, r2
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	609a      	str	r2, [r3, #8]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	2201      	movs	r2, #1
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a1a      	ldr	r2, [r3, #32]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	401a      	ands	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a1a      	ldr	r2, [r3, #32]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	fa01 f303 	lsl.w	r3, r1, r3
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	621a      	str	r2, [r3, #32]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004130:	2302      	movs	r3, #2
 8004132:	e032      	b.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800416c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	4313      	orrs	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr

080041a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e03f      	b.n	8004236 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fd ff1c 	bl	8002008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2224      	movs	r2, #36	; 0x24
 80041d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f90b 	bl	8004404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695a      	ldr	r2, [r3, #20]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800420c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800421c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b088      	sub	sp, #32
 8004242:	af02      	add	r7, sp, #8
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b20      	cmp	r3, #32
 800425c:	f040 8083 	bne.w	8004366 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_UART_Transmit+0x2e>
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e07b      	b.n	8004368 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_UART_Transmit+0x40>
 800427a:	2302      	movs	r3, #2
 800427c:	e074      	b.n	8004368 <HAL_UART_Transmit+0x12a>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2221      	movs	r2, #33	; 0x21
 8004290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004294:	f7fd ff82 	bl	800219c <HAL_GetTick>
 8004298:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042a6:	e042      	b.n	800432e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042be:	d122      	bne.n	8004306 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2200      	movs	r2, #0
 80042c8:	2180      	movs	r1, #128	; 0x80
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f850 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e046      	b.n	8004368 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042ec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d103      	bne.n	80042fe <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	3302      	adds	r3, #2
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	e017      	b.n	800432e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	3301      	adds	r3, #1
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	e013      	b.n	800432e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2200      	movs	r2, #0
 800430e:	2180      	movs	r1, #128	; 0x80
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f82d 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e023      	b.n	8004368 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	60ba      	str	r2, [r7, #8]
 8004326:	781a      	ldrb	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1b7      	bne.n	80042a8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2200      	movs	r2, #0
 8004340:	2140      	movs	r1, #64	; 0x40
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f814 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e00a      	b.n	8004368 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004380:	e02c      	b.n	80043dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d028      	beq.n	80043dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004390:	f7fd ff04 	bl	800219c <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	429a      	cmp	r2, r3
 800439e:	d21d      	bcs.n	80043dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e00f      	b.n	80043fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d0c3      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800443e:	f023 030c 	bic.w	r3, r3, #12
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6812      	ldr	r2, [r2, #0]
 8004446:	68f9      	ldr	r1, [r7, #12]
 8004448:	430b      	orrs	r3, r1
 800444a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a52      	ldr	r2, [pc, #328]	; (80045b0 <UART_SetConfig+0x1ac>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d14e      	bne.n	800450a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800446c:	f7fe fd66 	bl	8002f3c <HAL_RCC_GetPCLK2Freq>
 8004470:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	009a      	lsls	r2, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	4a4a      	ldr	r2, [pc, #296]	; (80045b4 <UART_SetConfig+0x1b0>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	0119      	lsls	r1, r3, #4
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009a      	lsls	r2, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044a8:	4b42      	ldr	r3, [pc, #264]	; (80045b4 <UART_SetConfig+0x1b0>)
 80044aa:	fba3 0302 	umull	r0, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2064      	movs	r0, #100	; 0x64
 80044b2:	fb00 f303 	mul.w	r3, r0, r3
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	3332      	adds	r3, #50	; 0x32
 80044bc:	4a3d      	ldr	r2, [pc, #244]	; (80045b4 <UART_SetConfig+0x1b0>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c8:	4419      	add	r1, r3
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009a      	lsls	r2, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e0:	4b34      	ldr	r3, [pc, #208]	; (80045b4 <UART_SetConfig+0x1b0>)
 80044e2:	fba3 0302 	umull	r0, r3, r3, r2
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2064      	movs	r0, #100	; 0x64
 80044ea:	fb00 f303 	mul.w	r3, r0, r3
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	3332      	adds	r3, #50	; 0x32
 80044f4:	4a2f      	ldr	r2, [pc, #188]	; (80045b4 <UART_SetConfig+0x1b0>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	f003 020f 	and.w	r2, r3, #15
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	440a      	add	r2, r1
 8004506:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004508:	e04d      	b.n	80045a6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800450a:	f7fe fd03 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 800450e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009a      	lsls	r2, r3, #2
 800451a:	441a      	add	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	4a23      	ldr	r2, [pc, #140]	; (80045b4 <UART_SetConfig+0x1b0>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	0119      	lsls	r1, r3, #4
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009a      	lsls	r2, r3, #2
 800453a:	441a      	add	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	fbb2 f2f3 	udiv	r2, r2, r3
 8004546:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <UART_SetConfig+0x1b0>)
 8004548:	fba3 0302 	umull	r0, r3, r3, r2
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	2064      	movs	r0, #100	; 0x64
 8004550:	fb00 f303 	mul.w	r3, r0, r3
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	3332      	adds	r3, #50	; 0x32
 800455a:	4a16      	ldr	r2, [pc, #88]	; (80045b4 <UART_SetConfig+0x1b0>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004566:	4419      	add	r1, r3
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009a      	lsls	r2, r3, #2
 8004572:	441a      	add	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	fbb2 f2f3 	udiv	r2, r2, r3
 800457e:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <UART_SetConfig+0x1b0>)
 8004580:	fba3 0302 	umull	r0, r3, r3, r2
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	2064      	movs	r0, #100	; 0x64
 8004588:	fb00 f303 	mul.w	r3, r0, r3
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	3332      	adds	r3, #50	; 0x32
 8004592:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <UART_SetConfig+0x1b0>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	f003 020f 	and.w	r2, r3, #15
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	440a      	add	r2, r1
 80045a4:	609a      	str	r2, [r3, #8]
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40013800 	.word	0x40013800
 80045b4:	51eb851f 	.word	0x51eb851f

080045b8 <__errno>:
 80045b8:	4b01      	ldr	r3, [pc, #4]	; (80045c0 <__errno+0x8>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000010 	.word	0x20000010

080045c4 <__libc_init_array>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	2500      	movs	r5, #0
 80045c8:	4e0c      	ldr	r6, [pc, #48]	; (80045fc <__libc_init_array+0x38>)
 80045ca:	4c0d      	ldr	r4, [pc, #52]	; (8004600 <__libc_init_array+0x3c>)
 80045cc:	1ba4      	subs	r4, r4, r6
 80045ce:	10a4      	asrs	r4, r4, #2
 80045d0:	42a5      	cmp	r5, r4
 80045d2:	d109      	bne.n	80045e8 <__libc_init_array+0x24>
 80045d4:	f000 fcb8 	bl	8004f48 <_init>
 80045d8:	2500      	movs	r5, #0
 80045da:	4e0a      	ldr	r6, [pc, #40]	; (8004604 <__libc_init_array+0x40>)
 80045dc:	4c0a      	ldr	r4, [pc, #40]	; (8004608 <__libc_init_array+0x44>)
 80045de:	1ba4      	subs	r4, r4, r6
 80045e0:	10a4      	asrs	r4, r4, #2
 80045e2:	42a5      	cmp	r5, r4
 80045e4:	d105      	bne.n	80045f2 <__libc_init_array+0x2e>
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045ec:	4798      	blx	r3
 80045ee:	3501      	adds	r5, #1
 80045f0:	e7ee      	b.n	80045d0 <__libc_init_array+0xc>
 80045f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045f6:	4798      	blx	r3
 80045f8:	3501      	adds	r5, #1
 80045fa:	e7f2      	b.n	80045e2 <__libc_init_array+0x1e>
 80045fc:	08004ff8 	.word	0x08004ff8
 8004600:	08004ff8 	.word	0x08004ff8
 8004604:	08004ff8 	.word	0x08004ff8
 8004608:	08004ffc 	.word	0x08004ffc

0800460c <memcpy>:
 800460c:	b510      	push	{r4, lr}
 800460e:	1e43      	subs	r3, r0, #1
 8004610:	440a      	add	r2, r1
 8004612:	4291      	cmp	r1, r2
 8004614:	d100      	bne.n	8004618 <memcpy+0xc>
 8004616:	bd10      	pop	{r4, pc}
 8004618:	f811 4b01 	ldrb.w	r4, [r1], #1
 800461c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004620:	e7f7      	b.n	8004612 <memcpy+0x6>

08004622 <memset>:
 8004622:	4603      	mov	r3, r0
 8004624:	4402      	add	r2, r0
 8004626:	4293      	cmp	r3, r2
 8004628:	d100      	bne.n	800462c <memset+0xa>
 800462a:	4770      	bx	lr
 800462c:	f803 1b01 	strb.w	r1, [r3], #1
 8004630:	e7f9      	b.n	8004626 <memset+0x4>
	...

08004634 <siprintf>:
 8004634:	b40e      	push	{r1, r2, r3}
 8004636:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800463a:	b500      	push	{lr}
 800463c:	b09c      	sub	sp, #112	; 0x70
 800463e:	ab1d      	add	r3, sp, #116	; 0x74
 8004640:	9002      	str	r0, [sp, #8]
 8004642:	9006      	str	r0, [sp, #24]
 8004644:	9107      	str	r1, [sp, #28]
 8004646:	9104      	str	r1, [sp, #16]
 8004648:	4808      	ldr	r0, [pc, #32]	; (800466c <siprintf+0x38>)
 800464a:	4909      	ldr	r1, [pc, #36]	; (8004670 <siprintf+0x3c>)
 800464c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004650:	9105      	str	r1, [sp, #20]
 8004652:	6800      	ldr	r0, [r0, #0]
 8004654:	a902      	add	r1, sp, #8
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	f000 f866 	bl	8004728 <_svfiprintf_r>
 800465c:	2200      	movs	r2, #0
 800465e:	9b02      	ldr	r3, [sp, #8]
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	b01c      	add	sp, #112	; 0x70
 8004664:	f85d eb04 	ldr.w	lr, [sp], #4
 8004668:	b003      	add	sp, #12
 800466a:	4770      	bx	lr
 800466c:	20000010 	.word	0x20000010
 8004670:	ffff0208 	.word	0xffff0208

08004674 <__ssputs_r>:
 8004674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004678:	688e      	ldr	r6, [r1, #8]
 800467a:	4682      	mov	sl, r0
 800467c:	429e      	cmp	r6, r3
 800467e:	460c      	mov	r4, r1
 8004680:	4690      	mov	r8, r2
 8004682:	4699      	mov	r9, r3
 8004684:	d837      	bhi.n	80046f6 <__ssputs_r+0x82>
 8004686:	898a      	ldrh	r2, [r1, #12]
 8004688:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800468c:	d031      	beq.n	80046f2 <__ssputs_r+0x7e>
 800468e:	2302      	movs	r3, #2
 8004690:	6825      	ldr	r5, [r4, #0]
 8004692:	6909      	ldr	r1, [r1, #16]
 8004694:	1a6f      	subs	r7, r5, r1
 8004696:	6965      	ldr	r5, [r4, #20]
 8004698:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800469c:	fb95 f5f3 	sdiv	r5, r5, r3
 80046a0:	f109 0301 	add.w	r3, r9, #1
 80046a4:	443b      	add	r3, r7
 80046a6:	429d      	cmp	r5, r3
 80046a8:	bf38      	it	cc
 80046aa:	461d      	movcc	r5, r3
 80046ac:	0553      	lsls	r3, r2, #21
 80046ae:	d530      	bpl.n	8004712 <__ssputs_r+0x9e>
 80046b0:	4629      	mov	r1, r5
 80046b2:	f000 fb2d 	bl	8004d10 <_malloc_r>
 80046b6:	4606      	mov	r6, r0
 80046b8:	b950      	cbnz	r0, 80046d0 <__ssputs_r+0x5c>
 80046ba:	230c      	movs	r3, #12
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	f8ca 3000 	str.w	r3, [sl]
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ca:	81a3      	strh	r3, [r4, #12]
 80046cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d0:	463a      	mov	r2, r7
 80046d2:	6921      	ldr	r1, [r4, #16]
 80046d4:	f7ff ff9a 	bl	800460c <memcpy>
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e2:	81a3      	strh	r3, [r4, #12]
 80046e4:	6126      	str	r6, [r4, #16]
 80046e6:	443e      	add	r6, r7
 80046e8:	6026      	str	r6, [r4, #0]
 80046ea:	464e      	mov	r6, r9
 80046ec:	6165      	str	r5, [r4, #20]
 80046ee:	1bed      	subs	r5, r5, r7
 80046f0:	60a5      	str	r5, [r4, #8]
 80046f2:	454e      	cmp	r6, r9
 80046f4:	d900      	bls.n	80046f8 <__ssputs_r+0x84>
 80046f6:	464e      	mov	r6, r9
 80046f8:	4632      	mov	r2, r6
 80046fa:	4641      	mov	r1, r8
 80046fc:	6820      	ldr	r0, [r4, #0]
 80046fe:	f000 faa1 	bl	8004c44 <memmove>
 8004702:	68a3      	ldr	r3, [r4, #8]
 8004704:	2000      	movs	r0, #0
 8004706:	1b9b      	subs	r3, r3, r6
 8004708:	60a3      	str	r3, [r4, #8]
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	441e      	add	r6, r3
 800470e:	6026      	str	r6, [r4, #0]
 8004710:	e7dc      	b.n	80046cc <__ssputs_r+0x58>
 8004712:	462a      	mov	r2, r5
 8004714:	f000 fb56 	bl	8004dc4 <_realloc_r>
 8004718:	4606      	mov	r6, r0
 800471a:	2800      	cmp	r0, #0
 800471c:	d1e2      	bne.n	80046e4 <__ssputs_r+0x70>
 800471e:	6921      	ldr	r1, [r4, #16]
 8004720:	4650      	mov	r0, sl
 8004722:	f000 faa9 	bl	8004c78 <_free_r>
 8004726:	e7c8      	b.n	80046ba <__ssputs_r+0x46>

08004728 <_svfiprintf_r>:
 8004728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472c:	461d      	mov	r5, r3
 800472e:	898b      	ldrh	r3, [r1, #12]
 8004730:	b09d      	sub	sp, #116	; 0x74
 8004732:	061f      	lsls	r7, r3, #24
 8004734:	4680      	mov	r8, r0
 8004736:	460c      	mov	r4, r1
 8004738:	4616      	mov	r6, r2
 800473a:	d50f      	bpl.n	800475c <_svfiprintf_r+0x34>
 800473c:	690b      	ldr	r3, [r1, #16]
 800473e:	b96b      	cbnz	r3, 800475c <_svfiprintf_r+0x34>
 8004740:	2140      	movs	r1, #64	; 0x40
 8004742:	f000 fae5 	bl	8004d10 <_malloc_r>
 8004746:	6020      	str	r0, [r4, #0]
 8004748:	6120      	str	r0, [r4, #16]
 800474a:	b928      	cbnz	r0, 8004758 <_svfiprintf_r+0x30>
 800474c:	230c      	movs	r3, #12
 800474e:	f8c8 3000 	str.w	r3, [r8]
 8004752:	f04f 30ff 	mov.w	r0, #4294967295
 8004756:	e0c8      	b.n	80048ea <_svfiprintf_r+0x1c2>
 8004758:	2340      	movs	r3, #64	; 0x40
 800475a:	6163      	str	r3, [r4, #20]
 800475c:	2300      	movs	r3, #0
 800475e:	9309      	str	r3, [sp, #36]	; 0x24
 8004760:	2320      	movs	r3, #32
 8004762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004766:	2330      	movs	r3, #48	; 0x30
 8004768:	f04f 0b01 	mov.w	fp, #1
 800476c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004770:	9503      	str	r5, [sp, #12]
 8004772:	4637      	mov	r7, r6
 8004774:	463d      	mov	r5, r7
 8004776:	f815 3b01 	ldrb.w	r3, [r5], #1
 800477a:	b10b      	cbz	r3, 8004780 <_svfiprintf_r+0x58>
 800477c:	2b25      	cmp	r3, #37	; 0x25
 800477e:	d13e      	bne.n	80047fe <_svfiprintf_r+0xd6>
 8004780:	ebb7 0a06 	subs.w	sl, r7, r6
 8004784:	d00b      	beq.n	800479e <_svfiprintf_r+0x76>
 8004786:	4653      	mov	r3, sl
 8004788:	4632      	mov	r2, r6
 800478a:	4621      	mov	r1, r4
 800478c:	4640      	mov	r0, r8
 800478e:	f7ff ff71 	bl	8004674 <__ssputs_r>
 8004792:	3001      	adds	r0, #1
 8004794:	f000 80a4 	beq.w	80048e0 <_svfiprintf_r+0x1b8>
 8004798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800479a:	4453      	add	r3, sl
 800479c:	9309      	str	r3, [sp, #36]	; 0x24
 800479e:	783b      	ldrb	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 809d 	beq.w	80048e0 <_svfiprintf_r+0x1b8>
 80047a6:	2300      	movs	r3, #0
 80047a8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047b0:	9304      	str	r3, [sp, #16]
 80047b2:	9307      	str	r3, [sp, #28]
 80047b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047b8:	931a      	str	r3, [sp, #104]	; 0x68
 80047ba:	462f      	mov	r7, r5
 80047bc:	2205      	movs	r2, #5
 80047be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80047c2:	4850      	ldr	r0, [pc, #320]	; (8004904 <_svfiprintf_r+0x1dc>)
 80047c4:	f000 fa30 	bl	8004c28 <memchr>
 80047c8:	9b04      	ldr	r3, [sp, #16]
 80047ca:	b9d0      	cbnz	r0, 8004802 <_svfiprintf_r+0xda>
 80047cc:	06d9      	lsls	r1, r3, #27
 80047ce:	bf44      	itt	mi
 80047d0:	2220      	movmi	r2, #32
 80047d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80047d6:	071a      	lsls	r2, r3, #28
 80047d8:	bf44      	itt	mi
 80047da:	222b      	movmi	r2, #43	; 0x2b
 80047dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80047e0:	782a      	ldrb	r2, [r5, #0]
 80047e2:	2a2a      	cmp	r2, #42	; 0x2a
 80047e4:	d015      	beq.n	8004812 <_svfiprintf_r+0xea>
 80047e6:	462f      	mov	r7, r5
 80047e8:	2000      	movs	r0, #0
 80047ea:	250a      	movs	r5, #10
 80047ec:	9a07      	ldr	r2, [sp, #28]
 80047ee:	4639      	mov	r1, r7
 80047f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047f4:	3b30      	subs	r3, #48	; 0x30
 80047f6:	2b09      	cmp	r3, #9
 80047f8:	d94d      	bls.n	8004896 <_svfiprintf_r+0x16e>
 80047fa:	b1b8      	cbz	r0, 800482c <_svfiprintf_r+0x104>
 80047fc:	e00f      	b.n	800481e <_svfiprintf_r+0xf6>
 80047fe:	462f      	mov	r7, r5
 8004800:	e7b8      	b.n	8004774 <_svfiprintf_r+0x4c>
 8004802:	4a40      	ldr	r2, [pc, #256]	; (8004904 <_svfiprintf_r+0x1dc>)
 8004804:	463d      	mov	r5, r7
 8004806:	1a80      	subs	r0, r0, r2
 8004808:	fa0b f000 	lsl.w	r0, fp, r0
 800480c:	4318      	orrs	r0, r3
 800480e:	9004      	str	r0, [sp, #16]
 8004810:	e7d3      	b.n	80047ba <_svfiprintf_r+0x92>
 8004812:	9a03      	ldr	r2, [sp, #12]
 8004814:	1d11      	adds	r1, r2, #4
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	9103      	str	r1, [sp, #12]
 800481a:	2a00      	cmp	r2, #0
 800481c:	db01      	blt.n	8004822 <_svfiprintf_r+0xfa>
 800481e:	9207      	str	r2, [sp, #28]
 8004820:	e004      	b.n	800482c <_svfiprintf_r+0x104>
 8004822:	4252      	negs	r2, r2
 8004824:	f043 0302 	orr.w	r3, r3, #2
 8004828:	9207      	str	r2, [sp, #28]
 800482a:	9304      	str	r3, [sp, #16]
 800482c:	783b      	ldrb	r3, [r7, #0]
 800482e:	2b2e      	cmp	r3, #46	; 0x2e
 8004830:	d10c      	bne.n	800484c <_svfiprintf_r+0x124>
 8004832:	787b      	ldrb	r3, [r7, #1]
 8004834:	2b2a      	cmp	r3, #42	; 0x2a
 8004836:	d133      	bne.n	80048a0 <_svfiprintf_r+0x178>
 8004838:	9b03      	ldr	r3, [sp, #12]
 800483a:	3702      	adds	r7, #2
 800483c:	1d1a      	adds	r2, r3, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	9203      	str	r2, [sp, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfb8      	it	lt
 8004846:	f04f 33ff 	movlt.w	r3, #4294967295
 800484a:	9305      	str	r3, [sp, #20]
 800484c:	4d2e      	ldr	r5, [pc, #184]	; (8004908 <_svfiprintf_r+0x1e0>)
 800484e:	2203      	movs	r2, #3
 8004850:	7839      	ldrb	r1, [r7, #0]
 8004852:	4628      	mov	r0, r5
 8004854:	f000 f9e8 	bl	8004c28 <memchr>
 8004858:	b138      	cbz	r0, 800486a <_svfiprintf_r+0x142>
 800485a:	2340      	movs	r3, #64	; 0x40
 800485c:	1b40      	subs	r0, r0, r5
 800485e:	fa03 f000 	lsl.w	r0, r3, r0
 8004862:	9b04      	ldr	r3, [sp, #16]
 8004864:	3701      	adds	r7, #1
 8004866:	4303      	orrs	r3, r0
 8004868:	9304      	str	r3, [sp, #16]
 800486a:	7839      	ldrb	r1, [r7, #0]
 800486c:	2206      	movs	r2, #6
 800486e:	4827      	ldr	r0, [pc, #156]	; (800490c <_svfiprintf_r+0x1e4>)
 8004870:	1c7e      	adds	r6, r7, #1
 8004872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004876:	f000 f9d7 	bl	8004c28 <memchr>
 800487a:	2800      	cmp	r0, #0
 800487c:	d038      	beq.n	80048f0 <_svfiprintf_r+0x1c8>
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <_svfiprintf_r+0x1e8>)
 8004880:	bb13      	cbnz	r3, 80048c8 <_svfiprintf_r+0x1a0>
 8004882:	9b03      	ldr	r3, [sp, #12]
 8004884:	3307      	adds	r3, #7
 8004886:	f023 0307 	bic.w	r3, r3, #7
 800488a:	3308      	adds	r3, #8
 800488c:	9303      	str	r3, [sp, #12]
 800488e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004890:	444b      	add	r3, r9
 8004892:	9309      	str	r3, [sp, #36]	; 0x24
 8004894:	e76d      	b.n	8004772 <_svfiprintf_r+0x4a>
 8004896:	fb05 3202 	mla	r2, r5, r2, r3
 800489a:	2001      	movs	r0, #1
 800489c:	460f      	mov	r7, r1
 800489e:	e7a6      	b.n	80047ee <_svfiprintf_r+0xc6>
 80048a0:	2300      	movs	r3, #0
 80048a2:	250a      	movs	r5, #10
 80048a4:	4619      	mov	r1, r3
 80048a6:	3701      	adds	r7, #1
 80048a8:	9305      	str	r3, [sp, #20]
 80048aa:	4638      	mov	r0, r7
 80048ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048b0:	3a30      	subs	r2, #48	; 0x30
 80048b2:	2a09      	cmp	r2, #9
 80048b4:	d903      	bls.n	80048be <_svfiprintf_r+0x196>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0c8      	beq.n	800484c <_svfiprintf_r+0x124>
 80048ba:	9105      	str	r1, [sp, #20]
 80048bc:	e7c6      	b.n	800484c <_svfiprintf_r+0x124>
 80048be:	fb05 2101 	mla	r1, r5, r1, r2
 80048c2:	2301      	movs	r3, #1
 80048c4:	4607      	mov	r7, r0
 80048c6:	e7f0      	b.n	80048aa <_svfiprintf_r+0x182>
 80048c8:	ab03      	add	r3, sp, #12
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	4622      	mov	r2, r4
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <_svfiprintf_r+0x1ec>)
 80048d0:	a904      	add	r1, sp, #16
 80048d2:	4640      	mov	r0, r8
 80048d4:	f3af 8000 	nop.w
 80048d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80048dc:	4681      	mov	r9, r0
 80048de:	d1d6      	bne.n	800488e <_svfiprintf_r+0x166>
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	065b      	lsls	r3, r3, #25
 80048e4:	f53f af35 	bmi.w	8004752 <_svfiprintf_r+0x2a>
 80048e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048ea:	b01d      	add	sp, #116	; 0x74
 80048ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f0:	ab03      	add	r3, sp, #12
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	4622      	mov	r2, r4
 80048f6:	4b07      	ldr	r3, [pc, #28]	; (8004914 <_svfiprintf_r+0x1ec>)
 80048f8:	a904      	add	r1, sp, #16
 80048fa:	4640      	mov	r0, r8
 80048fc:	f000 f882 	bl	8004a04 <_printf_i>
 8004900:	e7ea      	b.n	80048d8 <_svfiprintf_r+0x1b0>
 8004902:	bf00      	nop
 8004904:	08004fc4 	.word	0x08004fc4
 8004908:	08004fca 	.word	0x08004fca
 800490c:	08004fce 	.word	0x08004fce
 8004910:	00000000 	.word	0x00000000
 8004914:	08004675 	.word	0x08004675

08004918 <_printf_common>:
 8004918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800491c:	4691      	mov	r9, r2
 800491e:	461f      	mov	r7, r3
 8004920:	688a      	ldr	r2, [r1, #8]
 8004922:	690b      	ldr	r3, [r1, #16]
 8004924:	4606      	mov	r6, r0
 8004926:	4293      	cmp	r3, r2
 8004928:	bfb8      	it	lt
 800492a:	4613      	movlt	r3, r2
 800492c:	f8c9 3000 	str.w	r3, [r9]
 8004930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004934:	460c      	mov	r4, r1
 8004936:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800493a:	b112      	cbz	r2, 8004942 <_printf_common+0x2a>
 800493c:	3301      	adds	r3, #1
 800493e:	f8c9 3000 	str.w	r3, [r9]
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	0699      	lsls	r1, r3, #26
 8004946:	bf42      	ittt	mi
 8004948:	f8d9 3000 	ldrmi.w	r3, [r9]
 800494c:	3302      	addmi	r3, #2
 800494e:	f8c9 3000 	strmi.w	r3, [r9]
 8004952:	6825      	ldr	r5, [r4, #0]
 8004954:	f015 0506 	ands.w	r5, r5, #6
 8004958:	d107      	bne.n	800496a <_printf_common+0x52>
 800495a:	f104 0a19 	add.w	sl, r4, #25
 800495e:	68e3      	ldr	r3, [r4, #12]
 8004960:	f8d9 2000 	ldr.w	r2, [r9]
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	42ab      	cmp	r3, r5
 8004968:	dc29      	bgt.n	80049be <_printf_common+0xa6>
 800496a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800496e:	6822      	ldr	r2, [r4, #0]
 8004970:	3300      	adds	r3, #0
 8004972:	bf18      	it	ne
 8004974:	2301      	movne	r3, #1
 8004976:	0692      	lsls	r2, r2, #26
 8004978:	d42e      	bmi.n	80049d8 <_printf_common+0xc0>
 800497a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800497e:	4639      	mov	r1, r7
 8004980:	4630      	mov	r0, r6
 8004982:	47c0      	blx	r8
 8004984:	3001      	adds	r0, #1
 8004986:	d021      	beq.n	80049cc <_printf_common+0xb4>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	68e5      	ldr	r5, [r4, #12]
 800498c:	f003 0306 	and.w	r3, r3, #6
 8004990:	2b04      	cmp	r3, #4
 8004992:	bf18      	it	ne
 8004994:	2500      	movne	r5, #0
 8004996:	f8d9 2000 	ldr.w	r2, [r9]
 800499a:	f04f 0900 	mov.w	r9, #0
 800499e:	bf08      	it	eq
 80049a0:	1aad      	subeq	r5, r5, r2
 80049a2:	68a3      	ldr	r3, [r4, #8]
 80049a4:	6922      	ldr	r2, [r4, #16]
 80049a6:	bf08      	it	eq
 80049a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049ac:	4293      	cmp	r3, r2
 80049ae:	bfc4      	itt	gt
 80049b0:	1a9b      	subgt	r3, r3, r2
 80049b2:	18ed      	addgt	r5, r5, r3
 80049b4:	341a      	adds	r4, #26
 80049b6:	454d      	cmp	r5, r9
 80049b8:	d11a      	bne.n	80049f0 <_printf_common+0xd8>
 80049ba:	2000      	movs	r0, #0
 80049bc:	e008      	b.n	80049d0 <_printf_common+0xb8>
 80049be:	2301      	movs	r3, #1
 80049c0:	4652      	mov	r2, sl
 80049c2:	4639      	mov	r1, r7
 80049c4:	4630      	mov	r0, r6
 80049c6:	47c0      	blx	r8
 80049c8:	3001      	adds	r0, #1
 80049ca:	d103      	bne.n	80049d4 <_printf_common+0xbc>
 80049cc:	f04f 30ff 	mov.w	r0, #4294967295
 80049d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d4:	3501      	adds	r5, #1
 80049d6:	e7c2      	b.n	800495e <_printf_common+0x46>
 80049d8:	2030      	movs	r0, #48	; 0x30
 80049da:	18e1      	adds	r1, r4, r3
 80049dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049e6:	4422      	add	r2, r4
 80049e8:	3302      	adds	r3, #2
 80049ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049ee:	e7c4      	b.n	800497a <_printf_common+0x62>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4622      	mov	r2, r4
 80049f4:	4639      	mov	r1, r7
 80049f6:	4630      	mov	r0, r6
 80049f8:	47c0      	blx	r8
 80049fa:	3001      	adds	r0, #1
 80049fc:	d0e6      	beq.n	80049cc <_printf_common+0xb4>
 80049fe:	f109 0901 	add.w	r9, r9, #1
 8004a02:	e7d8      	b.n	80049b6 <_printf_common+0x9e>

08004a04 <_printf_i>:
 8004a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004a0c:	460c      	mov	r4, r1
 8004a0e:	7e09      	ldrb	r1, [r1, #24]
 8004a10:	b085      	sub	sp, #20
 8004a12:	296e      	cmp	r1, #110	; 0x6e
 8004a14:	4617      	mov	r7, r2
 8004a16:	4606      	mov	r6, r0
 8004a18:	4698      	mov	r8, r3
 8004a1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a1c:	f000 80b3 	beq.w	8004b86 <_printf_i+0x182>
 8004a20:	d822      	bhi.n	8004a68 <_printf_i+0x64>
 8004a22:	2963      	cmp	r1, #99	; 0x63
 8004a24:	d036      	beq.n	8004a94 <_printf_i+0x90>
 8004a26:	d80a      	bhi.n	8004a3e <_printf_i+0x3a>
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	f000 80b9 	beq.w	8004ba0 <_printf_i+0x19c>
 8004a2e:	2958      	cmp	r1, #88	; 0x58
 8004a30:	f000 8083 	beq.w	8004b3a <_printf_i+0x136>
 8004a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004a3c:	e032      	b.n	8004aa4 <_printf_i+0xa0>
 8004a3e:	2964      	cmp	r1, #100	; 0x64
 8004a40:	d001      	beq.n	8004a46 <_printf_i+0x42>
 8004a42:	2969      	cmp	r1, #105	; 0x69
 8004a44:	d1f6      	bne.n	8004a34 <_printf_i+0x30>
 8004a46:	6820      	ldr	r0, [r4, #0]
 8004a48:	6813      	ldr	r3, [r2, #0]
 8004a4a:	0605      	lsls	r5, r0, #24
 8004a4c:	f103 0104 	add.w	r1, r3, #4
 8004a50:	d52a      	bpl.n	8004aa8 <_printf_i+0xa4>
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6011      	str	r1, [r2, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da03      	bge.n	8004a62 <_printf_i+0x5e>
 8004a5a:	222d      	movs	r2, #45	; 0x2d
 8004a5c:	425b      	negs	r3, r3
 8004a5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a62:	486f      	ldr	r0, [pc, #444]	; (8004c20 <_printf_i+0x21c>)
 8004a64:	220a      	movs	r2, #10
 8004a66:	e039      	b.n	8004adc <_printf_i+0xd8>
 8004a68:	2973      	cmp	r1, #115	; 0x73
 8004a6a:	f000 809d 	beq.w	8004ba8 <_printf_i+0x1a4>
 8004a6e:	d808      	bhi.n	8004a82 <_printf_i+0x7e>
 8004a70:	296f      	cmp	r1, #111	; 0x6f
 8004a72:	d020      	beq.n	8004ab6 <_printf_i+0xb2>
 8004a74:	2970      	cmp	r1, #112	; 0x70
 8004a76:	d1dd      	bne.n	8004a34 <_printf_i+0x30>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	f043 0320 	orr.w	r3, r3, #32
 8004a7e:	6023      	str	r3, [r4, #0]
 8004a80:	e003      	b.n	8004a8a <_printf_i+0x86>
 8004a82:	2975      	cmp	r1, #117	; 0x75
 8004a84:	d017      	beq.n	8004ab6 <_printf_i+0xb2>
 8004a86:	2978      	cmp	r1, #120	; 0x78
 8004a88:	d1d4      	bne.n	8004a34 <_printf_i+0x30>
 8004a8a:	2378      	movs	r3, #120	; 0x78
 8004a8c:	4865      	ldr	r0, [pc, #404]	; (8004c24 <_printf_i+0x220>)
 8004a8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a92:	e055      	b.n	8004b40 <_printf_i+0x13c>
 8004a94:	6813      	ldr	r3, [r2, #0]
 8004a96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a9a:	1d19      	adds	r1, r3, #4
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6011      	str	r1, [r2, #0]
 8004aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e08c      	b.n	8004bc2 <_printf_i+0x1be>
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004aae:	6011      	str	r1, [r2, #0]
 8004ab0:	bf18      	it	ne
 8004ab2:	b21b      	sxthne	r3, r3
 8004ab4:	e7cf      	b.n	8004a56 <_printf_i+0x52>
 8004ab6:	6813      	ldr	r3, [r2, #0]
 8004ab8:	6825      	ldr	r5, [r4, #0]
 8004aba:	1d18      	adds	r0, r3, #4
 8004abc:	6010      	str	r0, [r2, #0]
 8004abe:	0628      	lsls	r0, r5, #24
 8004ac0:	d501      	bpl.n	8004ac6 <_printf_i+0xc2>
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	e002      	b.n	8004acc <_printf_i+0xc8>
 8004ac6:	0668      	lsls	r0, r5, #25
 8004ac8:	d5fb      	bpl.n	8004ac2 <_printf_i+0xbe>
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	296f      	cmp	r1, #111	; 0x6f
 8004ace:	bf14      	ite	ne
 8004ad0:	220a      	movne	r2, #10
 8004ad2:	2208      	moveq	r2, #8
 8004ad4:	4852      	ldr	r0, [pc, #328]	; (8004c20 <_printf_i+0x21c>)
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004adc:	6865      	ldr	r5, [r4, #4]
 8004ade:	2d00      	cmp	r5, #0
 8004ae0:	60a5      	str	r5, [r4, #8]
 8004ae2:	f2c0 8095 	blt.w	8004c10 <_printf_i+0x20c>
 8004ae6:	6821      	ldr	r1, [r4, #0]
 8004ae8:	f021 0104 	bic.w	r1, r1, #4
 8004aec:	6021      	str	r1, [r4, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d13d      	bne.n	8004b6e <_printf_i+0x16a>
 8004af2:	2d00      	cmp	r5, #0
 8004af4:	f040 808e 	bne.w	8004c14 <_printf_i+0x210>
 8004af8:	4665      	mov	r5, ip
 8004afa:	2a08      	cmp	r2, #8
 8004afc:	d10b      	bne.n	8004b16 <_printf_i+0x112>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	07db      	lsls	r3, r3, #31
 8004b02:	d508      	bpl.n	8004b16 <_printf_i+0x112>
 8004b04:	6923      	ldr	r3, [r4, #16]
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	bfde      	ittt	le
 8004b0c:	2330      	movle	r3, #48	; 0x30
 8004b0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b16:	ebac 0305 	sub.w	r3, ip, r5
 8004b1a:	6123      	str	r3, [r4, #16]
 8004b1c:	f8cd 8000 	str.w	r8, [sp]
 8004b20:	463b      	mov	r3, r7
 8004b22:	aa03      	add	r2, sp, #12
 8004b24:	4621      	mov	r1, r4
 8004b26:	4630      	mov	r0, r6
 8004b28:	f7ff fef6 	bl	8004918 <_printf_common>
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d14d      	bne.n	8004bcc <_printf_i+0x1c8>
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295
 8004b34:	b005      	add	sp, #20
 8004b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b3a:	4839      	ldr	r0, [pc, #228]	; (8004c20 <_printf_i+0x21c>)
 8004b3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004b40:	6813      	ldr	r3, [r2, #0]
 8004b42:	6821      	ldr	r1, [r4, #0]
 8004b44:	1d1d      	adds	r5, r3, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6015      	str	r5, [r2, #0]
 8004b4a:	060a      	lsls	r2, r1, #24
 8004b4c:	d50b      	bpl.n	8004b66 <_printf_i+0x162>
 8004b4e:	07ca      	lsls	r2, r1, #31
 8004b50:	bf44      	itt	mi
 8004b52:	f041 0120 	orrmi.w	r1, r1, #32
 8004b56:	6021      	strmi	r1, [r4, #0]
 8004b58:	b91b      	cbnz	r3, 8004b62 <_printf_i+0x15e>
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	f022 0220 	bic.w	r2, r2, #32
 8004b60:	6022      	str	r2, [r4, #0]
 8004b62:	2210      	movs	r2, #16
 8004b64:	e7b7      	b.n	8004ad6 <_printf_i+0xd2>
 8004b66:	064d      	lsls	r5, r1, #25
 8004b68:	bf48      	it	mi
 8004b6a:	b29b      	uxthmi	r3, r3
 8004b6c:	e7ef      	b.n	8004b4e <_printf_i+0x14a>
 8004b6e:	4665      	mov	r5, ip
 8004b70:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b74:	fb02 3311 	mls	r3, r2, r1, r3
 8004b78:	5cc3      	ldrb	r3, [r0, r3]
 8004b7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b7e:	460b      	mov	r3, r1
 8004b80:	2900      	cmp	r1, #0
 8004b82:	d1f5      	bne.n	8004b70 <_printf_i+0x16c>
 8004b84:	e7b9      	b.n	8004afa <_printf_i+0xf6>
 8004b86:	6813      	ldr	r3, [r2, #0]
 8004b88:	6825      	ldr	r5, [r4, #0]
 8004b8a:	1d18      	adds	r0, r3, #4
 8004b8c:	6961      	ldr	r1, [r4, #20]
 8004b8e:	6010      	str	r0, [r2, #0]
 8004b90:	0628      	lsls	r0, r5, #24
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	d501      	bpl.n	8004b9a <_printf_i+0x196>
 8004b96:	6019      	str	r1, [r3, #0]
 8004b98:	e002      	b.n	8004ba0 <_printf_i+0x19c>
 8004b9a:	066a      	lsls	r2, r5, #25
 8004b9c:	d5fb      	bpl.n	8004b96 <_printf_i+0x192>
 8004b9e:	8019      	strh	r1, [r3, #0]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4665      	mov	r5, ip
 8004ba4:	6123      	str	r3, [r4, #16]
 8004ba6:	e7b9      	b.n	8004b1c <_printf_i+0x118>
 8004ba8:	6813      	ldr	r3, [r2, #0]
 8004baa:	1d19      	adds	r1, r3, #4
 8004bac:	6011      	str	r1, [r2, #0]
 8004bae:	681d      	ldr	r5, [r3, #0]
 8004bb0:	6862      	ldr	r2, [r4, #4]
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f000 f837 	bl	8004c28 <memchr>
 8004bba:	b108      	cbz	r0, 8004bc0 <_printf_i+0x1bc>
 8004bbc:	1b40      	subs	r0, r0, r5
 8004bbe:	6060      	str	r0, [r4, #4]
 8004bc0:	6863      	ldr	r3, [r4, #4]
 8004bc2:	6123      	str	r3, [r4, #16]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bca:	e7a7      	b.n	8004b1c <_printf_i+0x118>
 8004bcc:	6923      	ldr	r3, [r4, #16]
 8004bce:	462a      	mov	r2, r5
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	47c0      	blx	r8
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d0aa      	beq.n	8004b30 <_printf_i+0x12c>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	079b      	lsls	r3, r3, #30
 8004bde:	d413      	bmi.n	8004c08 <_printf_i+0x204>
 8004be0:	68e0      	ldr	r0, [r4, #12]
 8004be2:	9b03      	ldr	r3, [sp, #12]
 8004be4:	4298      	cmp	r0, r3
 8004be6:	bfb8      	it	lt
 8004be8:	4618      	movlt	r0, r3
 8004bea:	e7a3      	b.n	8004b34 <_printf_i+0x130>
 8004bec:	2301      	movs	r3, #1
 8004bee:	464a      	mov	r2, r9
 8004bf0:	4639      	mov	r1, r7
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	47c0      	blx	r8
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	d09a      	beq.n	8004b30 <_printf_i+0x12c>
 8004bfa:	3501      	adds	r5, #1
 8004bfc:	68e3      	ldr	r3, [r4, #12]
 8004bfe:	9a03      	ldr	r2, [sp, #12]
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	42ab      	cmp	r3, r5
 8004c04:	dcf2      	bgt.n	8004bec <_printf_i+0x1e8>
 8004c06:	e7eb      	b.n	8004be0 <_printf_i+0x1dc>
 8004c08:	2500      	movs	r5, #0
 8004c0a:	f104 0919 	add.w	r9, r4, #25
 8004c0e:	e7f5      	b.n	8004bfc <_printf_i+0x1f8>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1ac      	bne.n	8004b6e <_printf_i+0x16a>
 8004c14:	7803      	ldrb	r3, [r0, #0]
 8004c16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c1e:	e76c      	b.n	8004afa <_printf_i+0xf6>
 8004c20:	08004fd5 	.word	0x08004fd5
 8004c24:	08004fe6 	.word	0x08004fe6

08004c28 <memchr>:
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	b2c9      	uxtb	r1, r1
 8004c2c:	4402      	add	r2, r0
 8004c2e:	4290      	cmp	r0, r2
 8004c30:	4603      	mov	r3, r0
 8004c32:	d101      	bne.n	8004c38 <memchr+0x10>
 8004c34:	2300      	movs	r3, #0
 8004c36:	e003      	b.n	8004c40 <memchr+0x18>
 8004c38:	781c      	ldrb	r4, [r3, #0]
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	428c      	cmp	r4, r1
 8004c3e:	d1f6      	bne.n	8004c2e <memchr+0x6>
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd10      	pop	{r4, pc}

08004c44 <memmove>:
 8004c44:	4288      	cmp	r0, r1
 8004c46:	b510      	push	{r4, lr}
 8004c48:	eb01 0302 	add.w	r3, r1, r2
 8004c4c:	d807      	bhi.n	8004c5e <memmove+0x1a>
 8004c4e:	1e42      	subs	r2, r0, #1
 8004c50:	4299      	cmp	r1, r3
 8004c52:	d00a      	beq.n	8004c6a <memmove+0x26>
 8004c54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c58:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004c5c:	e7f8      	b.n	8004c50 <memmove+0xc>
 8004c5e:	4283      	cmp	r3, r0
 8004c60:	d9f5      	bls.n	8004c4e <memmove+0xa>
 8004c62:	1881      	adds	r1, r0, r2
 8004c64:	1ad2      	subs	r2, r2, r3
 8004c66:	42d3      	cmn	r3, r2
 8004c68:	d100      	bne.n	8004c6c <memmove+0x28>
 8004c6a:	bd10      	pop	{r4, pc}
 8004c6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c70:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004c74:	e7f7      	b.n	8004c66 <memmove+0x22>
	...

08004c78 <_free_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4605      	mov	r5, r0
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	d043      	beq.n	8004d08 <_free_r+0x90>
 8004c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c84:	1f0c      	subs	r4, r1, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bfb8      	it	lt
 8004c8a:	18e4      	addlt	r4, r4, r3
 8004c8c:	f000 f8d0 	bl	8004e30 <__malloc_lock>
 8004c90:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <_free_r+0x94>)
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	4610      	mov	r0, r2
 8004c96:	b933      	cbnz	r3, 8004ca6 <_free_r+0x2e>
 8004c98:	6063      	str	r3, [r4, #4]
 8004c9a:	6014      	str	r4, [r2, #0]
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ca2:	f000 b8c6 	b.w	8004e32 <__malloc_unlock>
 8004ca6:	42a3      	cmp	r3, r4
 8004ca8:	d90b      	bls.n	8004cc2 <_free_r+0x4a>
 8004caa:	6821      	ldr	r1, [r4, #0]
 8004cac:	1862      	adds	r2, r4, r1
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	bf01      	itttt	eq
 8004cb2:	681a      	ldreq	r2, [r3, #0]
 8004cb4:	685b      	ldreq	r3, [r3, #4]
 8004cb6:	1852      	addeq	r2, r2, r1
 8004cb8:	6022      	streq	r2, [r4, #0]
 8004cba:	6063      	str	r3, [r4, #4]
 8004cbc:	6004      	str	r4, [r0, #0]
 8004cbe:	e7ed      	b.n	8004c9c <_free_r+0x24>
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	b10a      	cbz	r2, 8004cca <_free_r+0x52>
 8004cc6:	42a2      	cmp	r2, r4
 8004cc8:	d9fa      	bls.n	8004cc0 <_free_r+0x48>
 8004cca:	6819      	ldr	r1, [r3, #0]
 8004ccc:	1858      	adds	r0, r3, r1
 8004cce:	42a0      	cmp	r0, r4
 8004cd0:	d10b      	bne.n	8004cea <_free_r+0x72>
 8004cd2:	6820      	ldr	r0, [r4, #0]
 8004cd4:	4401      	add	r1, r0
 8004cd6:	1858      	adds	r0, r3, r1
 8004cd8:	4282      	cmp	r2, r0
 8004cda:	6019      	str	r1, [r3, #0]
 8004cdc:	d1de      	bne.n	8004c9c <_free_r+0x24>
 8004cde:	6810      	ldr	r0, [r2, #0]
 8004ce0:	6852      	ldr	r2, [r2, #4]
 8004ce2:	4401      	add	r1, r0
 8004ce4:	6019      	str	r1, [r3, #0]
 8004ce6:	605a      	str	r2, [r3, #4]
 8004ce8:	e7d8      	b.n	8004c9c <_free_r+0x24>
 8004cea:	d902      	bls.n	8004cf2 <_free_r+0x7a>
 8004cec:	230c      	movs	r3, #12
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	e7d4      	b.n	8004c9c <_free_r+0x24>
 8004cf2:	6820      	ldr	r0, [r4, #0]
 8004cf4:	1821      	adds	r1, r4, r0
 8004cf6:	428a      	cmp	r2, r1
 8004cf8:	bf01      	itttt	eq
 8004cfa:	6811      	ldreq	r1, [r2, #0]
 8004cfc:	6852      	ldreq	r2, [r2, #4]
 8004cfe:	1809      	addeq	r1, r1, r0
 8004d00:	6021      	streq	r1, [r4, #0]
 8004d02:	6062      	str	r2, [r4, #4]
 8004d04:	605c      	str	r4, [r3, #4]
 8004d06:	e7c9      	b.n	8004c9c <_free_r+0x24>
 8004d08:	bd38      	pop	{r3, r4, r5, pc}
 8004d0a:	bf00      	nop
 8004d0c:	2000029c 	.word	0x2000029c

08004d10 <_malloc_r>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	1ccd      	adds	r5, r1, #3
 8004d14:	f025 0503 	bic.w	r5, r5, #3
 8004d18:	3508      	adds	r5, #8
 8004d1a:	2d0c      	cmp	r5, #12
 8004d1c:	bf38      	it	cc
 8004d1e:	250c      	movcc	r5, #12
 8004d20:	2d00      	cmp	r5, #0
 8004d22:	4606      	mov	r6, r0
 8004d24:	db01      	blt.n	8004d2a <_malloc_r+0x1a>
 8004d26:	42a9      	cmp	r1, r5
 8004d28:	d903      	bls.n	8004d32 <_malloc_r+0x22>
 8004d2a:	230c      	movs	r3, #12
 8004d2c:	6033      	str	r3, [r6, #0]
 8004d2e:	2000      	movs	r0, #0
 8004d30:	bd70      	pop	{r4, r5, r6, pc}
 8004d32:	f000 f87d 	bl	8004e30 <__malloc_lock>
 8004d36:	4a21      	ldr	r2, [pc, #132]	; (8004dbc <_malloc_r+0xac>)
 8004d38:	6814      	ldr	r4, [r2, #0]
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	b991      	cbnz	r1, 8004d64 <_malloc_r+0x54>
 8004d3e:	4c20      	ldr	r4, [pc, #128]	; (8004dc0 <_malloc_r+0xb0>)
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	b91b      	cbnz	r3, 8004d4c <_malloc_r+0x3c>
 8004d44:	4630      	mov	r0, r6
 8004d46:	f000 f863 	bl	8004e10 <_sbrk_r>
 8004d4a:	6020      	str	r0, [r4, #0]
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f000 f85e 	bl	8004e10 <_sbrk_r>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d124      	bne.n	8004da2 <_malloc_r+0x92>
 8004d58:	230c      	movs	r3, #12
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	6033      	str	r3, [r6, #0]
 8004d5e:	f000 f868 	bl	8004e32 <__malloc_unlock>
 8004d62:	e7e4      	b.n	8004d2e <_malloc_r+0x1e>
 8004d64:	680b      	ldr	r3, [r1, #0]
 8004d66:	1b5b      	subs	r3, r3, r5
 8004d68:	d418      	bmi.n	8004d9c <_malloc_r+0x8c>
 8004d6a:	2b0b      	cmp	r3, #11
 8004d6c:	d90f      	bls.n	8004d8e <_malloc_r+0x7e>
 8004d6e:	600b      	str	r3, [r1, #0]
 8004d70:	18cc      	adds	r4, r1, r3
 8004d72:	50cd      	str	r5, [r1, r3]
 8004d74:	4630      	mov	r0, r6
 8004d76:	f000 f85c 	bl	8004e32 <__malloc_unlock>
 8004d7a:	f104 000b 	add.w	r0, r4, #11
 8004d7e:	1d23      	adds	r3, r4, #4
 8004d80:	f020 0007 	bic.w	r0, r0, #7
 8004d84:	1ac3      	subs	r3, r0, r3
 8004d86:	d0d3      	beq.n	8004d30 <_malloc_r+0x20>
 8004d88:	425a      	negs	r2, r3
 8004d8a:	50e2      	str	r2, [r4, r3]
 8004d8c:	e7d0      	b.n	8004d30 <_malloc_r+0x20>
 8004d8e:	684b      	ldr	r3, [r1, #4]
 8004d90:	428c      	cmp	r4, r1
 8004d92:	bf16      	itet	ne
 8004d94:	6063      	strne	r3, [r4, #4]
 8004d96:	6013      	streq	r3, [r2, #0]
 8004d98:	460c      	movne	r4, r1
 8004d9a:	e7eb      	b.n	8004d74 <_malloc_r+0x64>
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	6849      	ldr	r1, [r1, #4]
 8004da0:	e7cc      	b.n	8004d3c <_malloc_r+0x2c>
 8004da2:	1cc4      	adds	r4, r0, #3
 8004da4:	f024 0403 	bic.w	r4, r4, #3
 8004da8:	42a0      	cmp	r0, r4
 8004daa:	d005      	beq.n	8004db8 <_malloc_r+0xa8>
 8004dac:	1a21      	subs	r1, r4, r0
 8004dae:	4630      	mov	r0, r6
 8004db0:	f000 f82e 	bl	8004e10 <_sbrk_r>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d0cf      	beq.n	8004d58 <_malloc_r+0x48>
 8004db8:	6025      	str	r5, [r4, #0]
 8004dba:	e7db      	b.n	8004d74 <_malloc_r+0x64>
 8004dbc:	2000029c 	.word	0x2000029c
 8004dc0:	200002a0 	.word	0x200002a0

08004dc4 <_realloc_r>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	4607      	mov	r7, r0
 8004dc8:	4614      	mov	r4, r2
 8004dca:	460e      	mov	r6, r1
 8004dcc:	b921      	cbnz	r1, 8004dd8 <_realloc_r+0x14>
 8004dce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	f7ff bf9c 	b.w	8004d10 <_malloc_r>
 8004dd8:	b922      	cbnz	r2, 8004de4 <_realloc_r+0x20>
 8004dda:	f7ff ff4d 	bl	8004c78 <_free_r>
 8004dde:	4625      	mov	r5, r4
 8004de0:	4628      	mov	r0, r5
 8004de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de4:	f000 f826 	bl	8004e34 <_malloc_usable_size_r>
 8004de8:	42a0      	cmp	r0, r4
 8004dea:	d20f      	bcs.n	8004e0c <_realloc_r+0x48>
 8004dec:	4621      	mov	r1, r4
 8004dee:	4638      	mov	r0, r7
 8004df0:	f7ff ff8e 	bl	8004d10 <_malloc_r>
 8004df4:	4605      	mov	r5, r0
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d0f2      	beq.n	8004de0 <_realloc_r+0x1c>
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4622      	mov	r2, r4
 8004dfe:	f7ff fc05 	bl	800460c <memcpy>
 8004e02:	4631      	mov	r1, r6
 8004e04:	4638      	mov	r0, r7
 8004e06:	f7ff ff37 	bl	8004c78 <_free_r>
 8004e0a:	e7e9      	b.n	8004de0 <_realloc_r+0x1c>
 8004e0c:	4635      	mov	r5, r6
 8004e0e:	e7e7      	b.n	8004de0 <_realloc_r+0x1c>

08004e10 <_sbrk_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	2300      	movs	r3, #0
 8004e14:	4c05      	ldr	r4, [pc, #20]	; (8004e2c <_sbrk_r+0x1c>)
 8004e16:	4605      	mov	r5, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	6023      	str	r3, [r4, #0]
 8004e1c:	f7fc fece 	bl	8001bbc <_sbrk>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_sbrk_r+0x1a>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_sbrk_r+0x1a>
 8004e28:	602b      	str	r3, [r5, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	20000418 	.word	0x20000418

08004e30 <__malloc_lock>:
 8004e30:	4770      	bx	lr

08004e32 <__malloc_unlock>:
 8004e32:	4770      	bx	lr

08004e34 <_malloc_usable_size_r>:
 8004e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e38:	1f18      	subs	r0, r3, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bfbc      	itt	lt
 8004e3e:	580b      	ldrlt	r3, [r1, r0]
 8004e40:	18c0      	addlt	r0, r0, r3
 8004e42:	4770      	bx	lr
 8004e44:	0000      	movs	r0, r0
	...

08004e48 <ceil>:
 8004e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e4c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004e50:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004e54:	2e13      	cmp	r6, #19
 8004e56:	4607      	mov	r7, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	dc31      	bgt.n	8004ec4 <ceil+0x7c>
 8004e60:	2e00      	cmp	r6, #0
 8004e62:	da12      	bge.n	8004e8a <ceil+0x42>
 8004e64:	a334      	add	r3, pc, #208	; (adr r3, 8004f38 <ceil+0xf0>)
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	f7fb f97f 	bl	800016c <__adddf3>
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2300      	movs	r3, #0
 8004e72:	f7fb fdc1 	bl	80009f8 <__aeabi_dcmpgt>
 8004e76:	b128      	cbz	r0, 8004e84 <ceil+0x3c>
 8004e78:	2c00      	cmp	r4, #0
 8004e7a:	db57      	blt.n	8004f2c <ceil+0xe4>
 8004e7c:	433c      	orrs	r4, r7
 8004e7e:	d059      	beq.n	8004f34 <ceil+0xec>
 8004e80:	2500      	movs	r5, #0
 8004e82:	4c2f      	ldr	r4, [pc, #188]	; (8004f40 <ceil+0xf8>)
 8004e84:	4623      	mov	r3, r4
 8004e86:	462f      	mov	r7, r5
 8004e88:	e026      	b.n	8004ed8 <ceil+0x90>
 8004e8a:	4a2e      	ldr	r2, [pc, #184]	; (8004f44 <ceil+0xfc>)
 8004e8c:	fa42 f806 	asr.w	r8, r2, r6
 8004e90:	ea01 0208 	and.w	r2, r1, r8
 8004e94:	4302      	orrs	r2, r0
 8004e96:	d01f      	beq.n	8004ed8 <ceil+0x90>
 8004e98:	a327      	add	r3, pc, #156	; (adr r3, 8004f38 <ceil+0xf0>)
 8004e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9e:	f7fb f965 	bl	800016c <__adddf3>
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f7fb fda7 	bl	80009f8 <__aeabi_dcmpgt>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d0ea      	beq.n	8004e84 <ceil+0x3c>
 8004eae:	2c00      	cmp	r4, #0
 8004eb0:	bfc2      	ittt	gt
 8004eb2:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8004eb6:	fa43 f606 	asrgt.w	r6, r3, r6
 8004eba:	19a4      	addgt	r4, r4, r6
 8004ebc:	ea24 0408 	bic.w	r4, r4, r8
 8004ec0:	2500      	movs	r5, #0
 8004ec2:	e7df      	b.n	8004e84 <ceil+0x3c>
 8004ec4:	2e33      	cmp	r6, #51	; 0x33
 8004ec6:	dd0b      	ble.n	8004ee0 <ceil+0x98>
 8004ec8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004ecc:	d104      	bne.n	8004ed8 <ceil+0x90>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	f7fb f94c 	bl	800016c <__adddf3>
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4638      	mov	r0, r7
 8004eda:	4619      	mov	r1, r3
 8004edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004ee8:	fa22 f808 	lsr.w	r8, r2, r8
 8004eec:	ea18 0f00 	tst.w	r8, r0
 8004ef0:	d0f2      	beq.n	8004ed8 <ceil+0x90>
 8004ef2:	a311      	add	r3, pc, #68	; (adr r3, 8004f38 <ceil+0xf0>)
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	f7fb f938 	bl	800016c <__adddf3>
 8004efc:	2200      	movs	r2, #0
 8004efe:	2300      	movs	r3, #0
 8004f00:	f7fb fd7a 	bl	80009f8 <__aeabi_dcmpgt>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	d0bd      	beq.n	8004e84 <ceil+0x3c>
 8004f08:	2c00      	cmp	r4, #0
 8004f0a:	dd02      	ble.n	8004f12 <ceil+0xca>
 8004f0c:	2e14      	cmp	r6, #20
 8004f0e:	d103      	bne.n	8004f18 <ceil+0xd0>
 8004f10:	3401      	adds	r4, #1
 8004f12:	ea25 0508 	bic.w	r5, r5, r8
 8004f16:	e7b5      	b.n	8004e84 <ceil+0x3c>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004f1e:	fa03 f606 	lsl.w	r6, r3, r6
 8004f22:	4435      	add	r5, r6
 8004f24:	42bd      	cmp	r5, r7
 8004f26:	bf38      	it	cc
 8004f28:	18e4      	addcc	r4, r4, r3
 8004f2a:	e7f2      	b.n	8004f12 <ceil+0xca>
 8004f2c:	2500      	movs	r5, #0
 8004f2e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004f32:	e7a7      	b.n	8004e84 <ceil+0x3c>
 8004f34:	4625      	mov	r5, r4
 8004f36:	e7a5      	b.n	8004e84 <ceil+0x3c>
 8004f38:	8800759c 	.word	0x8800759c
 8004f3c:	7e37e43c 	.word	0x7e37e43c
 8004f40:	3ff00000 	.word	0x3ff00000
 8004f44:	000fffff 	.word	0x000fffff

08004f48 <_init>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	bf00      	nop
 8004f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4e:	bc08      	pop	{r3}
 8004f50:	469e      	mov	lr, r3
 8004f52:	4770      	bx	lr

08004f54 <_fini>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	bf00      	nop
 8004f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5a:	bc08      	pop	{r3}
 8004f5c:	469e      	mov	lr, r3
 8004f5e:	4770      	bx	lr
